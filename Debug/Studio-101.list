
Studio-101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800aef0  0800aef0  0000bef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af60  0800af60  0000c2b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af60  0800af60  0000bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af68  0800af68  0000c2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af68  0800af68  0000bf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af6c  0800af6c  0000bf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0800af70  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ac  200002b0  0800b220  0000c2b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  0800b220  0000c35c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bed  00000000  00000000  0000c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdd  00000000  00000000  00022ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00025ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e83  00000000  00000000  00026ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002706b  00000000  00000000  00027b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163fe  00000000  00000000  0004ebd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff006  00000000  00000000  00064fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  00164020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00169488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002b0 	.word	0x200002b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aed8 	.word	0x0800aed8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002b4 	.word	0x200002b4
 8000214:	0800aed8 	.word	0x0800aed8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200002cc 	.word	0x200002cc

08000f50 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <modbus_3t5_Timeout+0x1c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	755a      	strb	r2, [r3, #21]

}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200002cc 	.word	0x200002cc

08000f70 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f007 fe83 	bl	8008c84 <HAL_UART_GetError>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d101      	bne.n	8000f88 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f84:	f7ff ffc4 	bl	8000f10 <modbus_1t5_Timeout>

	}
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f9a:	4a25      	ldr	r2, [pc, #148]	@ (8001030 <Modbus_init+0xa0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <Modbus_init+0xa0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <Modbus_init+0xa4>)
 8000fae:	210e      	movs	r1, #14
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 f949 	bl	8007248 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fe0b 	bl	8008bd8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 fe22 	bl	8008c10 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <Modbus_init+0xa8>)
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 f8f3 	bl	80081c0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Modbus_init+0xa0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <Modbus_init+0xa0>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <Modbus_init+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fec:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f007 fa1b 	bl	8008434 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Modbus_init+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d10c      	bne.n	8001028 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Modbus_init+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4618      	mov	r0, r3
 8001016:	f005 f8e9 	bl	80061ec <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <Modbus_init+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f005 fb42 	bl	80066ac <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200002cc 	.word	0x200002cc
 8001034:	08000f51 	.word	0x08000f51
 8001038:	08000f71 	.word	0x08000f71

0800103c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001048:	23ff      	movs	r3, #255	@ 0xff
 800104a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800104c:	23ff      	movs	r3, #255	@ 0xff
 800104e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001050:	e013      	b.n	800107a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	4053      	eors	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001062:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <CRC16+0x64>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4413      	add	r3, r2
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4053      	eors	r3, r2
 800106e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <CRC16+0x68>)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800107a:	883b      	ldrh	r3, [r7, #0]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	803a      	strh	r2, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e6      	bne.n	8001052 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000100 	.word	0x20000100
 80010a4:	20000000 	.word	0x20000000

080010a8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010ae:	4b7e      	ldr	r3, [pc, #504]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d80a      	bhi.n	80010d0 <Modbus_Protocal_Worker+0x28>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <Modbus_Protocal_Worker+0x18>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010db 	.word	0x080010db
 80010c4:	0800126f 	.word	0x0800126f
 80010c8:	08001167 	.word	0x08001167
 80010cc:	080011ab 	.word	0x080011ab
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010d0:	4b75      	ldr	r3, [pc, #468]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	75da      	strb	r2, [r3, #23]
		break;
 80010d8:	e0e1      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010da:	4b73      	ldr	r3, [pc, #460]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80010e6:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2202      	movs	r2, #2
 80010ec:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80010ee:	f000 f9cd 	bl	800148c <Modbus_Emission>
 80010f2:	e018      	b.n	8001126 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80010f4:	4b6c      	ldr	r3, [pc, #432]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80010fe:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	429a      	cmp	r2, r3
 800110c:	d00b      	beq.n	8001126 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800110e:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001116:	4b64      	ldr	r3, [pc, #400]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800111e:	4b62      	ldr	r3, [pc, #392]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2203      	movs	r2, #3
 8001124:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001126:	4b60      	ldr	r3, [pc, #384]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001130:	2b20      	cmp	r3, #32
 8001132:	f040 80ad 	bne.w	8001290 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001136:	4b5c      	ldr	r3, [pc, #368]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001140:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001146:	4b58      	ldr	r3, [pc, #352]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b57      	ldr	r3, [pc, #348]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001152:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001156:	4413      	add	r3, r2
 8001158:	3302      	adds	r3, #2
 800115a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800115e:	4619      	mov	r1, r3
 8001160:	f007 f968 	bl	8008434 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001164:	e094      	b.n	8001290 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001166:	4b50      	ldr	r3, [pc, #320]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	7d1b      	ldrb	r3, [r3, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 8091 	beq.w	8001294 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001172:	4b4d      	ldr	r3, [pc, #308]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	22fe      	movs	r2, #254	@ 0xfe
 8001178:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800117a:	4b4b      	ldr	r3, [pc, #300]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001184:	4b48      	ldr	r3, [pc, #288]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001194:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001196:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001198:	1a8a      	subs	r2, r1, r2
 800119a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800119c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011a0:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2204      	movs	r2, #4
 80011a6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80011a8:	e074      	b.n	8001294 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80011b2:	f113 0f02 	cmn.w	r3, #2
 80011b6:	d150      	bne.n	800125a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011c0:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80011c8:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011d0:	3b02      	subs	r3, #2
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f7ff ff31 	bl	800103c <CRC16>
 80011da:	4603      	mov	r3, r0
 80011dc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011de:	793a      	ldrb	r2, [r7, #4]
 80011e0:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011ec:	3b02      	subs	r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d10c      	bne.n	8001212 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011f8:	797a      	ldrb	r2, [r7, #5]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001206:	3b01      	subs	r3, #1
 8001208:	440b      	add	r3, r1
 800120a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800120e:	429a      	cmp	r2, r3
 8001210:	d004      	beq.n	800121c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	22ff      	movs	r2, #255	@ 0xff
 8001218:	759a      	strb	r2, [r3, #22]
				break;
 800121a:	e040      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001224:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d113      	bne.n	8001256 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800123e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001248:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800124a:	461a      	mov	r2, r3
 800124c:	f008 feaa 	bl	8009fa4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001250:	f000 f904 	bl	800145c <Modbus_frame_response>
 8001254:	e001      	b.n	800125a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001256:	bf00      	nop
					}
		break;


	}
}
 8001258:	e021      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	7d5b      	ldrb	r3, [r3, #21]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d019      	beq.n	8001298 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	75da      	strb	r2, [r3, #23]
		break;
 800126c:	e014      	b.n	8001298 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001278:	2b20      	cmp	r3, #32
 800127a:	d10f      	bne.n	800129c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	75da      	strb	r2, [r3, #23]
		break;
 800128e:	e005      	b.n	800129c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001290:	bf00      	nop
 8001292:	e004      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001294:	bf00      	nop
 8001296:	e002      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001298:	bf00      	nop
 800129a:	e000      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		break;
 800129c:	bf00      	nop
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002cc 	.word	0x200002cc

080012ac <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7e5b      	ldrb	r3, [r3, #25]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	7e92      	ldrb	r2, [r2, #26]
 80012c2:	4413      	add	r3, r2
 80012c4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d903      	bls.n	80012da <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012d2:	2002      	movs	r0, #2
 80012d4:	f000 f8a0 	bl	8001418 <ModbusErrorReply>
			 return;
 80012d8:	e023      	b.n	8001322 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6859      	ldr	r1, [r3, #4]
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	7ed2      	ldrb	r2, [r2, #27]
 80012ec:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	7f12      	ldrb	r2, [r2, #28]
 8001300:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <modbusWrite1Register+0x7c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <modbusWrite1Register+0x7c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	f008 fe46 	bl	8009fa4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <modbusWrite1Register+0x7c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200002cc 	.word	0x200002cc

0800132c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001332:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <modbusRead1Register+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7edb      	ldrb	r3, [r3, #27]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	4a35      	ldr	r2, [pc, #212]	@ (8001414 <modbusRead1Register+0xe8>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	7f12      	ldrb	r2, [r2, #28]
 8001342:	4413      	add	r3, r2
 8001344:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <modbusRead1Register+0xe8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7e5b      	ldrb	r3, [r3, #25]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	4a30      	ldr	r2, [pc, #192]	@ (8001414 <modbusRead1Register+0xe8>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	7e92      	ldrb	r2, [r2, #26]
 8001356:	4413      	add	r3, r2
 8001358:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <modbusRead1Register+0x3a>
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	2b7d      	cmp	r3, #125	@ 0x7d
 8001364:	d903      	bls.n	800136e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001366:	2003      	movs	r0, #3
 8001368:	f000 f856 	bl	8001418 <ModbusErrorReply>
		 return;
 800136c:	e04e      	b.n	800140c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800136e:	88ba      	ldrh	r2, [r7, #4]
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <modbusRead1Register+0xe8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d808      	bhi.n	800138c <modbusRead1Register+0x60>
 800137a:	88ba      	ldrh	r2, [r7, #4]
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4413      	add	r3, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <modbusRead1Register+0xe8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	429a      	cmp	r2, r3
 800138a:	d903      	bls.n	8001394 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800138c:	2002      	movs	r0, #2
 800138e:	f000 f843 	bl	8001418 <ModbusErrorReply>
		 return;
 8001392:	e03b      	b.n	800140c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <modbusRead1Register+0xe8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2203      	movs	r2, #3
 800139a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <modbusRead1Register+0xe8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0052      	lsls	r2, r2, #1
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013ae:	2400      	movs	r4, #0
 80013b0:	e020      	b.n	80013f4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <modbusRead1Register+0xe8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	4423      	add	r3, r4
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	18d1      	adds	r1, r2, r3
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <modbusRead1Register+0xe8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	1c63      	adds	r3, r4, #1
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	7849      	ldrb	r1, [r1, #1]
 80013ca:	4413      	add	r3, r2
 80013cc:	460a      	mov	r2, r1
 80013ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <modbusRead1Register+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	88bb      	ldrh	r3, [r7, #4]
 80013da:	4423      	add	r3, r4
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	18d1      	adds	r1, r2, r3
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <modbusRead1Register+0xe8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	0063      	lsls	r3, r4, #1
 80013e6:	3303      	adds	r3, #3
 80013e8:	7809      	ldrb	r1, [r1, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	460a      	mov	r2, r1
 80013ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80013f2:	3401      	adds	r4, #1
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	429c      	cmp	r4, r3
 80013f8:	dbdb      	blt.n	80013b2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <modbusRead1Register+0xe8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0052      	lsls	r2, r2, #1
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002cc 	.word	0x200002cc

08001418 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <ModbusErrorReply+0x40>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	7e1a      	ldrb	r2, [r3, #24]
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <ModbusErrorReply+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <ModbusErrorReply+0x40>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <ModbusErrorReply+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2202      	movs	r2, #2
 8001446:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200002cc 	.word	0x200002cc

0800145c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <Modbus_frame_response+0x2c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	7e1b      	ldrb	r3, [r3, #24]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d004      	beq.n	8001474 <Modbus_frame_response+0x18>
 800146a:	2b06      	cmp	r3, #6
 800146c:	d105      	bne.n	800147a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800146e:	f7ff ff1d 	bl	80012ac <modbusWrite1Register>
		break;
 8001472:	e006      	b.n	8001482 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001474:	f7ff ff5a 	bl	800132c <modbusRead1Register>
		break;
 8001478:	e003      	b.n	8001482 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff ffcc 	bl	8001418 <ModbusErrorReply>
		break;
 8001480:	bf00      	nop

	}
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200002cc 	.word	0x200002cc

0800148c <Modbus_Emission>:

void Modbus_Emission()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <Modbus_Emission+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149c:	2b20      	cmp	r3, #32
 800149e:	d15d      	bne.n	800155c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014a0:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <Modbus_Emission+0xe8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <Modbus_Emission+0xe8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <Modbus_Emission+0xe8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80014b6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <Modbus_Emission+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80014c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <Modbus_Emission+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80014c8:	461a      	mov	r2, r3
 80014ca:	f008 fd6b 	bl	8009fa4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014ce:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <Modbus_Emission+0xe8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <Modbus_Emission+0xe8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3203      	adds	r2, #3
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <Modbus_Emission+0xe8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <Modbus_Emission+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014f4:	3b02      	subs	r3, #2
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff fd9f 	bl	800103c <CRC16>
 80014fe:	4603      	mov	r3, r0
 8001500:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <Modbus_Emission+0xe8>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <Modbus_Emission+0xe8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800150e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001510:	7939      	ldrb	r1, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	460a      	mov	r2, r1
 8001516:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <Modbus_Emission+0xe8>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <Modbus_Emission+0xe8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001526:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001528:	7979      	ldrb	r1, [r7, #5]
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <Modbus_Emission+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153c:	2b20      	cmp	r3, #32
 800153e:	d10d      	bne.n	800155c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <Modbus_Emission+0xe8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <Modbus_Emission+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <Modbus_Emission+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001552:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001556:	461a      	mov	r2, r3
 8001558:	f006 feec 	bl	8008334 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <Modbus_Emission+0xe8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <Modbus_Emission+0xe8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	755a      	strb	r2, [r3, #21]

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002cc 	.word	0x200002cc

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f002 fecc 	bl	800431a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f905 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 fbf5 	bl	8001d74 <MX_GPIO_Init>
  MX_DMA_Init();
 800158a:	f000 fbb9 	bl	8001d00 <MX_DMA_Init>
  MX_TIM3_Init();
 800158e:	f000 f999 	bl	80018c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001592:	f000 fb1b 	bl	8001bcc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001596:	f000 fa0d 	bl	80019b4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800159a:	f000 fa61 	bl	8001a60 <MX_TIM5_Init>
  MX_TIM16_Init();
 800159e:	f000 fae5 	bl	8001b6c <MX_TIM16_Init>
  MX_TIM2_Init();
 80015a2:	f000 f941 	bl	8001828 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80015a6:	f000 fb5d 	bl	8001c64 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80015aa:	f000 faa7 	bl	8001afc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //modbus
  hmodbus.huart = &huart2;
 80015ae:	4b62      	ldr	r3, [pc, #392]	@ (8001738 <main+0x1c0>)
 80015b0:	4a62      	ldr	r2, [pc, #392]	@ (800173c <main+0x1c4>)
 80015b2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80015b4:	4b60      	ldr	r3, [pc, #384]	@ (8001738 <main+0x1c0>)
 80015b6:	4a62      	ldr	r2, [pc, #392]	@ (8001740 <main+0x1c8>)
 80015b8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80015ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001738 <main+0x1c0>)
 80015bc:	2215      	movs	r2, #21
 80015be:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80015c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001738 <main+0x1c0>)
 80015c2:	22c8      	movs	r2, #200	@ 0xc8
 80015c4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80015c6:	495f      	ldr	r1, [pc, #380]	@ (8001744 <main+0x1cc>)
 80015c8:	485b      	ldr	r0, [pc, #364]	@ (8001738 <main+0x1c0>)
 80015ca:	f7ff fce1 	bl	8000f90 <Modbus_init>
  HAL_TIM_Base_Start_IT(&htim6);
 80015ce:	485e      	ldr	r0, [pc, #376]	@ (8001748 <main+0x1d0>)
 80015d0:	f004 fe0c 	bl	80061ec <HAL_TIM_Base_Start_IT>

  //Joy
  UARTDMAConfig();
 80015d4:	f001 fae6 	bl	8002ba4 <UARTDMAConfig>

  //Motor
  HAL_TIM_Base_Start(&htim3);
 80015d8:	485c      	ldr	r0, [pc, #368]	@ (800174c <main+0x1d4>)
 80015da:	f004 fd97 	bl	800610c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015de:	2104      	movs	r1, #4
 80015e0:	485a      	ldr	r0, [pc, #360]	@ (800174c <main+0x1d4>)
 80015e2:	f004 fee9 	bl	80063b8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2140      	movs	r1, #64	@ 0x40
 80015ea:	4859      	ldr	r0, [pc, #356]	@ (8001750 <main+0x1d8>)
 80015ec:	f003 fce2 	bl	8004fb4 <HAL_GPIO_WritePin>

  //encoder
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80015f0:	213c      	movs	r1, #60	@ 0x3c
 80015f2:	4858      	ldr	r0, [pc, #352]	@ (8001754 <main+0x1dc>)
 80015f4:	f005 f99c 	bl	8006930 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80015f8:	4857      	ldr	r0, [pc, #348]	@ (8001758 <main+0x1e0>)
 80015fa:	f004 fdf7 	bl	80061ec <HAL_TIM_Base_Start_IT>

  //PID
//    PID.Kp = 0.34;
//    PID.Ki = 0.0000006;
//    PID.Kd = 0.0000001;
    PID.Kp = 0.478;
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <main+0x1e4>)
 8001600:	4a57      	ldr	r2, [pc, #348]	@ (8001760 <main+0x1e8>)
 8001602:	619a      	str	r2, [r3, #24]
    PID.Ki = 0.0000006;
 8001604:	4b55      	ldr	r3, [pc, #340]	@ (800175c <main+0x1e4>)
 8001606:	4a57      	ldr	r2, [pc, #348]	@ (8001764 <main+0x1ec>)
 8001608:	61da      	str	r2, [r3, #28]
    PID.Kd = 0.0000000151;
 800160a:	4b54      	ldr	r3, [pc, #336]	@ (800175c <main+0x1e4>)
 800160c:	4a56      	ldr	r2, [pc, #344]	@ (8001768 <main+0x1f0>)
 800160e:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&PID, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	4852      	ldr	r0, [pc, #328]	@ (800175c <main+0x1e4>)
 8001614:	f008 fc5e 	bl	8009ed4 <arm_pid_init_f32>

  //Home
  while(1)
  {
	  sensor_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f003 fcb0 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <main+0x1f4>)
 800162a:	701a      	strb	r2, [r3, #0]
	  sensor_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800162c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f003 fca6 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <main+0x1f8>)
 800163e:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x00].U16=22881;
 8001640:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <main+0x1cc>)
 8001642:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001646:	801a      	strh	r2, [r3, #0]
	  if(sensor_down == 0){
 8001648:	4b49      	ldr	r3, [pc, #292]	@ (8001770 <main+0x1f8>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <main+0xf4>
		  registerFrame[0x00].U16=22881;
 8001650:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <main+0x1cc>)
 8001652:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001656:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	483c      	ldr	r0, [pc, #240]	@ (8001750 <main+0x1d8>)
 800165e:	f003 fca9 	bl	8004fb4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*1.5/10.0);
 8001662:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <main+0x1d4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2295      	movs	r2, #149	@ 0x95
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38
 800166a:	e7d5      	b.n	8001618 <main+0xa0>
	  }
	  else if(sensor_down == 1){
 800166c:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <main+0x1f8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d1d1      	bne.n	8001618 <main+0xa0>
		  registerFrame[0x00].U16=22881;
 8001674:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <main+0x1cc>)
 8001676:	f645 1261 	movw	r2, #22881	@ 0x5961
 800167a:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	4833      	ldr	r0, [pc, #204]	@ (8001750 <main+0x1d8>)
 8001682:	f003 fc97 	bl	8004fb4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <main+0x1d4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COUNTER(&htim4, 0);
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <main+0x1dc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
		  QEIdata.Position[NEW] = 0;
 8001696:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <main+0x1fc>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
		  QEIEncoderPosVel_Update();
 800169c:	f001 fb94 	bl	8002dc8 <QEIEncoderPosVel_Update>
		  angular_position = 0.0;
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <main+0x200>)
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
		  position = 0.0;
 80016a8:	4b34      	ldr	r3, [pc, #208]	@ (800177c <main+0x204>)
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
		  position_round = 0;
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <main+0x208>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
		  z_target_position = 0;
 80016b6:	4b33      	ldr	r3, [pc, #204]	@ (8001784 <main+0x20c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	801a      	strh	r2, [r3, #0]
		  x_target_position = 0;
 80016bc:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <main+0x210>)
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80016c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ca:	f003 fc5b 	bl	8004f84 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <main+0x1f4>)
 80016d4:	701a      	strb	r2, [r3, #0]
	  sensor_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80016d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016de:	f003 fc51 	bl	8004f84 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <main+0x1f8>)
 80016e8:	701a      	strb	r2, [r3, #0]

	  static uint64_t timestamp_QEI = 0;
	  uint64_t currentTime = micros();
 80016ea:	f001 fb51 	bl	8002d90 <micros>
 80016ee:	e9c7 0100 	strd	r0, r1, [r7]
	  if(currentTime > timestamp_QEI)
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <main+0x214>)
 80016f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016fc:	4290      	cmp	r0, r2
 80016fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8001702:	d20a      	bcs.n	800171a <main+0x1a2>
	  {
		  timestamp_QEI = currentTime + 1000;//us
 8001704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001708:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 800170c:	f143 0500 	adc.w	r5, r3, #0
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <main+0x214>)
 8001712:	e9c3 4500 	strd	r4, r5, [r3]
		  QEIEncoderPosVel_Update();
 8001716:	f001 fb57 	bl	8002dc8 <QEIEncoderPosVel_Update>
	  }

	  Modbus_Protocal_Worker();
 800171a:	f7ff fcc5 	bl	80010a8 <Modbus_Protocal_Worker>
//	  registerFrame[0x00].U16=22881;

	  set_shelves();
 800171e:	f000 fc0b 	bl	8001f38 <set_shelves>
	  run_pointmode();
 8001722:	f000 fd91 	bl	8002248 <run_pointmode>
	  set_home();
 8001726:	f000 fe95 	bl	8002454 <set_home>
	  run_jogmode();
 800172a:	f000 ff4d 	bl	80025c8 <run_jogmode>
	  gripper_pushpull();
 800172e:	f000 fbcb 	bl	8001ec8 <gripper_pushpull>
	  vacuum_onoff();
 8001732:	f000 fbaf 	bl	8001e94 <vacuum_onoff>
  {
 8001736:	e7c4      	b.n	80016c2 <main+0x14a>
 8001738:	20000a54 	.word	0x20000a54
 800173c:	20000864 	.word	0x20000864
 8001740:	200006cc 	.word	0x200006cc
 8001744:	20000f2c 	.word	0x20000f2c
 8001748:	20000600 	.word	0x20000600
 800174c:	2000039c 	.word	0x2000039c
 8001750:	48000400 	.word	0x48000400
 8001754:	20000468 	.word	0x20000468
 8001758:	20000534 	.word	0x20000534
 800175c:	200010e4 	.word	0x200010e4
 8001760:	3ef4bc6a 	.word	0x3ef4bc6a
 8001764:	35210fb0 	.word	0x35210fb0
 8001768:	3281b540 	.word	0x3281b540
 800176c:	200010de 	.word	0x200010de
 8001770:	200010df 	.word	0x200010df
 8001774:	20001118 	.word	0x20001118
 8001778:	20001160 	.word	0x20001160
 800177c:	20001158 	.word	0x20001158
 8001780:	20001164 	.word	0x20001164
 8001784:	200010e0 	.word	0x200010e0
 8001788:	200010e2 	.word	0x200010e2
 800178c:	200011a8 	.word	0x200011a8

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	@ 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	2238      	movs	r2, #56	@ 0x38
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f008 fbce 	bl	8009f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f003 fc16 	bl	8004fe4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c2:	2340      	movs	r3, #64	@ 0x40
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c6:	2302      	movs	r3, #2
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017d2:	2355      	movs	r3, #85	@ 0x55
 80017d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fcb0 	bl	800514c <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017f2:	f002 fa8d 	bl	8003d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2303      	movs	r3, #3
 80017fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2104      	movs	r1, #4
 800180e:	4618      	mov	r0, r3
 8001810:	f003 ffae 	bl	8005770 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800181a:	f002 fa79 	bl	8003d10 <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3750      	adds	r7, #80	@ 0x50
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <MX_TIM2_Init+0x94>)
 8001848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800184c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <MX_TIM2_Init+0x94>)
 8001850:	22a9      	movs	r2, #169	@ 0xa9
 8001852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_TIM2_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000;
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <MX_TIM2_Init+0x94>)
 800185c:	4a18      	ldr	r2, [pc, #96]	@ (80018c0 <MX_TIM2_Init+0x98>)
 800185e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <MX_TIM2_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_TIM2_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800186c:	4813      	ldr	r0, [pc, #76]	@ (80018bc <MX_TIM2_Init+0x94>)
 800186e:	f004 fbe9 	bl	8006044 <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001878:	f002 fa4a 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001880:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <MX_TIM2_Init+0x94>)
 800188a:	f005 fb6d 	bl	8006f68 <HAL_TIM_ConfigClockSource>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001894:	f002 fa3c 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_TIM2_Init+0x94>)
 80018a6:	f006 fb45 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018b0:	f002 fa2e 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002d0 	.word	0x200002d0
 80018c0:	00030d40 	.word	0x00030d40

080018c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	@ 0x38
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f6:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <MX_TIM3_Init+0xe8>)
 80018f8:	4a2d      	ldr	r2, [pc, #180]	@ (80019b0 <MX_TIM3_Init+0xec>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80018fc:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <MX_TIM3_Init+0xe8>)
 80018fe:	22a9      	movs	r2, #169	@ 0xa9
 8001900:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <MX_TIM3_Init+0xe8>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001908:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <MX_TIM3_Init+0xe8>)
 800190a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800190e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <MX_TIM3_Init+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001916:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <MX_TIM3_Init+0xe8>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800191c:	4823      	ldr	r0, [pc, #140]	@ (80019ac <MX_TIM3_Init+0xe8>)
 800191e:	f004 fb91 	bl	8006044 <HAL_TIM_Base_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001928:	f002 f9f2 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001936:	4619      	mov	r1, r3
 8001938:	481c      	ldr	r0, [pc, #112]	@ (80019ac <MX_TIM3_Init+0xe8>)
 800193a:	f005 fb15 	bl	8006f68 <HAL_TIM_ConfigClockSource>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001944:	f002 f9e4 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001948:	4818      	ldr	r0, [pc, #96]	@ (80019ac <MX_TIM3_Init+0xe8>)
 800194a:	f004 fcc7 	bl	80062dc <HAL_TIM_PWM_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001954:	f002 f9dc 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_TIM3_Init+0xe8>)
 8001968:	f006 fae4 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001972:	f002 f9cd 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001976:	2360      	movs	r3, #96	@ 0x60
 8001978:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	2204      	movs	r2, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4807      	ldr	r0, [pc, #28]	@ (80019ac <MX_TIM3_Init+0xe8>)
 800198e:	f005 f9d7 	bl	8006d40 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001998:	f002 f9ba 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <MX_TIM3_Init+0xe8>)
 800199e:	f002 faa9 	bl	8003ef4 <HAL_TIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	3738      	adds	r7, #56	@ 0x38
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000039c 	.word	0x2000039c
 80019b0:	40000400 	.word	0x40000400

080019b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	@ 0x30
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2224      	movs	r2, #36	@ 0x24
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f008 fabc 	bl	8009f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <MX_TIM4_Init+0xa8>)
 80019d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63487;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 80019e6:	f24f 72ff 	movw	r2, #63487	@ 0xf7ff
 80019ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019f8:	2303      	movs	r3, #3
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 8001a24:	f004 fed0 	bl	80067c8 <HAL_TIM_Encoder_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a2e:	f002 f96f 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <MX_TIM4_Init+0xa4>)
 8001a40:	f006 fa78 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a4a:	f002 f961 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3730      	adds	r7, #48	@ 0x30
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000468 	.word	0x20000468
 8001a5c:	40000800 	.word	0x40000800

08001a60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <MX_TIM5_Init+0x98>)
 8001a82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001a86:	22a9      	movs	r2, #169	@ 0xa9
 8001a88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001a92:	f04f 32ff 	mov.w	r2, #4294967295
 8001a96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aa4:	4813      	ldr	r0, [pc, #76]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001aa6:	f004 facd 	bl	8006044 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ab0:	f002 f92e 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001ac2:	f005 fa51 	bl	8006f68 <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001acc:	f002 f920 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_TIM5_Init+0x94>)
 8001ade:	f006 fa29 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001ae8:	f002 f912 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000534 	.word	0x20000534
 8001af8:	40000c00 	.word	0x40000c00

08001afc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b0e:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <MX_TIM6_Init+0x6c>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b14:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001b18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b22:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b2e:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b30:	f004 fa88 	bl	8006044 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001b3a:	f002 f8e9 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <MX_TIM6_Init+0x68>)
 8001b4c:	f006 f9f2 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001b56:	f002 f8db 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000600 	.word	0x20000600
 8001b68:	40001000 	.word	0x40001000

08001b6c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <MX_TIM16_Init+0x5c>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b78:	22a9      	movs	r2, #169	@ 0xa9
 8001b7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b84:	f240 4279 	movw	r2, #1145	@ 0x479
 8001b88:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b9c:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001b9e:	f004 fa51 	bl	8006044 <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ba8:	f002 f8b2 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001bac:	2108      	movs	r1, #8
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_TIM16_Init+0x58>)
 8001bb0:	f004 fd14 	bl	80065dc <HAL_TIM_OnePulse_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001bba:	f002 f8a9 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200006cc 	.word	0x200006cc
 8001bc8:	40014400 	.word	0x40014400

08001bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001bd2:	4a23      	ldr	r2, [pc, #140]	@ (8001c60 <MX_USART1_UART_Init+0x94>)
 8001bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001bd8:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c14:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c16:	f006 fa73 	bl	8008100 <HAL_UART_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c20:	f002 f876 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	480d      	ldr	r0, [pc, #52]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c28:	f008 f889 	bl	8009d3e <HAL_UARTEx_SetTxFifoThreshold>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c32:	f002 f86d 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c36:	2100      	movs	r1, #0
 8001c38:	4808      	ldr	r0, [pc, #32]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c3a:	f008 f8be 	bl	8009dba <HAL_UARTEx_SetRxFifoThreshold>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c44:	f002 f864 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <MX_USART1_UART_Init+0x90>)
 8001c4a:	f008 f83f 	bl	8009ccc <HAL_UARTEx_DisableFifoMode>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c54:	f002 f85c 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000798 	.word	0x20000798
 8001c60:	40013800 	.word	0x40013800

08001c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c6a:	4a24      	ldr	r2, [pc, #144]	@ (8001cfc <MX_USART2_UART_Init+0x98>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c70:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb0:	4811      	ldr	r0, [pc, #68]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001cb2:	f006 fa25 	bl	8008100 <HAL_UART_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001cbc:	f002 f828 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001cc4:	f008 f83b 	bl	8009d3e <HAL_UARTEx_SetTxFifoThreshold>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f002 f81f 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001cd6:	f008 f870 	bl	8009dba <HAL_UARTEx_SetRxFifoThreshold>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001ce0:	f002 f816 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MX_USART2_UART_Init+0x94>)
 8001ce6:	f007 fff1 	bl	8009ccc <HAL_UARTEx_DisableFifoMode>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001cf0:	f002 f80e 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000864 	.word	0x20000864
 8001cfc:	40004400 	.word	0x40004400

08001d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <MX_DMA_Init+0x70>)
 8001d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0a:	4a19      	ldr	r2, [pc, #100]	@ (8001d70 <MX_DMA_Init+0x70>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <MX_DMA_Init+0x70>)
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_DMA_Init+0x70>)
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <MX_DMA_Init+0x70>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_DMA_Init+0x70>)
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	200b      	movs	r0, #11
 8001d3c:	f002 fc39 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d40:	200b      	movs	r0, #11
 8001d42:	f002 fc50 	bl	80045e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	200c      	movs	r0, #12
 8001d4c:	f002 fc31 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d50:	200c      	movs	r0, #12
 8001d52:	f002 fc48 	bl	80045e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	200d      	movs	r0, #13
 8001d5c:	f002 fc29 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d60:	200d      	movs	r0, #13
 8001d62:	f002 fc40 	bl	80045e6 <HAL_NVIC_EnableIRQ>

}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	@ 0x28
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d96:	4b3c      	ldr	r3, [pc, #240]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da2:	4b39      	ldr	r3, [pc, #228]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	4a38      	ldr	r2, [pc, #224]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dae:	4b36      	ldr	r3, [pc, #216]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	4a32      	ldr	r2, [pc, #200]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc6:	4b30      	ldr	r3, [pc, #192]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <MX_GPIO_Init+0x114>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001df0:	4826      	ldr	r0, [pc, #152]	@ (8001e8c <MX_GPIO_Init+0x118>)
 8001df2:	f003 f8df 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2120      	movs	r1, #32
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfe:	f003 f8d9 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2140      	movs	r1, #64	@ 0x40
 8001e06:	4822      	ldr	r0, [pc, #136]	@ (8001e90 <MX_GPIO_Init+0x11c>)
 8001e08:	f003 f8d4 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4819      	ldr	r0, [pc, #100]	@ (8001e8c <MX_GPIO_Init+0x118>)
 8001e26:	f002 ff2b 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001e2a:	f240 3303 	movw	r3, #771	@ 0x303
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e42:	f002 ff1d 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e46:	2320      	movs	r3, #32
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e60:	f002 ff0e 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e64:	2340      	movs	r3, #64	@ 0x40
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_GPIO_Init+0x11c>)
 8001e7c:	f002 ff00 	bl	8004c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	@ 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000800 	.word	0x48000800
 8001e90:	48000400 	.word	0x48000400

08001e94 <vacuum_onoff>:

/* USER CODE BEGIN 4 */
void vacuum_onoff(){
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
 if(registerFrame[0x02].U16==0b0000){
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <vacuum_onoff+0x30>)
 8001e9a:	889b      	ldrh	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <vacuum_onoff+0x16>
  registerFrame[0x00].U16=22881;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <vacuum_onoff+0x30>)
 8001ea2:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001ea6:	801a      	strh	r2, [r3, #0]
 }
 else if(registerFrame[0x02].U16==0b0001){
  registerFrame[0x00].U16=22881;
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 }
}
 8001ea8:	e007      	b.n	8001eba <vacuum_onoff+0x26>
 else if(registerFrame[0x02].U16==0b0001){
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <vacuum_onoff+0x30>)
 8001eac:	889b      	ldrh	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d103      	bne.n	8001eba <vacuum_onoff+0x26>
  registerFrame[0x00].U16=22881;
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <vacuum_onoff+0x30>)
 8001eb4:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001eb8:	801a      	strh	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	20000f2c 	.word	0x20000f2c

08001ec8 <gripper_pushpull>:

void gripper_pushpull(){
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
// Reed_out = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
// Reed_in = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 if(registerFrame[0x03].U16==0b0000){  //in
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <gripper_pushpull+0x5c>)
 8001ece:	88db      	ldrh	r3, [r3, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <gripper_pushpull+0x2c>
  registerFrame[0x00].U16=22881;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <gripper_pushpull+0x5c>)
 8001ed6:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001eda:	801a      	strh	r2, [r3, #0]
  if(Reed_in == 0){
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <gripper_pushpull+0x60>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d11a      	bne.n	8001f1a <gripper_pushpull+0x52>
	 registerFrame[0x00].U16=22881;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <gripper_pushpull+0x5c>)
 8001ee6:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001eea:	801a      	strh	r2, [r3, #0]
	 gripper_state = 0;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <gripper_pushpull+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
	 gripper_state = 1;
//	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
//	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
  }
 }
}
 8001ef2:	e012      	b.n	8001f1a <gripper_pushpull+0x52>
 else if(registerFrame[0x03].U16==0b0001){
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <gripper_pushpull+0x5c>)
 8001ef6:	88db      	ldrh	r3, [r3, #6]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10e      	bne.n	8001f1a <gripper_pushpull+0x52>
  registerFrame[0x00].U16=22881;
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <gripper_pushpull+0x5c>)
 8001efe:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001f02:	801a      	strh	r2, [r3, #0]
  if(Reed_out == 0){
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <gripper_pushpull+0x68>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <gripper_pushpull+0x52>
	 registerFrame[0x00].U16=22881;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <gripper_pushpull+0x5c>)
 8001f0e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001f12:	801a      	strh	r2, [r3, #0]
	 gripper_state = 1;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <gripper_pushpull+0x64>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000f2c 	.word	0x20000f2c
 8001f28:	200011a0 	.word	0x200011a0
 8001f2c:	20001198 	.word	0x20001198
 8001f30:	2000119c 	.word	0x2000119c
 8001f34:	00000000 	.word	0x00000000

08001f38 <set_shelves>:

void set_shelves(){
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16=22881;
 8001f3e:	4bae      	ldr	r3, [pc, #696]	@ (80021f8 <set_shelves+0x2c0>)
 8001f40:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001f44:	801a      	strh	r2, [r3, #0]
	if(registerFrame[0x01].U16==0b0001){
 8001f46:	4bac      	ldr	r3, [pc, #688]	@ (80021f8 <set_shelves+0x2c0>)
 8001f48:	885b      	ldrh	r3, [r3, #2]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d133      	bne.n	8001fb6 <set_shelves+0x7e>
		registerFrame[0x01].U16=0b0000;
 8001f4e:	4baa      	ldr	r3, [pc, #680]	@ (80021f8 <set_shelves+0x2c0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b0001; //z-axis Moving Status
 8001f54:	4ba8      	ldr	r3, [pc, #672]	@ (80021f8 <set_shelves+0x2c0>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	841a      	strh	r2, [r3, #32]
		setshelves_mode = 1;
 8001f5a:	4ba8      	ldr	r3, [pc, #672]	@ (80021fc <set_shelves+0x2c4>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
		x_floor[0] = -1;
 8001f60:	4ba7      	ldr	r3, [pc, #668]	@ (8002200 <set_shelves+0x2c8>)
 8001f62:	f04f 32ff 	mov.w	r2, #4294967295
 8001f66:	601a      	str	r2, [r3, #0]
		x_floor[1] = -1;
 8001f68:	4ba5      	ldr	r3, [pc, #660]	@ (8002200 <set_shelves+0x2c8>)
 8001f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6e:	605a      	str	r2, [r3, #4]
		x_floor[2] = -1;
 8001f70:	4ba3      	ldr	r3, [pc, #652]	@ (8002200 <set_shelves+0x2c8>)
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295
 8001f76:	609a      	str	r2, [r3, #8]
		x_floor[3] = -1;
 8001f78:	4ba1      	ldr	r3, [pc, #644]	@ (8002200 <set_shelves+0x2c8>)
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	60da      	str	r2, [r3, #12]
		x_floor[4] = -1;
 8001f80:	4b9f      	ldr	r3, [pc, #636]	@ (8002200 <set_shelves+0x2c8>)
 8001f82:	f04f 32ff 	mov.w	r2, #4294967295
 8001f86:	611a      	str	r2, [r3, #16]
		z_floor[0] = -1;
 8001f88:	4b9e      	ldr	r3, [pc, #632]	@ (8002204 <set_shelves+0x2cc>)
 8001f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8e:	601a      	str	r2, [r3, #0]
		z_floor[1] = -1;
 8001f90:	4b9c      	ldr	r3, [pc, #624]	@ (8002204 <set_shelves+0x2cc>)
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295
 8001f96:	605a      	str	r2, [r3, #4]
		z_floor[2] = -1;
 8001f98:	4b9a      	ldr	r3, [pc, #616]	@ (8002204 <set_shelves+0x2cc>)
 8001f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9e:	609a      	str	r2, [r3, #8]
		z_floor[3] = -1;
 8001fa0:	4b98      	ldr	r3, [pc, #608]	@ (8002204 <set_shelves+0x2cc>)
 8001fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa6:	60da      	str	r2, [r3, #12]
		z_floor[4] = -1;
 8001fa8:	4b96      	ldr	r3, [pc, #600]	@ (8002204 <set_shelves+0x2cc>)
 8001faa:	f04f 32ff 	mov.w	r2, #4294967295
 8001fae:	611a      	str	r2, [r3, #16]
		z_status = 1;
 8001fb0:	4b95      	ldr	r3, [pc, #596]	@ (8002208 <set_shelves+0x2d0>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	801a      	strh	r2, [r3, #0]
	}
	if(setshelves_mode == 1){
 8001fb6:	4b91      	ldr	r3, [pc, #580]	@ (80021fc <set_shelves+0x2c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	f040 813d 	bne.w	800223a <set_shelves+0x302>
		//Call every 0.1 s
		registerFrame[0x00].U16=22881;
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80021f8 <set_shelves+0x2c0>)
 8001fc2:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001fc6:	801a      	strh	r2, [r3, #0]
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001fc8:	f000 fee2 	bl	8002d90 <micros>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(currentTime > timestamp)
 8001fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd8:	498c      	ldr	r1, [pc, #560]	@ (800220c <set_shelves+0x2d4>)
 8001fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	eb71 0303 	sbcs.w	r3, r1, r3
 8001fe4:	d20c      	bcs.n	8002000 <set_shelves+0xc8>
		{
			timestamp =currentTime + 100000;//us
 8001fe6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fea:	4989      	ldr	r1, [pc, #548]	@ (8002210 <set_shelves+0x2d8>)
 8001fec:	1854      	adds	r4, r2, r1
 8001fee:	f143 0500 	adc.w	r5, r3, #0
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	4985      	ldr	r1, [pc, #532]	@ (800220c <set_shelves+0x2d4>)
 8001ff8:	e9c1 2300 	strd	r2, r3, [r1]
			QEIEncoderPosVel_Update();
 8001ffc:	f000 fee4 	bl	8002dc8 <QEIEncoderPosVel_Update>
		}
		update_position();
 8002000:	f000 fdde 	bl	8002bc0 <update_position>
		setposition = z_target_position;
 8002004:	4b83      	ldr	r3, [pc, #524]	@ (8002214 <set_shelves+0x2dc>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002010:	4b81      	ldr	r3, [pc, #516]	@ (8002218 <set_shelves+0x2e0>)
 8002012:	edc3 7a00 	vstr	s15, [r3]
		Error = setposition - position;
 8002016:	4b80      	ldr	r3, [pc, #512]	@ (8002218 <set_shelves+0x2e0>)
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	4b7f      	ldr	r3, [pc, #508]	@ (800221c <set_shelves+0x2e4>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002026:	4b7e      	ldr	r3, [pc, #504]	@ (8002220 <set_shelves+0x2e8>)
 8002028:	edc3 7a00 	vstr	s15, [r3]
		Vfeedback = arm_pid_f32(&PID, Error);
 800202c:	4b7c      	ldr	r3, [pc, #496]	@ (8002220 <set_shelves+0x2e8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7c      	ldr	r2, [pc, #496]	@ (8002224 <set_shelves+0x2ec>)
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002040:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 6a01 	vldr	s13, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002054:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	edd3 6a02 	vldr	s13, [r3, #8]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	edd3 7a04 	vldr	s15, [r3, #16]
 8002064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002076:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a65      	ldr	r2, [pc, #404]	@ (8002228 <set_shelves+0x2f0>)
 8002092:	6013      	str	r3, [r2, #0]
		if (fabsf(Error) <= 0.1){
 8002094:	4b62      	ldr	r3, [pc, #392]	@ (8002220 <set_shelves+0x2e8>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eef0 7ae7 	vabs.f32	s15, s15
 800209e:	ee17 0a90 	vmov	r0, s15
 80020a2:	f7fe fa1d 	bl	80004e0 <__aeabi_f2d>
 80020a6:	a350      	add	r3, pc, #320	@ (adr r3, 80021e8 <set_shelves+0x2b0>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe fcec 	bl	8000a88 <__aeabi_dcmple>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <set_shelves+0x186>
			Vfeedback = 0;
 80020b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002228 <set_shelves+0x2f0>)
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback <= 4.3 && Vfeedback > 0){
 80020be:	4b5a      	ldr	r3, [pc, #360]	@ (8002228 <set_shelves+0x2f0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa0c 	bl	80004e0 <__aeabi_f2d>
 80020c8:	a349      	add	r3, pc, #292	@ (adr r3, 80021f0 <set_shelves+0x2b8>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fcdb 	bl	8000a88 <__aeabi_dcmple>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <set_shelves+0x1b6>
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <set_shelves+0x2f0>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	dd02      	ble.n	80020ee <set_shelves+0x1b6>
			Vfeedback = 4.3;
 80020e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <set_shelves+0x2f0>)
 80020ea:	4a50      	ldr	r2, [pc, #320]	@ (800222c <set_shelves+0x2f4>)
 80020ec:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback >= -1.75 && Vfeedback < 0){
 80020ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002228 <set_shelves+0x2f0>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eebf 7a0c 	vmov.f32	s14, #252	@ 0xbfe00000 -1.750
 80020f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	db0a      	blt.n	8002118 <set_shelves+0x1e0>
 8002102:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <set_shelves+0x2f0>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	d502      	bpl.n	8002118 <set_shelves+0x1e0>
			Vfeedback = -1.78;
 8002112:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <set_shelves+0x2f0>)
 8002114:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <set_shelves+0x2f8>)
 8002116:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback >= 24){
 8002118:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <set_shelves+0x2f0>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	db02      	blt.n	8002132 <set_shelves+0x1fa>
			Vfeedback = 24;
 800212c:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <set_shelves+0x2f0>)
 800212e:	4a41      	ldr	r2, [pc, #260]	@ (8002234 <set_shelves+0x2fc>)
 8002130:	601a      	str	r2, [r3, #0]
		}
		setMotor();
 8002132:	f000 fc95 	bl	8002a60 <setMotor>
		if(z_floor[0] != -1 && z_floor[1] != -1 && z_floor[2] != -1 && z_floor[3] != -1 && z_floor[4] != -1){
 8002136:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <set_shelves+0x2cc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d07c      	beq.n	800223a <set_shelves+0x302>
 8002140:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <set_shelves+0x2cc>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d077      	beq.n	800223a <set_shelves+0x302>
 800214a:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <set_shelves+0x2cc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d072      	beq.n	800223a <set_shelves+0x302>
 8002154:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <set_shelves+0x2cc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d06d      	beq.n	800223a <set_shelves+0x302>
 800215e:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <set_shelves+0x2cc>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002166:	d068      	beq.n	800223a <set_shelves+0x302>
			registerFrame[0x23].U16 = z_floor[0]*10;
 8002168:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <set_shelves+0x2cc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <set_shelves+0x2c0>)
 800217a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			registerFrame[0x24].U16 = z_floor[1]*10;
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <set_shelves+0x2cc>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <set_shelves+0x2c0>)
 8002190:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			registerFrame[0x25].U16 = z_floor[2]*10;
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <set_shelves+0x2cc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	b29b      	uxth	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <set_shelves+0x2c0>)
 80021a6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			registerFrame[0x26].U16 = z_floor[3]*10;
 80021aa:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <set_shelves+0x2cc>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <set_shelves+0x2c0>)
 80021bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			registerFrame[0x27].U16 = z_floor[4]*10;
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <set_shelves+0x2cc>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <set_shelves+0x2c0>)
 80021d2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			setshelves_mode = 0;
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <set_shelves+0x2c4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
			z_status = 0;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <set_shelves+0x2d0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	801a      	strh	r2, [r3, #0]
			registerFrame[0x10].U16=0b0000;
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <set_shelves+0x2c0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	e027      	b.n	8002238 <set_shelves+0x300>
 80021e8:	9999999a 	.word	0x9999999a
 80021ec:	3fb99999 	.word	0x3fb99999
 80021f0:	33333333 	.word	0x33333333
 80021f4:	40113333 	.word	0x40113333
 80021f8:	20000f2c 	.word	0x20000f2c
 80021fc:	200010c4 	.word	0x200010c4
 8002200:	20000200 	.word	0x20000200
 8002204:	20000214 	.word	0x20000214
 8002208:	2000114c 	.word	0x2000114c
 800220c:	200011b0 	.word	0x200011b0
 8002210:	000186a0 	.word	0x000186a0
 8002214:	200010e0 	.word	0x200010e0
 8002218:	20001108 	.word	0x20001108
 800221c:	20001158 	.word	0x20001158
 8002220:	20001110 	.word	0x20001110
 8002224:	200010e4 	.word	0x200010e4
 8002228:	2000110c 	.word	0x2000110c
 800222c:	4089999a 	.word	0x4089999a
 8002230:	bfe3d70a 	.word	0xbfe3d70a
 8002234:	41c00000 	.word	0x41c00000
 8002238:	841a      	strh	r2, [r3, #32]
		}
	}
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bdb0      	pop	{r4, r5, r7, pc}
 8002242:	bf00      	nop
 8002244:	0000      	movs	r0, r0
	...

08002248 <run_pointmode>:

void run_pointmode(){
 8002248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16==0b1000){
 8002250:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <run_pointmode+0x1d8>)
 8002252:	885b      	ldrh	r3, [r3, #2]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d11f      	bne.n	8002298 <run_pointmode+0x50>
		registerFrame[0x01].U16=0b0000;
 8002258:	4b71      	ldr	r3, [pc, #452]	@ (8002420 <run_pointmode+0x1d8>)
 800225a:	2200      	movs	r2, #0
 800225c:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b00010000; //Go point
 800225e:	4b70      	ldr	r3, [pc, #448]	@ (8002420 <run_pointmode+0x1d8>)
 8002260:	2210      	movs	r2, #16
 8002262:	841a      	strh	r2, [r3, #32]
		setposition = (registerFrame[0x30].U16)/10.0;
 8002264:	4b6e      	ldr	r3, [pc, #440]	@ (8002420 <run_pointmode+0x1d8>)
 8002266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f926 	bl	80004bc <__aeabi_i2d>
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b6b      	ldr	r3, [pc, #428]	@ (8002424 <run_pointmode+0x1dc>)
 8002276:	f7fe fab5 	bl	80007e4 <__aeabi_ddiv>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f7fe fc7d 	bl	8000b80 <__aeabi_d2f>
 8002286:	4603      	mov	r3, r0
 8002288:	4a67      	ldr	r2, [pc, #412]	@ (8002428 <run_pointmode+0x1e0>)
 800228a:	6013      	str	r3, [r2, #0]
		z_status = 16;
 800228c:	4b67      	ldr	r3, [pc, #412]	@ (800242c <run_pointmode+0x1e4>)
 800228e:	2210      	movs	r2, #16
 8002290:	801a      	strh	r2, [r3, #0]
		point_mode = 1;
 8002292:	4b67      	ldr	r3, [pc, #412]	@ (8002430 <run_pointmode+0x1e8>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
	}
	if(point_mode == 1){
 8002298:	4b65      	ldr	r3, [pc, #404]	@ (8002430 <run_pointmode+0x1e8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 80af 	bne.w	8002400 <run_pointmode+0x1b8>
		if(fabsf(setposition-position) > 1 || trajec_state == 1 ){
 80022a2:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <run_pointmode+0x1e0>)
 80022a4:	ed93 7a00 	vldr	s14, [r3]
 80022a8:	4b62      	ldr	r3, [pc, #392]	@ (8002434 <run_pointmode+0x1ec>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b2:	eef0 7ae7 	vabs.f32	s15, s15
 80022b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	dc03      	bgt.n	80022cc <run_pointmode+0x84>
 80022c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <run_pointmode+0x1f0>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d139      	bne.n	8002340 <run_pointmode+0xf8>
			trajectory();
 80022cc:	f000 fee0 	bl	8003090 <trajectory>
			static uint64_t timestamp_velocity_PID = 0;
			uint64_t currentTime = micros();
 80022d0:	f000 fd5e 	bl	8002d90 <micros>
 80022d4:	e9c7 0100 	strd	r0, r1, [r7]
			if(currentTime > timestamp_velocity_PID)
 80022d8:	4b58      	ldr	r3, [pc, #352]	@ (800243c <run_pointmode+0x1f4>)
 80022da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e2:	4290      	cmp	r0, r2
 80022e4:	eb71 0303 	sbcs.w	r3, r1, r3
 80022e8:	d210      	bcs.n	800230c <run_pointmode+0xc4>
			{
				timestamp_velocity_PID = currentTime + 1000;//us
 80022ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ee:	f512 787a 	adds.w	r8, r2, #1000	@ 0x3e8
 80022f2:	f143 0900 	adc.w	r9, r3, #0
 80022f6:	4b51      	ldr	r3, [pc, #324]	@ (800243c <run_pointmode+0x1f4>)
 80022f8:	e9c3 8900 	strd	r8, r9, [r3]
				velocity_PID();
 80022fc:	f001 fb7c 	bl	80039f8 <velocity_PID>
				Vfeedback = velocity_PID_output;
 8002300:	4b4f      	ldr	r3, [pc, #316]	@ (8002440 <run_pointmode+0x1f8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a4f      	ldr	r2, [pc, #316]	@ (8002444 <run_pointmode+0x1fc>)
 8002306:	6013      	str	r3, [r2, #0]
				setMotor();
 8002308:	f000 fbaa 	bl	8002a60 <setMotor>
			}

			static uint64_t timestamp_position_PID = 0;
			currentTime = micros();
 800230c:	f000 fd40 	bl	8002d90 <micros>
 8002310:	e9c7 0100 	strd	r0, r1, [r7]
			if(currentTime > timestamp_position_PID)
 8002314:	4b4c      	ldr	r3, [pc, #304]	@ (8002448 <run_pointmode+0x200>)
 8002316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800231e:	4290      	cmp	r0, r2
 8002320:	eb71 0303 	sbcs.w	r3, r1, r3
 8002324:	d26b      	bcs.n	80023fe <run_pointmode+0x1b6>
			{
				timestamp_position_PID = currentTime + 5000;//us
 8002326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800232a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800232e:	1854      	adds	r4, r2, r1
 8002330:	f143 0500 	adc.w	r5, r3, #0
 8002334:	4b44      	ldr	r3, [pc, #272]	@ (8002448 <run_pointmode+0x200>)
 8002336:	e9c3 4500 	strd	r4, r5, [r3]
				position_PID();
 800233a:	f001 fc27 	bl	8003b8c <position_PID>
		if(fabsf(setposition-position) > 1 || trajec_state == 1 ){
 800233e:	e05e      	b.n	80023fe <run_pointmode+0x1b6>
			}
		}
		else if((setposition-position) >= 0.01){
 8002340:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <run_pointmode+0x1e0>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	4b3b      	ldr	r3, [pc, #236]	@ (8002434 <run_pointmode+0x1ec>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002350:	ee17 0a90 	vmov	r0, s15
 8002354:	f7fe f8c4 	bl	80004e0 <__aeabi_f2d>
 8002358:	a32d      	add	r3, pc, #180	@ (adr r3, 8002410 <run_pointmode+0x1c8>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe fb9d 	bl	8000a9c <__aeabi_dcmpge>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <run_pointmode+0x12c>
			Vfeedback = 3;
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <run_pointmode+0x1fc>)
 800236a:	4a38      	ldr	r2, [pc, #224]	@ (800244c <run_pointmode+0x204>)
 800236c:	601a      	str	r2, [r3, #0]
			setMotor();
 800236e:	f000 fb77 	bl	8002a60 <setMotor>
			registerFrame[0x10].U16=0b0000;
			z_status = 0;
			point_mode = 0;
		}
	}
}
 8002372:	e045      	b.n	8002400 <run_pointmode+0x1b8>
		else if((setposition-position) <= -0.01){
 8002374:	4b2c      	ldr	r3, [pc, #176]	@ (8002428 <run_pointmode+0x1e0>)
 8002376:	ed93 7a00 	vldr	s14, [r3]
 800237a:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <run_pointmode+0x1ec>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002384:	ee17 0a90 	vmov	r0, s15
 8002388:	f7fe f8aa 	bl	80004e0 <__aeabi_f2d>
 800238c:	a322      	add	r3, pc, #136	@ (adr r3, 8002418 <run_pointmode+0x1d0>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe fb79 	bl	8000a88 <__aeabi_dcmple>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <run_pointmode+0x160>
			Vfeedback = -2.5;
 800239c:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <run_pointmode+0x1fc>)
 800239e:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <run_pointmode+0x208>)
 80023a0:	601a      	str	r2, [r3, #0]
			setMotor();
 80023a2:	f000 fb5d 	bl	8002a60 <setMotor>
}
 80023a6:	e02b      	b.n	8002400 <run_pointmode+0x1b8>
		else if(fabsf(setposition-position) < 0.01){
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <run_pointmode+0x1e0>)
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <run_pointmode+0x1ec>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b8:	eef0 7ae7 	vabs.f32	s15, s15
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f88e 	bl	80004e0 <__aeabi_f2d>
 80023c4:	a312      	add	r3, pc, #72	@ (adr r3, 8002410 <run_pointmode+0x1c8>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fb53 	bl	8000a74 <__aeabi_dcmplt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d100      	bne.n	80023d6 <run_pointmode+0x18e>
}
 80023d4:	e014      	b.n	8002400 <run_pointmode+0x1b8>
			velocity_PID_output = 0;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <run_pointmode+0x1f8>)
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
			Vfeedback = 0;
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <run_pointmode+0x1fc>)
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
			setMotor();
 80023e6:	f000 fb3b 	bl	8002a60 <setMotor>
			registerFrame[0x10].U16=0b0000;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <run_pointmode+0x1d8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	841a      	strh	r2, [r3, #32]
			z_status = 0;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <run_pointmode+0x1e4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]
			point_mode = 0;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <run_pointmode+0x1e8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	e000      	b.n	8002400 <run_pointmode+0x1b8>
		if(fabsf(setposition-position) > 1 || trajec_state == 1 ){
 80023fe:	bf00      	nop
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800240a:	bf00      	nop
 800240c:	f3af 8000 	nop.w
 8002410:	47ae147b 	.word	0x47ae147b
 8002414:	3f847ae1 	.word	0x3f847ae1
 8002418:	47ae147b 	.word	0x47ae147b
 800241c:	bf847ae1 	.word	0xbf847ae1
 8002420:	20000f2c 	.word	0x20000f2c
 8002424:	40240000 	.word	0x40240000
 8002428:	20001108 	.word	0x20001108
 800242c:	2000114c 	.word	0x2000114c
 8002430:	200010c0 	.word	0x200010c0
 8002434:	20001158 	.word	0x20001158
 8002438:	2000117c 	.word	0x2000117c
 800243c:	200011b8 	.word	0x200011b8
 8002440:	20001194 	.word	0x20001194
 8002444:	2000110c 	.word	0x2000110c
 8002448:	200011c0 	.word	0x200011c0
 800244c:	40400000 	.word	0x40400000
 8002450:	c0200000 	.word	0xc0200000

08002454 <set_home>:

void set_home(){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	static uint8_t step = 0;
	if(registerFrame[0x01].U16==0b0010){
 8002458:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <set_home+0x140>)
 800245a:	885b      	ldrh	r3, [r3, #2]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d11b      	bne.n	8002498 <set_home+0x44>
		registerFrame[0x01].U16=0b0000;
 8002460:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <set_home+0x140>)
 8002462:	2200      	movs	r2, #0
 8002464:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b0010;
 8002466:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <set_home+0x140>)
 8002468:	2202      	movs	r2, #2
 800246a:	841a      	strh	r2, [r3, #32]
		home = 1;
 800246c:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <set_home+0x144>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
		z_status = 2;
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <set_home+0x148>)
 8002474:	2202      	movs	r2, #2
 8002476:	801a      	strh	r2, [r3, #0]
		step = 0;
 8002478:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <set_home+0x14c>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
		if(sensor_down == 1){
 800247e:	4b49      	ldr	r3, [pc, #292]	@ (80025a4 <set_home+0x150>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <set_home+0x44>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2140      	movs	r1, #64	@ 0x40
 800248a:	4847      	ldr	r0, [pc, #284]	@ (80025a8 <set_home+0x154>)
 800248c:	f002 fd92 	bl	8004fb4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*1.5/10.0);
 8002490:	4b46      	ldr	r3, [pc, #280]	@ (80025ac <set_home+0x158>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2295      	movs	r2, #149	@ 0x95
 8002496:	639a      	str	r2, [r3, #56]	@ 0x38
		}

	}
	if(home == 1){
 8002498:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <set_home+0x144>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d176      	bne.n	800258e <set_home+0x13a>
		registerFrame[0x00].U16=22881;
 80024a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <set_home+0x140>)
 80024a2:	f645 1261 	movw	r2, #22881	@ 0x5961
 80024a6:	801a      	strh	r2, [r3, #0]
		sensor_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80024a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b0:	f002 fd68 	bl	8004f84 <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b3d      	ldr	r3, [pc, #244]	@ (80025b0 <set_home+0x15c>)
 80024ba:	701a      	strb	r2, [r3, #0]
		sensor_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80024bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024c4:	f002 fd5e 	bl	8004f84 <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b35      	ldr	r3, [pc, #212]	@ (80025a4 <set_home+0x150>)
 80024ce:	701a      	strb	r2, [r3, #0]

		if(step == 0){
 80024d0:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <set_home+0x14c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d11e      	bne.n	8002516 <set_home+0xc2>
			if(sensor_up == 0){
 80024d8:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <set_home+0x15c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <set_home+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2140      	movs	r1, #64	@ 0x40
 80024e4:	4830      	ldr	r0, [pc, #192]	@ (80025a8 <set_home+0x154>)
 80024e6:	f002 fd65 	bl	8004fb4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*3/10.0);
 80024ea:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <set_home+0x158>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f240 122b 	movw	r2, #299	@ 0x12b
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80024f4:	e00f      	b.n	8002516 <set_home+0xc2>
			}
			else if(sensor_up == 1){
 80024f6:	4b2e      	ldr	r3, [pc, #184]	@ (80025b0 <set_home+0x15c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10b      	bne.n	8002516 <set_home+0xc2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80024fe:	2201      	movs	r2, #1
 8002500:	2140      	movs	r1, #64	@ 0x40
 8002502:	4829      	ldr	r0, [pc, #164]	@ (80025a8 <set_home+0x154>)
 8002504:	f002 fd56 	bl	8004fb4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002508:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <set_home+0x158>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	639a      	str	r2, [r3, #56]	@ 0x38
				step = 1;
 8002510:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <set_home+0x14c>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
			}
		}
		if(step == 1){
 8002516:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <set_home+0x14c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d137      	bne.n	800258e <set_home+0x13a>
			if(sensor_down == 0){
 800251e:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <set_home+0x150>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <set_home+0xe6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002526:	2201      	movs	r2, #1
 8002528:	2140      	movs	r1, #64	@ 0x40
 800252a:	481f      	ldr	r0, [pc, #124]	@ (80025a8 <set_home+0x154>)
 800252c:	f002 fd42 	bl	8004fb4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*1.5/10.0);
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <set_home+0x158>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2295      	movs	r2, #149	@ 0x95
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
				z_status = 0;
				home = 0;
			}
		}
	}
}
 8002538:	e029      	b.n	800258e <set_home+0x13a>
			else if(sensor_down == 1){
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <set_home+0x150>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d125      	bne.n	800258e <set_home+0x13a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2140      	movs	r1, #64	@ 0x40
 8002546:	4818      	ldr	r0, [pc, #96]	@ (80025a8 <set_home+0x154>)
 8002548:	f002 fd34 	bl	8004fb4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800254c:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <set_home+0x158>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002554:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <set_home+0x160>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24
				QEIdata.Position[NEW] = 0;
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <set_home+0x164>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
				QEIEncoderPosVel_Update();
 8002562:	f000 fc31 	bl	8002dc8 <QEIEncoderPosVel_Update>
				angular_position = 0.0;
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <set_home+0x168>)
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
				position = 0.0;
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <set_home+0x16c>)
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
				position_round = 0;
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <set_home+0x170>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16=0b0000;
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <set_home+0x140>)
 800257e:	2200      	movs	r2, #0
 8002580:	841a      	strh	r2, [r3, #32]
				z_status = 0;
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <set_home+0x148>)
 8002584:	2200      	movs	r2, #0
 8002586:	801a      	strh	r2, [r3, #0]
				home = 0;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <set_home+0x144>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000f2c 	.word	0x20000f2c
 8002598:	200010bc 	.word	0x200010bc
 800259c:	2000114c 	.word	0x2000114c
 80025a0:	200011c8 	.word	0x200011c8
 80025a4:	200010df 	.word	0x200010df
 80025a8:	48000400 	.word	0x48000400
 80025ac:	2000039c 	.word	0x2000039c
 80025b0:	200010de 	.word	0x200010de
 80025b4:	20000468 	.word	0x20000468
 80025b8:	20001118 	.word	0x20001118
 80025bc:	20001160 	.word	0x20001160
 80025c0:	20001158 	.word	0x20001158
 80025c4:	20001164 	.word	0x20001164

080025c8 <run_jogmode>:

void run_jogmode(){
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
	static int floor_counter = 0;
	static uint8_t floor_end = 0;
	if(registerFrame[0x01].U16==0b0100){
 80025d0:	4bb7      	ldr	r3, [pc, #732]	@ (80028b0 <run_jogmode+0x2e8>)
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d111      	bne.n	80025fc <run_jogmode+0x34>
		registerFrame[0x01].U16=0b0000;
 80025d8:	4bb5      	ldr	r3, [pc, #724]	@ (80028b0 <run_jogmode+0x2e8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	805a      	strh	r2, [r3, #2]
		jog_mode = 1;
 80025de:	4bb5      	ldr	r3, [pc, #724]	@ (80028b4 <run_jogmode+0x2ec>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
		pick_order = registerFrame[0x21].U16;
 80025e4:	4bb2      	ldr	r3, [pc, #712]	@ (80028b0 <run_jogmode+0x2e8>)
 80025e6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80025ea:	461a      	mov	r2, r3
 80025ec:	4bb2      	ldr	r3, [pc, #712]	@ (80028b8 <run_jogmode+0x2f0>)
 80025ee:	601a      	str	r2, [r3, #0]
		place_order = registerFrame[0x22].U16;
 80025f0:	4baf      	ldr	r3, [pc, #700]	@ (80028b0 <run_jogmode+0x2e8>)
 80025f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025f6:	461a      	mov	r2, r3
 80025f8:	4bb0      	ldr	r3, [pc, #704]	@ (80028bc <run_jogmode+0x2f4>)
 80025fa:	601a      	str	r2, [r3, #0]
	}
	if(jog_mode == 1){
 80025fc:	4bad      	ldr	r3, [pc, #692]	@ (80028b4 <run_jogmode+0x2ec>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 8204 	bne.w	8002a0e <run_jogmode+0x446>
		if(floor_counter%2 == 0){
 8002606:	4bae      	ldr	r3, [pc, #696]	@ (80028c0 <run_jogmode+0x2f8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d132      	bne.n	8002678 <run_jogmode+0xb0>
			registerFrame[0x10].U16=0b0100;//Go Pick
 8002612:	4ba7      	ldr	r3, [pc, #668]	@ (80028b0 <run_jogmode+0x2e8>)
 8002614:	2204      	movs	r2, #4
 8002616:	841a      	strh	r2, [r3, #32]
			z_status = 4;
 8002618:	4baa      	ldr	r3, [pc, #680]	@ (80028c4 <run_jogmode+0x2fc>)
 800261a:	2204      	movs	r2, #4
 800261c:	801a      	strh	r2, [r3, #0]
			gotofloor = (pick_order/(10000/(int)pow(10,(floor_counter/2))))%10;
 800261e:	4ba6      	ldr	r3, [pc, #664]	@ (80028b8 <run_jogmode+0x2f0>)
 8002620:	681e      	ldr	r6, [r3, #0]
 8002622:	4ba7      	ldr	r3, [pc, #668]	@ (80028c0 <run_jogmode+0x2f8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0fda      	lsrs	r2, r3, #31
 8002628:	4413      	add	r3, r2
 800262a:	105b      	asrs	r3, r3, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff45 	bl	80004bc <__aeabi_i2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	ec43 2b11 	vmov	d1, r2, r3
 800263a:	ed9f 0b99 	vldr	d0, [pc, #612]	@ 80028a0 <run_jogmode+0x2d8>
 800263e:	f007 fcbf 	bl	8009fc0 <pow>
 8002642:	ec53 2b10 	vmov	r2, r3, d0
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f7fe fa51 	bl	8000af0 <__aeabi_d2iz>
 800264e:	4603      	mov	r3, r0
 8002650:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002654:	fb92 f3f3 	sdiv	r3, r2, r3
 8002658:	fb96 f1f3 	sdiv	r1, r6, r3
 800265c:	4b9a      	ldr	r3, [pc, #616]	@ (80028c8 <run_jogmode+0x300>)
 800265e:	fb83 2301 	smull	r2, r3, r3, r1
 8002662:	109a      	asrs	r2, r3, #2
 8002664:	17cb      	asrs	r3, r1, #31
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	1aca      	subs	r2, r1, r3
 8002672:	4b96      	ldr	r3, [pc, #600]	@ (80028cc <run_jogmode+0x304>)
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e031      	b.n	80026dc <run_jogmode+0x114>
		}
		else{
			registerFrame[0x10].U16=0b1000;//Go place
 8002678:	4b8d      	ldr	r3, [pc, #564]	@ (80028b0 <run_jogmode+0x2e8>)
 800267a:	2208      	movs	r2, #8
 800267c:	841a      	strh	r2, [r3, #32]
			z_status = 8;
 800267e:	4b91      	ldr	r3, [pc, #580]	@ (80028c4 <run_jogmode+0x2fc>)
 8002680:	2208      	movs	r2, #8
 8002682:	801a      	strh	r2, [r3, #0]
			gotofloor = (place_order/(10000/(int)pow(10,(floor_counter/2))))%10;
 8002684:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <run_jogmode+0x2f4>)
 8002686:	681e      	ldr	r6, [r3, #0]
 8002688:	4b8d      	ldr	r3, [pc, #564]	@ (80028c0 <run_jogmode+0x2f8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0fda      	lsrs	r2, r3, #31
 800268e:	4413      	add	r3, r2
 8002690:	105b      	asrs	r3, r3, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff12 	bl	80004bc <__aeabi_i2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	ec43 2b11 	vmov	d1, r2, r3
 80026a0:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 80028a0 <run_jogmode+0x2d8>
 80026a4:	f007 fc8c 	bl	8009fc0 <pow>
 80026a8:	ec53 2b10 	vmov	r2, r3, d0
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7fe fa1e 	bl	8000af0 <__aeabi_d2iz>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80026ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80026be:	fb96 f1f3 	sdiv	r1, r6, r3
 80026c2:	4b81      	ldr	r3, [pc, #516]	@ (80028c8 <run_jogmode+0x300>)
 80026c4:	fb83 2301 	smull	r2, r3, r3, r1
 80026c8:	109a      	asrs	r2, r3, #2
 80026ca:	17cb      	asrs	r3, r1, #31
 80026cc:	1ad2      	subs	r2, r2, r3
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	1aca      	subs	r2, r1, r3
 80026d8:	4b7c      	ldr	r3, [pc, #496]	@ (80028cc <run_jogmode+0x304>)
 80026da:	601a      	str	r2, [r3, #0]
		}
		if (gotofloor == 1){
 80026dc:	4b7b      	ldr	r3, [pc, #492]	@ (80028cc <run_jogmode+0x304>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d112      	bne.n	800270a <run_jogmode+0x142>
			setposition = z_floor[0];
 80026e4:	4b7a      	ldr	r3, [pc, #488]	@ (80028d0 <run_jogmode+0x308>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f0:	4b78      	ldr	r3, [pc, #480]	@ (80028d4 <run_jogmode+0x30c>)
 80026f2:	edc3 7a00 	vstr	s15, [r3]
			x_position = x_floor[0];
 80026f6:	4b78      	ldr	r3, [pc, #480]	@ (80028d8 <run_jogmode+0x310>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002702:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <run_jogmode+0x314>)
 8002704:	edc3 7a00 	vstr	s15, [r3]
 8002708:	e05a      	b.n	80027c0 <run_jogmode+0x1f8>
		}
		else if (gotofloor == 2){
 800270a:	4b70      	ldr	r3, [pc, #448]	@ (80028cc <run_jogmode+0x304>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d112      	bne.n	8002738 <run_jogmode+0x170>
			setposition = z_floor[1];
 8002712:	4b6f      	ldr	r3, [pc, #444]	@ (80028d0 <run_jogmode+0x308>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271e:	4b6d      	ldr	r3, [pc, #436]	@ (80028d4 <run_jogmode+0x30c>)
 8002720:	edc3 7a00 	vstr	s15, [r3]
			x_position = x_floor[1];
 8002724:	4b6c      	ldr	r3, [pc, #432]	@ (80028d8 <run_jogmode+0x310>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <run_jogmode+0x314>)
 8002732:	edc3 7a00 	vstr	s15, [r3]
 8002736:	e043      	b.n	80027c0 <run_jogmode+0x1f8>
		}
		else if (gotofloor == 3){
 8002738:	4b64      	ldr	r3, [pc, #400]	@ (80028cc <run_jogmode+0x304>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d112      	bne.n	8002766 <run_jogmode+0x19e>
			setposition = z_floor[2];
 8002740:	4b63      	ldr	r3, [pc, #396]	@ (80028d0 <run_jogmode+0x308>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274c:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <run_jogmode+0x30c>)
 800274e:	edc3 7a00 	vstr	s15, [r3]
			x_position = x_floor[2];
 8002752:	4b61      	ldr	r3, [pc, #388]	@ (80028d8 <run_jogmode+0x310>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275e:	4b5f      	ldr	r3, [pc, #380]	@ (80028dc <run_jogmode+0x314>)
 8002760:	edc3 7a00 	vstr	s15, [r3]
 8002764:	e02c      	b.n	80027c0 <run_jogmode+0x1f8>
		}
		else if (gotofloor == 4){
 8002766:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <run_jogmode+0x304>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b04      	cmp	r3, #4
 800276c:	d112      	bne.n	8002794 <run_jogmode+0x1cc>
			setposition = z_floor[3];
 800276e:	4b58      	ldr	r3, [pc, #352]	@ (80028d0 <run_jogmode+0x308>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	4b56      	ldr	r3, [pc, #344]	@ (80028d4 <run_jogmode+0x30c>)
 800277c:	edc3 7a00 	vstr	s15, [r3]
			x_position = x_floor[3];
 8002780:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <run_jogmode+0x310>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278c:	4b53      	ldr	r3, [pc, #332]	@ (80028dc <run_jogmode+0x314>)
 800278e:	edc3 7a00 	vstr	s15, [r3]
 8002792:	e015      	b.n	80027c0 <run_jogmode+0x1f8>
		}
		else if (gotofloor == 5){
 8002794:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <run_jogmode+0x304>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d111      	bne.n	80027c0 <run_jogmode+0x1f8>
			setposition = z_floor[4];
 800279c:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <run_jogmode+0x308>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a8:	4b4a      	ldr	r3, [pc, #296]	@ (80028d4 <run_jogmode+0x30c>)
 80027aa:	edc3 7a00 	vstr	s15, [r3]
			x_position = x_floor[4];
 80027ae:	4b4a      	ldr	r3, [pc, #296]	@ (80028d8 <run_jogmode+0x310>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ba:	4b48      	ldr	r3, [pc, #288]	@ (80028dc <run_jogmode+0x314>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
		}

		if(fabsf(setposition-position) > 1 || trajec_state == 1 ){
 80027c0:	4b44      	ldr	r3, [pc, #272]	@ (80028d4 <run_jogmode+0x30c>)
 80027c2:	ed93 7a00 	vldr	s14, [r3]
 80027c6:	4b46      	ldr	r3, [pc, #280]	@ (80028e0 <run_jogmode+0x318>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d0:	eef0 7ae7 	vabs.f32	s15, s15
 80027d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	dc03      	bgt.n	80027ea <run_jogmode+0x222>
 80027e2:	4b40      	ldr	r3, [pc, #256]	@ (80028e4 <run_jogmode+0x31c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d13b      	bne.n	8002862 <run_jogmode+0x29a>
			trajectory();
 80027ea:	f000 fc51 	bl	8003090 <trajectory>
			static uint64_t timestamp_velocity_PID = 0;
			uint64_t currentTime = micros();
 80027ee:	f000 facf 	bl	8002d90 <micros>
 80027f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
			if(currentTime > timestamp_velocity_PID)
 80027f6:	4b3c      	ldr	r3, [pc, #240]	@ (80028e8 <run_jogmode+0x320>)
 80027f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002800:	4290      	cmp	r0, r2
 8002802:	eb71 0303 	sbcs.w	r3, r1, r3
 8002806:	d210      	bcs.n	800282a <run_jogmode+0x262>
			{
				timestamp_velocity_PID = currentTime + 1000;//us
 8002808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800280c:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 8002810:	f143 0b00 	adc.w	fp, r3, #0
 8002814:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <run_jogmode+0x320>)
 8002816:	e9c3 ab00 	strd	sl, fp, [r3]
				velocity_PID();
 800281a:	f001 f8ed 	bl	80039f8 <velocity_PID>
				Vfeedback = velocity_PID_output;
 800281e:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <run_jogmode+0x324>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	@ (80028f0 <run_jogmode+0x328>)
 8002824:	6013      	str	r3, [r2, #0]
				setMotor();
 8002826:	f000 f91b 	bl	8002a60 <setMotor>
			}

			static uint64_t timestamp_position_PID = 0;
			currentTime = micros();
 800282a:	f000 fab1 	bl	8002d90 <micros>
 800282e:	e9c7 0102 	strd	r0, r1, [r7, #8]
			if(currentTime > timestamp_position_PID)
 8002832:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <run_jogmode+0x32c>)
 8002834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283c:	4290      	cmp	r0, r2
 800283e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002842:	f080 809f 	bcs.w	8002984 <run_jogmode+0x3bc>
			{
				timestamp_position_PID = currentTime + 5000;//us
 8002846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800284a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800284e:	eb12 0801 	adds.w	r8, r2, r1
 8002852:	f143 0900 	adc.w	r9, r3, #0
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <run_jogmode+0x32c>)
 8002858:	e9c3 8900 	strd	r8, r9, [r3]
				position_PID();
 800285c:	f001 f996 	bl	8003b8c <position_PID>
		if(fabsf(setposition-position) > 1 || trajec_state == 1 ){
 8002860:	e090      	b.n	8002984 <run_jogmode+0x3bc>
			}
		}
		else if((setposition-position) >= 0.01 && floor_end == 0){
 8002862:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <run_jogmode+0x30c>)
 8002864:	ed93 7a00 	vldr	s14, [r3]
 8002868:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <run_jogmode+0x318>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002872:	ee17 0a90 	vmov	r0, s15
 8002876:	f7fd fe33 	bl	80004e0 <__aeabi_f2d>
 800287a:	a30b      	add	r3, pc, #44	@ (adr r3, 80028a8 <run_jogmode+0x2e0>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fe f90c 	bl	8000a9c <__aeabi_dcmpge>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03a      	beq.n	8002900 <run_jogmode+0x338>
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <run_jogmode+0x330>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d136      	bne.n	8002900 <run_jogmode+0x338>
			Vfeedback = 3;
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <run_jogmode+0x328>)
 8002894:	4a19      	ldr	r2, [pc, #100]	@ (80028fc <run_jogmode+0x334>)
 8002896:	601a      	str	r2, [r3, #0]
			setMotor();
 8002898:	f000 f8e2 	bl	8002a60 <setMotor>
 800289c:	e073      	b.n	8002986 <run_jogmode+0x3be>
 800289e:	bf00      	nop
 80028a0:	00000000 	.word	0x00000000
 80028a4:	40240000 	.word	0x40240000
 80028a8:	47ae147b 	.word	0x47ae147b
 80028ac:	3f847ae1 	.word	0x3f847ae1
 80028b0:	20000f2c 	.word	0x20000f2c
 80028b4:	200010c8 	.word	0x200010c8
 80028b8:	200010d0 	.word	0x200010d0
 80028bc:	200010cc 	.word	0x200010cc
 80028c0:	200011cc 	.word	0x200011cc
 80028c4:	2000114c 	.word	0x2000114c
 80028c8:	66666667 	.word	0x66666667
 80028cc:	20001114 	.word	0x20001114
 80028d0:	20000214 	.word	0x20000214
 80028d4:	20001108 	.word	0x20001108
 80028d8:	20000200 	.word	0x20000200
 80028dc:	20001148 	.word	0x20001148
 80028e0:	20001158 	.word	0x20001158
 80028e4:	2000117c 	.word	0x2000117c
 80028e8:	200011d0 	.word	0x200011d0
 80028ec:	20001194 	.word	0x20001194
 80028f0:	2000110c 	.word	0x2000110c
 80028f4:	200011d8 	.word	0x200011d8
 80028f8:	200011e0 	.word	0x200011e0
 80028fc:	40400000 	.word	0x40400000
		}
		else if((setposition-position) <= -0.01 && floor_end == 0){
 8002900:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <run_jogmode+0x460>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	4b49      	ldr	r3, [pc, #292]	@ (8002a2c <run_jogmode+0x464>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	ee17 0a90 	vmov	r0, s15
 8002914:	f7fd fde4 	bl	80004e0 <__aeabi_f2d>
 8002918:	a33f      	add	r3, pc, #252	@ (adr r3, 8002a18 <run_jogmode+0x450>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fe f8b3 	bl	8000a88 <__aeabi_dcmple>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <run_jogmode+0x374>
 8002928:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <run_jogmode+0x468>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <run_jogmode+0x374>
			Vfeedback = -2.5;
 8002930:	4b40      	ldr	r3, [pc, #256]	@ (8002a34 <run_jogmode+0x46c>)
 8002932:	4a41      	ldr	r2, [pc, #260]	@ (8002a38 <run_jogmode+0x470>)
 8002934:	601a      	str	r2, [r3, #0]
			setMotor();
 8002936:	f000 f893 	bl	8002a60 <setMotor>
 800293a:	e024      	b.n	8002986 <run_jogmode+0x3be>
		}
		else if(fabsf(setposition-position) < 0.01){
 800293c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a28 <run_jogmode+0x460>)
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	4b3a      	ldr	r3, [pc, #232]	@ (8002a2c <run_jogmode+0x464>)
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294c:	eef0 7ae7 	vabs.f32	s15, s15
 8002950:	ee17 0a90 	vmov	r0, s15
 8002954:	f7fd fdc4 	bl	80004e0 <__aeabi_f2d>
 8002958:	a331      	add	r3, pc, #196	@ (adr r3, 8002a20 <run_jogmode+0x458>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fe f889 	bl	8000a74 <__aeabi_dcmplt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <run_jogmode+0x3be>
			velocity_PID_output = 0;
 8002968:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <run_jogmode+0x474>)
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
			Vfeedback = 0;
 8002970:	4b30      	ldr	r3, [pc, #192]	@ (8002a34 <run_jogmode+0x46c>)
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
			floor_end = 1;
 8002978:	4b2d      	ldr	r3, [pc, #180]	@ (8002a30 <run_jogmode+0x468>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
			setMotor();
 800297e:	f000 f86f 	bl	8002a60 <setMotor>
 8002982:	e000      	b.n	8002986 <run_jogmode+0x3be>
		if(fabsf(setposition-position) > 1 || trajec_state == 1 ){
 8002984:	bf00      	nop
		}
		if(floor_end == 1){
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <run_jogmode+0x468>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d12a      	bne.n	80029e4 <run_jogmode+0x41c>

			static uint64_t timestamp_gripper = 0;
			uint64_t currentTime = micros();
 800298e:	f000 f9ff 	bl	8002d90 <micros>
 8002992:	e9c7 0100 	strd	r0, r1, [r7]
			static uint8_t time_counter = 0;
			if(currentTime > timestamp_gripper){
 8002996:	4b2a      	ldr	r3, [pc, #168]	@ (8002a40 <run_jogmode+0x478>)
 8002998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029a0:	4290      	cmp	r0, r2
 80029a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80029a6:	d21d      	bcs.n	80029e4 <run_jogmode+0x41c>
				timestamp_gripper = micros()+2000000;
 80029a8:	f000 f9f2 	bl	8002d90 <micros>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4924      	ldr	r1, [pc, #144]	@ (8002a44 <run_jogmode+0x47c>)
 80029b2:	1854      	adds	r4, r2, r1
 80029b4:	f143 0500 	adc.w	r5, r3, #0
 80029b8:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <run_jogmode+0x478>)
 80029ba:	e9c3 4500 	strd	r4, r5, [r3]
				if(time_counter == 0){
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <run_jogmode+0x480>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <run_jogmode+0x406>
					time_counter = 1;
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <run_jogmode+0x480>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e00a      	b.n	80029e4 <run_jogmode+0x41c>
				}
				else{
					floor_counter++;
 80029ce:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <run_jogmode+0x484>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <run_jogmode+0x484>)
 80029d6:	6013      	str	r3, [r2, #0]

					time_counter = 0;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <run_jogmode+0x480>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
					floor_end = 0;
 80029de:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <run_jogmode+0x468>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(floor_counter > 9){
 80029e4:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <run_jogmode+0x484>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	dd10      	ble.n	8002a0e <run_jogmode+0x446>
				registerFrame[0x10].U16=0b0000;
 80029ec:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <run_jogmode+0x488>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	841a      	strh	r2, [r3, #32]
				floor_counter = 0;
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <run_jogmode+0x484>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
				z_status = 0;
 80029f8:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <run_jogmode+0x48c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	801a      	strh	r2, [r3, #0]
				jog_mode = 0;
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <run_jogmode+0x490>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
				debug++;
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <run_jogmode+0x494>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	4a14      	ldr	r2, [pc, #80]	@ (8002a5c <run_jogmode+0x494>)
 8002a0c:	6013      	str	r3, [r2, #0]

		}
	}

}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a18:	47ae147b 	.word	0x47ae147b
 8002a1c:	bf847ae1 	.word	0xbf847ae1
 8002a20:	47ae147b 	.word	0x47ae147b
 8002a24:	3f847ae1 	.word	0x3f847ae1
 8002a28:	20001108 	.word	0x20001108
 8002a2c:	20001158 	.word	0x20001158
 8002a30:	200011e0 	.word	0x200011e0
 8002a34:	2000110c 	.word	0x2000110c
 8002a38:	c0200000 	.word	0xc0200000
 8002a3c:	20001194 	.word	0x20001194
 8002a40:	200011e8 	.word	0x200011e8
 8002a44:	001e8480 	.word	0x001e8480
 8002a48:	200011f0 	.word	0x200011f0
 8002a4c:	200011cc 	.word	0x200011cc
 8002a50:	20000f2c 	.word	0x20000f2c
 8002a54:	2000114c 	.word	0x2000114c
 8002a58:	200010c8 	.word	0x200010c8
 8002a5c:	20000a50 	.word	0x20000a50

08002a60 <setMotor>:

void setMotor()
{
 8002a60:	b598      	push	{r3, r4, r7, lr}
 8002a62:	af00      	add	r7, sp, #0

	if(Vfeedback > 24){
 8002a64:	4b3c      	ldr	r3, [pc, #240]	@ (8002b58 <setMotor+0xf8>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	dd07      	ble.n	8002a88 <setMotor+0x28>
		registerFrame[0x00].U16=22881;
 8002a78:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <setMotor+0xfc>)
 8002a7a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002a7e:	801a      	strh	r2, [r3, #0]
		Vfeedback = 24;
 8002a80:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <setMotor+0xf8>)
 8002a82:	4a37      	ldr	r2, [pc, #220]	@ (8002b60 <setMotor+0x100>)
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e010      	b.n	8002aaa <setMotor+0x4a>
	}
	else if(Vfeedback < -24){
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <setMotor+0xf8>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d506      	bpl.n	8002aaa <setMotor+0x4a>
		registerFrame[0x00].U16=22881;
 8002a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b5c <setMotor+0xfc>)
 8002a9e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002aa2:	801a      	strh	r2, [r3, #0]
		Vfeedback = -24;
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b58 <setMotor+0xf8>)
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b64 <setMotor+0x104>)
 8002aa8:	601a      	str	r2, [r3, #0]
	}
	if(Vfeedback > 0){
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <setMotor+0xf8>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab8:	dd26      	ble.n	8002b08 <setMotor+0xa8>
		registerFrame[0x00].U16=22881;
 8002aba:	4b28      	ldr	r3, [pc, #160]	@ (8002b5c <setMotor+0xfc>)
 8002abc:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002ac0:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2140      	movs	r1, #64	@ 0x40
 8002ac6:	4828      	ldr	r0, [pc, #160]	@ (8002b68 <setMotor+0x108>)
 8002ac8:	f002 fa74 	bl	8004fb4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)Vfeedback*999/24.0);
 8002acc:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <setMotor+0xf8>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad6:	ee17 2a90 	vmov	r2, s15
 8002ada:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fcea 	bl	80004bc <__aeabi_i2d>
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <setMotor+0x10c>)
 8002aee:	f7fd fe79 	bl	80007e4 <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	491e      	ldr	r1, [pc, #120]	@ (8002b70 <setMotor+0x110>)
 8002af8:	680c      	ldr	r4, [r1, #0]
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f81f 	bl	8000b40 <__aeabi_d2uiz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	63a3      	str	r3, [r4, #56]	@ 0x38
	else{
		registerFrame[0x00].U16=22881;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)Vfeedback*(-999)/24.0);
	}
}
 8002b06:	e024      	b.n	8002b52 <setMotor+0xf2>
		registerFrame[0x00].U16=22881;
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <setMotor+0xfc>)
 8002b0a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002b0e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 8002b10:	2201      	movs	r2, #1
 8002b12:	2140      	movs	r1, #64	@ 0x40
 8002b14:	4814      	ldr	r0, [pc, #80]	@ (8002b68 <setMotor+0x108>)
 8002b16:	f002 fa4d 	bl	8004fb4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)Vfeedback*(-999)/24.0);
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <setMotor+0xf8>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b24:	ee17 2a90 	vmov	r2, s15
 8002b28:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <setMotor+0x114>)
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fcc4 	bl	80004bc <__aeabi_i2d>
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <setMotor+0x10c>)
 8002b3a:	f7fd fe53 	bl	80007e4 <__aeabi_ddiv>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	490b      	ldr	r1, [pc, #44]	@ (8002b70 <setMotor+0x110>)
 8002b44:	680c      	ldr	r4, [r1, #0]
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fd fff9 	bl	8000b40 <__aeabi_d2uiz>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8002b52:	bf00      	nop
 8002b54:	bd98      	pop	{r3, r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000110c 	.word	0x2000110c
 8002b5c:	20000f2c 	.word	0x20000f2c
 8002b60:	41c00000 	.word	0x41c00000
 8002b64:	c1c00000 	.word	0xc1c00000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	40380000 	.word	0x40380000
 8002b70:	2000039c 	.word	0x2000039c
 8002b74:	fffffc19 	.word	0xfffffc19

08002b78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a06      	ldr	r2, [pc, #24]	@ (8002b9c <HAL_UART_RxCpltCallback+0x24>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d102      	bne.n	8002b8e <HAL_UART_RxCpltCallback+0x16>
		{
			//(for string only) Add string stop symbol \0 to end string
			RxBuffer[9] = '\0';
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_UART_RxCpltCallback+0x28>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	725a      	strb	r2, [r3, #9]
		}
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000798 	.word	0x20000798
 8002ba0:	200010d4 	.word	0x200010d4

08002ba4 <UARTDMAConfig>:

void UARTDMAConfig()
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	//start UART in DMA mode
	HAL_UART_Receive_DMA(&huart1, RxBuffer,9);
 8002ba8:	2209      	movs	r2, #9
 8002baa:	4903      	ldr	r1, [pc, #12]	@ (8002bb8 <UARTDMAConfig+0x14>)
 8002bac:	4803      	ldr	r0, [pc, #12]	@ (8002bbc <UARTDMAConfig+0x18>)
 8002bae:	f005 fc41 	bl	8008434 <HAL_UART_Receive_DMA>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200010d4 	.word	0x200010d4
 8002bbc:	20000798 	.word	0x20000798

08002bc0 <update_position>:

void update_position()
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	static int floor = -1;
	floor = RxBuffer[6]-'0'-1;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c84 <update_position+0xc4>)
 8002bc6:	799b      	ldrb	r3, [r3, #6]
 8002bc8:	3b31      	subs	r3, #49	@ 0x31
 8002bca:	4a2f      	ldr	r2, [pc, #188]	@ (8002c88 <update_position+0xc8>)
 8002bcc:	6013      	str	r3, [r2, #0]
	x_target_position = (RxBuffer[0]-'0')*100+(RxBuffer[1]-'0')*10+(RxBuffer[2]-'0');
 8002bce:	4b2d      	ldr	r3, [pc, #180]	@ (8002c84 <update_position+0xc4>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3b30      	subs	r3, #48	@ 0x30
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	0091      	lsls	r1, r2, #2
 8002be0:	461a      	mov	r2, r3
 8002be2:	460b      	mov	r3, r1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <update_position+0xc4>)
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	3b30      	subs	r3, #48	@ 0x30
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	0089      	lsls	r1, r1, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <update_position+0xc4>)
 8002c02:	7892      	ldrb	r2, [r2, #2]
 8002c04:	4413      	add	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b30      	subs	r3, #48	@ 0x30
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <update_position+0xcc>)
 8002c0e:	801a      	strh	r2, [r3, #0]
	z_target_position = (RxBuffer[3]-'0')*100+(RxBuffer[4]-'0')*10+(RxBuffer[5]-'0');
 8002c10:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <update_position+0xc4>)
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	3b30      	subs	r3, #48	@ 0x30
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	0091      	lsls	r1, r2, #2
 8002c22:	461a      	mov	r2, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <update_position+0xc4>)
 8002c2e:	791b      	ldrb	r3, [r3, #4]
 8002c30:	3b30      	subs	r3, #48	@ 0x30
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	0089      	lsls	r1, r1, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <update_position+0xc4>)
 8002c44:	7952      	ldrb	r2, [r2, #5]
 8002c46:	4413      	add	r3, r2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b30      	subs	r3, #48	@ 0x30
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <update_position+0xd0>)
 8002c50:	801a      	strh	r2, [r3, #0]
	if(floor >= 0){
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <update_position+0xc8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0f      	blt.n	8002c7a <update_position+0xba>
		x_floor[floor] = x_target_position;
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <update_position+0xcc>)
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <update_position+0xc8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4a0b      	ldr	r2, [pc, #44]	@ (8002c94 <update_position+0xd4>)
 8002c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		z_floor[floor] = z_target_position;
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <update_position+0xd0>)
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <update_position+0xc8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <update_position+0xd8>)
 8002c76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	200010d4 	.word	0x200010d4
 8002c88:	2000023c 	.word	0x2000023c
 8002c8c:	200010e2 	.word	0x200010e2
 8002c90:	200010e0 	.word	0x200010e0
 8002c94:	20000200 	.word	0x20000200
 8002c98:	20000214 	.word	0x20000214

08002c9c <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b4b0      	push	{r4, r5, r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a30      	ldr	r2, [pc, #192]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8002cac:	4b2f      	ldr	r3, [pc, #188]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	1e54      	subs	r4, r2, #1
 8002cb4:	f143 0500 	adc.w	r5, r3, #0
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002cba:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim6)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d14b      	bne.n	8002d5e <HAL_TIM_PeriodElapsedCallback+0xc2>
	{
		debug++;
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a29      	ldr	r2, [pc, #164]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002cce:	6013      	str	r3, [r2, #0]
		registerFrame[0x00].U16 = 22881;
 8002cd0:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002cd2:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002cd6:	801a      	strh	r2, [r3, #0]
		registerFrame[0x10].U16 = z_status;
 8002cd8:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002cda:	881a      	ldrh	r2, [r3, #0]
 8002cdc:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002cde:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = (int)(position*10);
 8002ce0:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf2:	ee17 3a90 	vmov	r3, s15
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002cfa:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = abs((int)(velocity*10));
 8002cfc:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d0e:	ee17 3a90 	vmov	r3, s15
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bfb8      	it	lt
 8002d16:	425b      	neglt	r3, r3
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002d1c:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = abs((int)(acceleration*10));
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d30:	ee17 3a90 	vmov	r3, s15
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bfb8      	it	lt
 8002d38:	425b      	neglt	r3, r3
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002d3e:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = (int)(x_position*10);
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d52:	ee17 3a90 	vmov	r3, s15
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002d5a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bcb0      	pop	{r4, r5, r7}
 8002d66:	4770      	bx	lr
 8002d68:	20000534 	.word	0x20000534
 8002d6c:	20001140 	.word	0x20001140
 8002d70:	20000600 	.word	0x20000600
 8002d74:	20000a50 	.word	0x20000a50
 8002d78:	20000f2c 	.word	0x20000f2c
 8002d7c:	2000114c 	.word	0x2000114c
 8002d80:	20001158 	.word	0x20001158
 8002d84:	20001154 	.word	0x20001154
 8002d88:	20001150 	.word	0x20001150
 8002d8c:	20001148 	.word	0x20001148

08002d90 <micros>:

uint64_t micros()
{
 8002d90:	b4b0      	push	{r4, r5, r7}
 8002d92:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <micros+0x2c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <micros+0x30>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	1884      	adds	r4, r0, r2
 8002da8:	eb41 0503 	adc.w	r5, r1, r3
 8002dac:	4622      	mov	r2, r4
 8002dae:	462b      	mov	r3, r5
}
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bcb0      	pop	{r4, r5, r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000534 	.word	0x20000534
 8002dc0:	20001140 	.word	0x20001140
 8002dc4:	00000000 	.word	0x00000000

08002dc8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002dce:	f7ff ffdf 	bl	8002d90 <micros>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	49a2      	ldr	r1, [pc, #648]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002dd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8002ddc:	4ba1      	ldr	r3, [pc, #644]	@ (8003064 <QEIEncoderPosVel_Update+0x29c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	4a9f      	ldr	r2, [pc, #636]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002de4:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 2048;
 8002de6:	4b9e      	ldr	r3, [pc, #632]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	4b9a      	ldr	r3, [pc, #616]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002df8:	edc3 7a08 	vstr	s15, [r3, #32]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002dfc:	4b98      	ldr	r3, [pc, #608]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b97      	ldr	r3, [pc, #604]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]
	//Handle Warp around
	if(diffPosition > 31744){
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8002e0e:	dd08      	ble.n	8002e22 <QEIEncoderPosVel_Update+0x5a>
		diffPosition -=63488;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8002e16:	60fb      	str	r3, [r7, #12]
		counter--;
 8002e18:	4b93      	ldr	r3, [pc, #588]	@ (8003068 <QEIEncoderPosVel_Update+0x2a0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	4a92      	ldr	r2, [pc, #584]	@ (8003068 <QEIEncoderPosVel_Update+0x2a0>)
 8002e20:	6013      	str	r3, [r2, #0]
	}
	if(diffPosition < -31744){
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f513 4ff8 	cmn.w	r3, #31744	@ 0x7c00
 8002e28:	da08      	bge.n	8002e3c <QEIEncoderPosVel_Update+0x74>
		diffPosition +=63488;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 8002e30:	60fb      	str	r3, [r7, #12]
		counter++;
 8002e32:	4b8d      	ldr	r3, [pc, #564]	@ (8003068 <QEIEncoderPosVel_Update+0x2a0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	4a8b      	ldr	r2, [pc, #556]	@ (8003068 <QEIEncoderPosVel_Update+0x2a0>)
 8002e3a:	6013      	str	r3, [r2, #0]
	}
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8002e3c:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002e3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e42:	4b87      	ldr	r3, [pc, #540]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002e44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e48:	1a84      	subs	r4, r0, r2
 8002e4a:	eb61 0503 	sbc.w	r5, r1, r3
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4629      	mov	r1, r5
 8002e52:	f7fd fb67 	bl	8000524 <__aeabi_ul2d>
 8002e56:	a37c      	add	r3, pc, #496	@ (adr r3, 8003048 <QEIEncoderPosVel_Update+0x280>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fb98 	bl	8000590 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fe8a 	bl	8000b80 <__aeabi_d2f>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60bb      	str	r3, [r7, #8]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e82:	4b77      	ldr	r3, [pc, #476]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002e84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	angular_velocity = QEIdata.QEIAngularVelocity/2048.0*2*M_PI;
 8002e88:	4b75      	ldr	r3, [pc, #468]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb27 	bl	80004e0 <__aeabi_f2d>
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	4b75      	ldr	r3, [pc, #468]	@ (800306c <QEIEncoderPosVel_Update+0x2a4>)
 8002e98:	f7fd fca4 	bl	80007e4 <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	f7fd f9bc 	bl	8000224 <__adddf3>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	a366      	add	r3, pc, #408	@ (adr r3, 8003050 <QEIEncoderPosVel_Update+0x288>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fb69 	bl	8000590 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7fd fe5b 	bl	8000b80 <__aeabi_d2f>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4a68      	ldr	r2, [pc, #416]	@ (8003070 <QEIEncoderPosVel_Update+0x2a8>)
 8002ece:	6013      	str	r3, [r2, #0]
	angular_position = (QEIdata.Position[NEW]%2048)/2048.0*2*M_PI;
 8002ed0:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fadf 	bl	800049c <__aeabi_ui2d>
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4b62      	ldr	r3, [pc, #392]	@ (800306c <QEIEncoderPosVel_Update+0x2a4>)
 8002ee4:	f7fd fc7e 	bl	80007e4 <__aeabi_ddiv>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	f7fd f996 	bl	8000224 <__adddf3>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	a353      	add	r3, pc, #332	@ (adr r3, 8003050 <QEIEncoderPosVel_Update+0x288>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f7fd fb43 	bl	8000590 <__aeabi_dmul>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7fd fe35 	bl	8000b80 <__aeabi_d2f>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a56      	ldr	r2, [pc, #344]	@ (8003074 <QEIEncoderPosVel_Update+0x2ac>)
 8002f1a:	6013      	str	r3, [r2, #0]
	position_round = (counter*31)+(int)(QEIdata.Position[NEW]/2048.0);
 8002f1c:	4b52      	ldr	r3, [pc, #328]	@ (8003068 <QEIEncoderPosVel_Update+0x2a0>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	015b      	lsls	r3, r3, #5
 8002f24:	1a9c      	subs	r4, r3, r2
 8002f26:	4b4e      	ldr	r3, [pc, #312]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fab6 	bl	800049c <__aeabi_ui2d>
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	4b4d      	ldr	r3, [pc, #308]	@ (800306c <QEIEncoderPosVel_Update+0x2a4>)
 8002f36:	f7fd fc55 	bl	80007e4 <__aeabi_ddiv>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd fdd5 	bl	8000af0 <__aeabi_d2iz>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4423      	add	r3, r4
 8002f4a:	4a4b      	ldr	r2, [pc, #300]	@ (8003078 <QEIEncoderPosVel_Update+0x2b0>)
 8002f4c:	6013      	str	r3, [r2, #0]
	position = ((angular_position)/(2.0*M_PI)*14)+(14*position_round);
 8002f4e:	4b49      	ldr	r3, [pc, #292]	@ (8003074 <QEIEncoderPosVel_Update+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fac4 	bl	80004e0 <__aeabi_f2d>
 8002f58:	a33f      	add	r3, pc, #252	@ (adr r3, 8003058 <QEIEncoderPosVel_Update+0x290>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd fc41 	bl	80007e4 <__aeabi_ddiv>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	4b43      	ldr	r3, [pc, #268]	@ (800307c <QEIEncoderPosVel_Update+0x2b4>)
 8002f70:	f7fd fb0e 	bl	8000590 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4614      	mov	r4, r2
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003078 <QEIEncoderPosVel_Update+0x2b0>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fa97 	bl	80004bc <__aeabi_i2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f7fd f945 	bl	8000224 <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fded 	bl	8000b80 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4a35      	ldr	r2, [pc, #212]	@ (8003080 <QEIEncoderPosVel_Update+0x2b8>)
 8002faa:	6013      	str	r3, [r2, #0]
	velocity = angular_velocity*14/2.0/M_PI;
 8002fac:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <QEIEncoderPosVel_Update+0x2a8>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fba:	ee17 0a90 	vmov	r0, s15
 8002fbe:	f7fd fa8f 	bl	80004e0 <__aeabi_f2d>
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fca:	f7fd fc0b 	bl	80007e4 <__aeabi_ddiv>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003050 <QEIEncoderPosVel_Update+0x288>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f7fd fc02 	bl	80007e4 <__aeabi_ddiv>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f7fd fdca 	bl	8000b80 <__aeabi_d2f>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4a25      	ldr	r2, [pc, #148]	@ (8003084 <QEIEncoderPosVel_Update+0x2bc>)
 8002ff0:	6013      	str	r3, [r2, #0]
	QEIdata.Velocity[NEW] = velocity;
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <QEIEncoderPosVel_Update+0x2bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002ff8:	6193      	str	r3, [r2, #24]
	float diffVelocity = QEIdata.Velocity[NEW] - QEIdata.Velocity[OLD];
 8002ffa:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8002ffc:	ed93 7a06 	vldr	s14, [r3, #24]
 8003000:	4b17      	ldr	r3, [pc, #92]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8003002:	edd3 7a07 	vldr	s15, [r3, #28]
 8003006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300a:	edc7 7a01 	vstr	s15, [r7, #4]
	acceleration = diffVelocity / diffTime;
 800300e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003012:	ed97 7a02 	vldr	s14, [r7, #8]
 8003016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301a:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <QEIEncoderPosVel_Update+0x2c0>)
 800301c:	edc3 7a00 	vstr	s15, [r3]

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0e      	ldr	r2, [pc, #56]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8003026:	6053      	str	r3, [r2, #4]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a0c      	ldr	r2, [pc, #48]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 800302e:	61d3      	str	r3, [r2, #28]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8003032:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003036:	490a      	ldr	r1, [pc, #40]	@ (8003060 <QEIEncoderPosVel_Update+0x298>)
 8003038:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bdb0      	pop	{r4, r5, r7, pc}
 8003044:	f3af 8000 	nop.w
 8003048:	a0b5ed8d 	.word	0xa0b5ed8d
 800304c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003050:	54442d18 	.word	0x54442d18
 8003054:	400921fb 	.word	0x400921fb
 8003058:	54442d18 	.word	0x54442d18
 800305c:	401921fb 	.word	0x401921fb
 8003060:	20001118 	.word	0x20001118
 8003064:	20000468 	.word	0x20000468
 8003068:	20001168 	.word	0x20001168
 800306c:	40a00000 	.word	0x40a00000
 8003070:	2000115c 	.word	0x2000115c
 8003074:	20001160 	.word	0x20001160
 8003078:	20001164 	.word	0x20001164
 800307c:	402c0000 	.word	0x402c0000
 8003080:	20001158 	.word	0x20001158
 8003084:	20001154 	.word	0x20001154
 8003088:	20001150 	.word	0x20001150
 800308c:	00000000 	.word	0x00000000

08003090 <trajectory>:

void trajectory(){
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
	static uint32_t Timestamp;
	if(trajec_target != 0 && trajec_state == 0){
 8003098:	4b81      	ldr	r3, [pc, #516]	@ (80032a0 <trajectory+0x210>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	d00d      	beq.n	80030c4 <trajectory+0x34>
 80030a8:	4b7e      	ldr	r3, [pc, #504]	@ (80032a4 <trajectory+0x214>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <trajectory+0x34>
		trajec_state = 1;
 80030b0:	4b7c      	ldr	r3, [pc, #496]	@ (80032a4 <trajectory+0x214>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
		Timestamp = HAL_GetTick();
 80030b6:	f001 f995 	bl	80043e4 <HAL_GetTick>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a7a      	ldr	r2, [pc, #488]	@ (80032a8 <trajectory+0x218>)
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	f000 bc6c 	b.w	800399c <trajectory+0x90c>
	}
	else if(trajec_state == 1 && trajec_target >= 0){
 80030c4:	4b77      	ldr	r3, [pc, #476]	@ (80032a4 <trajectory+0x214>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f040 821b 	bne.w	8003504 <trajectory+0x474>
 80030ce:	4b74      	ldr	r3, [pc, #464]	@ (80032a0 <trajectory+0x210>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	f2c0 8212 	blt.w	8003504 <trajectory+0x474>
		float t = ((HAL_GetTick() - Timestamp)*0.001)+0.001;
 80030e0:	f001 f980 	bl	80043e4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b70      	ldr	r3, [pc, #448]	@ (80032a8 <trajectory+0x218>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd f9d5 	bl	800049c <__aeabi_ui2d>
 80030f2:	a367      	add	r3, pc, #412	@ (adr r3, 8003290 <trajectory+0x200>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fa4a 	bl	8000590 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	a362      	add	r3, pc, #392	@ (adr r3, 8003290 <trajectory+0x200>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f7fd f88b 	bl	8000224 <__adddf3>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f7fd fd33 	bl	8000b80 <__aeabi_d2f>
 800311a:	4603      	mov	r3, r0
 800311c:	60fb      	str	r3, [r7, #12]
		float time = (-100 + sqrt(10000 + (2000*trajec_target)))/1000;
 800311e:	4b60      	ldr	r3, [pc, #384]	@ (80032a0 <trajectory+0x210>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80032ac <trajectory+0x21c>
 8003128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800312c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80032b0 <trajectory+0x220>
 8003130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003134:	ee17 0a90 	vmov	r0, s15
 8003138:	f7fd f9d2 	bl	80004e0 <__aeabi_f2d>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	ec43 2b10 	vmov	d0, r2, r3
 8003144:	f006 ffac 	bl	800a0a0 <sqrt>
 8003148:	ec51 0b10 	vmov	r0, r1, d0
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	4b58      	ldr	r3, [pc, #352]	@ (80032b4 <trajectory+0x224>)
 8003152:	f7fd f865 	bl	8000220 <__aeabi_dsub>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	4b55      	ldr	r3, [pc, #340]	@ (80032b8 <trajectory+0x228>)
 8003164:	f7fd fb3e 	bl	80007e4 <__aeabi_ddiv>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f7fd fd06 	bl	8000b80 <__aeabi_d2f>
 8003174:	4603      	mov	r3, r0
 8003176:	60bb      	str	r3, [r7, #8]
		if(HAL_GetTick() - Timestamp <= (time*1000)){
 8003178:	f001 f934 	bl	80043e4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <trajectory+0x218>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800318c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003190:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80032bc <trajectory+0x22c>
 8003194:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a0:	d81e      	bhi.n	80031e0 <trajectory+0x150>
			trajec_acceleration = 500.0;
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <trajectory+0x230>)
 80031a4:	4a47      	ldr	r2, [pc, #284]	@ (80032c4 <trajectory+0x234>)
 80031a6:	601a      	str	r2, [r3, #0]
			trajec_velocity = 500*t;
 80031a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ac:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80032c8 <trajectory+0x238>
 80031b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b4:	4b45      	ldr	r3, [pc, #276]	@ (80032cc <trajectory+0x23c>)
 80031b6:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (250*t*t)+p0;
 80031ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80031be:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80032d0 <trajectory+0x240>
 80031c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ce:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <trajectory+0x244>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	4b3f      	ldr	r3, [pc, #252]	@ (80032d8 <trajectory+0x248>)
 80031da:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target >= 0){
 80031de:	e3dd      	b.n	800399c <trajectory+0x90c>
		}
		else if(HAL_GetTick() - Timestamp <= ((time+0.2)*1000)){
 80031e0:	f001 f900 	bl	80043e4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b30      	ldr	r3, [pc, #192]	@ (80032a8 <trajectory+0x218>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f955 	bl	800049c <__aeabi_ui2d>
 80031f2:	4604      	mov	r4, r0
 80031f4:	460d      	mov	r5, r1
 80031f6:	68b8      	ldr	r0, [r7, #8]
 80031f8:	f7fd f972 	bl	80004e0 <__aeabi_f2d>
 80031fc:	a326      	add	r3, pc, #152	@ (adr r3, 8003298 <trajectory+0x208>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f7fd f80f 	bl	8000224 <__adddf3>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <trajectory+0x228>)
 8003214:	f7fd f9bc 	bl	8000590 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fd fc32 	bl	8000a88 <__aeabi_dcmple>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d058      	beq.n	80032dc <trajectory+0x24c>
			trajec_acceleration = 0;
 800322a:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <trajectory+0x230>)
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
			trajec_velocity = 500*time;
 8003232:	edd7 7a02 	vldr	s15, [r7, #8]
 8003236:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80032c8 <trajectory+0x238>
 800323a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323e:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <trajectory+0x23c>)
 8003240:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = ((500*time*(t-time))+(250*time*time))+p0;
 8003244:	edd7 7a02 	vldr	s15, [r7, #8]
 8003248:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80032c8 <trajectory+0x238>
 800324c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003250:	edd7 6a03 	vldr	s13, [r7, #12]
 8003254:	edd7 7a02 	vldr	s15, [r7, #8]
 8003258:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800325c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003260:	edd7 7a02 	vldr	s15, [r7, #8]
 8003264:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80032d0 <trajectory+0x240>
 8003268:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800326c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <trajectory+0x244>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <trajectory+0x248>)
 8003284:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target >= 0){
 8003288:	e388      	b.n	800399c <trajectory+0x90c>
 800328a:	bf00      	nop
 800328c:	f3af 8000 	nop.w
 8003290:	d2f1a9fc 	.word	0xd2f1a9fc
 8003294:	3f50624d 	.word	0x3f50624d
 8003298:	9999999a 	.word	0x9999999a
 800329c:	3fc99999 	.word	0x3fc99999
 80032a0:	20001178 	.word	0x20001178
 80032a4:	2000117c 	.word	0x2000117c
 80032a8:	200011f4 	.word	0x200011f4
 80032ac:	44fa0000 	.word	0x44fa0000
 80032b0:	461c4000 	.word	0x461c4000
 80032b4:	40590000 	.word	0x40590000
 80032b8:	408f4000 	.word	0x408f4000
 80032bc:	447a0000 	.word	0x447a0000
 80032c0:	20001174 	.word	0x20001174
 80032c4:	43fa0000 	.word	0x43fa0000
 80032c8:	43fa0000 	.word	0x43fa0000
 80032cc:	20001170 	.word	0x20001170
 80032d0:	437a0000 	.word	0x437a0000
 80032d4:	20001180 	.word	0x20001180
 80032d8:	2000116c 	.word	0x2000116c
		}
		else if(HAL_GetTick() - Timestamp <= (((time*2)+0.2)*1000)){
 80032dc:	f001 f882 	bl	80043e4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4bd9      	ldr	r3, [pc, #868]	@ (8003648 <trajectory+0x5b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f8d7 	bl	800049c <__aeabi_ui2d>
 80032ee:	4604      	mov	r4, r0
 80032f0:	460d      	mov	r5, r1
 80032f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032fa:	ee17 0a90 	vmov	r0, s15
 80032fe:	f7fd f8ef 	bl	80004e0 <__aeabi_f2d>
 8003302:	a3c9      	add	r3, pc, #804	@ (adr r3, 8003628 <trajectory+0x598>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f7fc ff8c 	bl	8000224 <__adddf3>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	4bcc      	ldr	r3, [pc, #816]	@ (800364c <trajectory+0x5bc>)
 800331a:	f7fd f939 	bl	8000590 <__aeabi_dmul>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4620      	mov	r0, r4
 8003324:	4629      	mov	r1, r5
 8003326:	f7fd fbaf 	bl	8000a88 <__aeabi_dcmple>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80d9 	beq.w	80034e4 <trajectory+0x454>
			trajec_acceleration = -500.0;
 8003332:	4bc7      	ldr	r3, [pc, #796]	@ (8003650 <trajectory+0x5c0>)
 8003334:	4ac7      	ldr	r2, [pc, #796]	@ (8003654 <trajectory+0x5c4>)
 8003336:	601a      	str	r2, [r3, #0]
			trajec_velocity = (-500*(t-time-0.2))+(500*time);
 8003338:	ed97 7a03 	vldr	s14, [r7, #12]
 800333c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003344:	ee17 0a90 	vmov	r0, s15
 8003348:	f7fd f8ca 	bl	80004e0 <__aeabi_f2d>
 800334c:	a3b6      	add	r3, pc, #728	@ (adr r3, 8003628 <trajectory+0x598>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ff65 	bl	8000220 <__aeabi_dsub>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	a3b4      	add	r3, pc, #720	@ (adr r3, 8003630 <trajectory+0x5a0>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f914 	bl	8000590 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	edd7 7a02 	vldr	s15, [r7, #8]
 8003374:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8003658 <trajectory+0x5c8>
 8003378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800337c:	ee17 0a90 	vmov	r0, s15
 8003380:	f7fd f8ae 	bl	80004e0 <__aeabi_f2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff4a 	bl	8000224 <__adddf3>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	f7fd fbf2 	bl	8000b80 <__aeabi_d2f>
 800339c:	4603      	mov	r3, r0
 800339e:	4aaf      	ldr	r2, [pc, #700]	@ (800365c <trajectory+0x5cc>)
 80033a0:	6013      	str	r3, [r2, #0]
			trajec_position = ((-250*(t-time-0.2)*(t-time-0.2))+(500*time*(t-time-0.2))+(250*time*time)+(100*time))+p0;
 80033a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80033a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ae:	ee17 0a90 	vmov	r0, s15
 80033b2:	f7fd f895 	bl	80004e0 <__aeabi_f2d>
 80033b6:	a39c      	add	r3, pc, #624	@ (adr r3, 8003628 <trajectory+0x598>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fc ff30 	bl	8000220 <__aeabi_dsub>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	a39b      	add	r3, pc, #620	@ (adr r3, 8003638 <trajectory+0x5a8>)
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f7fd f8df 	bl	8000590 <__aeabi_dmul>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4614      	mov	r4, r2
 80033d8:	461d      	mov	r5, r3
 80033da:	ed97 7a03 	vldr	s14, [r7, #12]
 80033de:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e6:	ee17 0a90 	vmov	r0, s15
 80033ea:	f7fd f879 	bl	80004e0 <__aeabi_f2d>
 80033ee:	a38e      	add	r3, pc, #568	@ (adr r3, 8003628 <trajectory+0x598>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fc ff14 	bl	8000220 <__aeabi_dsub>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fd f8c6 	bl	8000590 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003410:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003658 <trajectory+0x5c8>
 8003414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003418:	ee17 0a90 	vmov	r0, s15
 800341c:	f7fd f860 	bl	80004e0 <__aeabi_f2d>
 8003420:	4604      	mov	r4, r0
 8003422:	460d      	mov	r5, r1
 8003424:	ed97 7a03 	vldr	s14, [r7, #12]
 8003428:	edd7 7a02 	vldr	s15, [r7, #8]
 800342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003430:	ee17 0a90 	vmov	r0, s15
 8003434:	f7fd f854 	bl	80004e0 <__aeabi_f2d>
 8003438:	a37b      	add	r3, pc, #492	@ (adr r3, 8003628 <trajectory+0x598>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fc feef 	bl	8000220 <__aeabi_dsub>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f7fd f8a1 	bl	8000590 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4640      	mov	r0, r8
 8003454:	4649      	mov	r1, r9
 8003456:	f7fc fee5 	bl	8000224 <__adddf3>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4614      	mov	r4, r2
 8003460:	461d      	mov	r5, r3
 8003462:	edd7 7a02 	vldr	s15, [r7, #8]
 8003466:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003660 <trajectory+0x5d0>
 800346a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800346e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	ee17 0a90 	vmov	r0, s15
 800347a:	f7fd f831 	bl	80004e0 <__aeabi_f2d>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4620      	mov	r0, r4
 8003484:	4629      	mov	r1, r5
 8003486:	f7fc fecd 	bl	8000224 <__adddf3>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4614      	mov	r4, r2
 8003490:	461d      	mov	r5, r3
 8003492:	edd7 7a02 	vldr	s15, [r7, #8]
 8003496:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003664 <trajectory+0x5d4>
 800349a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349e:	ee17 0a90 	vmov	r0, s15
 80034a2:	f7fd f81d 	bl	80004e0 <__aeabi_f2d>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fc feb9 	bl	8000224 <__adddf3>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	461d      	mov	r5, r3
 80034ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003668 <trajectory+0x5d8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd f80e 	bl	80004e0 <__aeabi_f2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc feaa 	bl	8000224 <__adddf3>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fd fb52 	bl	8000b80 <__aeabi_d2f>
 80034dc:	4603      	mov	r3, r0
 80034de:	4a63      	ldr	r2, [pc, #396]	@ (800366c <trajectory+0x5dc>)
 80034e0:	6013      	str	r3, [r2, #0]
	else if(trajec_state == 1 && trajec_target >= 0){
 80034e2:	e25b      	b.n	800399c <trajectory+0x90c>
		}
		else{
			trajec_acceleration = 0;
 80034e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003650 <trajectory+0x5c0>)
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
			trajec_velocity = 0;
 80034ec:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <trajectory+0x5cc>)
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
//			trajec_position = 0;
			trajec_target = 0;
 80034f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003670 <trajectory+0x5e0>)
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
			trajec_state = 0;
 80034fc:	4b5d      	ldr	r3, [pc, #372]	@ (8003674 <trajectory+0x5e4>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
	else if(trajec_state == 1 && trajec_target >= 0){
 8003502:	e24b      	b.n	800399c <trajectory+0x90c>
		}
	}
	else if(trajec_state == 1 && trajec_target < 0){
 8003504:	4b5b      	ldr	r3, [pc, #364]	@ (8003674 <trajectory+0x5e4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	f040 822b 	bne.w	8003964 <trajectory+0x8d4>
 800350e:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <trajectory+0x5e0>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	f140 8222 	bpl.w	8003964 <trajectory+0x8d4>
		float t = ((HAL_GetTick() - Timestamp)*0.001+0.001);
 8003520:	f000 ff60 	bl	80043e4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	4b48      	ldr	r3, [pc, #288]	@ (8003648 <trajectory+0x5b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc ffb5 	bl	800049c <__aeabi_ui2d>
 8003532:	a343      	add	r3, pc, #268	@ (adr r3, 8003640 <trajectory+0x5b0>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f82a 	bl	8000590 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	a33e      	add	r3, pc, #248	@ (adr r3, 8003640 <trajectory+0x5b0>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fc fe6b 	bl	8000224 <__adddf3>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f7fd fb13 	bl	8000b80 <__aeabi_d2f>
 800355a:	4603      	mov	r3, r0
 800355c:	607b      	str	r3, [r7, #4]
		float time = (-100 + sqrt(10000 + (-2000*trajec_target)))/1000;
 800355e:	4b44      	ldr	r3, [pc, #272]	@ (8003670 <trajectory+0x5e0>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003678 <trajectory+0x5e8>
 8003568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800356c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800367c <trajectory+0x5ec>
 8003570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003574:	ee17 0a90 	vmov	r0, s15
 8003578:	f7fc ffb2 	bl	80004e0 <__aeabi_f2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	ec43 2b10 	vmov	d0, r2, r3
 8003584:	f006 fd8c 	bl	800a0a0 <sqrt>
 8003588:	ec51 0b10 	vmov	r0, r1, d0
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	4b3b      	ldr	r3, [pc, #236]	@ (8003680 <trajectory+0x5f0>)
 8003592:	f7fc fe45 	bl	8000220 <__aeabi_dsub>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	4b2a      	ldr	r3, [pc, #168]	@ (800364c <trajectory+0x5bc>)
 80035a4:	f7fd f91e 	bl	80007e4 <__aeabi_ddiv>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fae6 	bl	8000b80 <__aeabi_d2f>
 80035b4:	4603      	mov	r3, r0
 80035b6:	603b      	str	r3, [r7, #0]
		if(HAL_GetTick() - Timestamp <= (time*1000)){
 80035b8:	f000 ff14 	bl	80043e4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <trajectory+0x5b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035cc:	edd7 7a00 	vldr	s15, [r7]
 80035d0:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8003684 <trajectory+0x5f4>
 80035d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d852      	bhi.n	8003688 <trajectory+0x5f8>
			trajec_acceleration = -500.0;
 80035e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <trajectory+0x5c0>)
 80035e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <trajectory+0x5c4>)
 80035e6:	601a      	str	r2, [r3, #0]
			trajec_velocity = (500*t)*-1;
 80035e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003658 <trajectory+0x5c8>
 80035f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f4:	eef1 7a67 	vneg.f32	s15, s15
 80035f8:	4b18      	ldr	r3, [pc, #96]	@ (800365c <trajectory+0x5cc>)
 80035fa:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = ((250*t*t)*-1)+p0;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <trajectory+0x5d8>)
 8003600:	ed93 7a00 	vldr	s14, [r3]
 8003604:	edd7 7a01 	vldr	s15, [r7, #4]
 8003608:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003660 <trajectory+0x5d0>
 800360c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003610:	edd7 7a01 	vldr	s15, [r7, #4]
 8003614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <trajectory+0x5dc>)
 800361e:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target < 0){
 8003622:	e1bb      	b.n	800399c <trajectory+0x90c>
 8003624:	f3af 8000 	nop.w
 8003628:	9999999a 	.word	0x9999999a
 800362c:	3fc99999 	.word	0x3fc99999
 8003630:	00000000 	.word	0x00000000
 8003634:	c07f4000 	.word	0xc07f4000
 8003638:	00000000 	.word	0x00000000
 800363c:	c06f4000 	.word	0xc06f4000
 8003640:	d2f1a9fc 	.word	0xd2f1a9fc
 8003644:	3f50624d 	.word	0x3f50624d
 8003648:	200011f4 	.word	0x200011f4
 800364c:	408f4000 	.word	0x408f4000
 8003650:	20001174 	.word	0x20001174
 8003654:	c3fa0000 	.word	0xc3fa0000
 8003658:	43fa0000 	.word	0x43fa0000
 800365c:	20001170 	.word	0x20001170
 8003660:	437a0000 	.word	0x437a0000
 8003664:	42c80000 	.word	0x42c80000
 8003668:	20001180 	.word	0x20001180
 800366c:	2000116c 	.word	0x2000116c
 8003670:	20001178 	.word	0x20001178
 8003674:	2000117c 	.word	0x2000117c
 8003678:	c4fa0000 	.word	0xc4fa0000
 800367c:	461c4000 	.word	0x461c4000
 8003680:	40590000 	.word	0x40590000
 8003684:	447a0000 	.word	0x447a0000
		}
		else if(HAL_GetTick() - Timestamp <= ((time+0.2)*1000)){
 8003688:	f000 feac 	bl	80043e4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	4bcc      	ldr	r3, [pc, #816]	@ (80039c0 <trajectory+0x930>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff01 	bl	800049c <__aeabi_ui2d>
 800369a:	4604      	mov	r4, r0
 800369c:	460d      	mov	r5, r1
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f7fc ff1e 	bl	80004e0 <__aeabi_f2d>
 80036a4:	a3c0      	add	r3, pc, #768	@ (adr r3, 80039a8 <trajectory+0x918>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fc fdbb 	bl	8000224 <__adddf3>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	4bc2      	ldr	r3, [pc, #776]	@ (80039c4 <trajectory+0x934>)
 80036bc:	f7fc ff68 	bl	8000590 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4620      	mov	r0, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	f7fd f9de 	bl	8000a88 <__aeabi_dcmple>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d031      	beq.n	8003736 <trajectory+0x6a6>
			trajec_acceleration = 0;
 80036d2:	4bbd      	ldr	r3, [pc, #756]	@ (80039c8 <trajectory+0x938>)
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
			trajec_velocity = (500*time)*-1;
 80036da:	edd7 7a00 	vldr	s15, [r7]
 80036de:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80039cc <trajectory+0x93c>
 80036e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e6:	eef1 7a67 	vneg.f32	s15, s15
 80036ea:	4bb9      	ldr	r3, [pc, #740]	@ (80039d0 <trajectory+0x940>)
 80036ec:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (((500*time*(t-time))+(250*time*time))*-1)+p0;
 80036f0:	4bb8      	ldr	r3, [pc, #736]	@ (80039d4 <trajectory+0x944>)
 80036f2:	ed93 7a00 	vldr	s14, [r3]
 80036f6:	edd7 7a00 	vldr	s15, [r7]
 80036fa:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 80039cc <trajectory+0x93c>
 80036fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003702:	ed97 6a01 	vldr	s12, [r7, #4]
 8003706:	edd7 7a00 	vldr	s15, [r7]
 800370a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800370e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003712:	edd7 7a00 	vldr	s15, [r7]
 8003716:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 80039d8 <trajectory+0x948>
 800371a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800371e:	edd7 7a00 	vldr	s15, [r7]
 8003722:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372e:	4bab      	ldr	r3, [pc, #684]	@ (80039dc <trajectory+0x94c>)
 8003730:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target < 0){
 8003734:	e132      	b.n	800399c <trajectory+0x90c>
		}
		else if(HAL_GetTick() - Timestamp <= (((time*2)+0.2)*1000)){
 8003736:	f000 fe55 	bl	80043e4 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	4ba0      	ldr	r3, [pc, #640]	@ (80039c0 <trajectory+0x930>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc feaa 	bl	800049c <__aeabi_ui2d>
 8003748:	4604      	mov	r4, r0
 800374a:	460d      	mov	r5, r1
 800374c:	edd7 7a00 	vldr	s15, [r7]
 8003750:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003754:	ee17 0a90 	vmov	r0, s15
 8003758:	f7fc fec2 	bl	80004e0 <__aeabi_f2d>
 800375c:	a392      	add	r3, pc, #584	@ (adr r3, 80039a8 <trajectory+0x918>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f7fc fd5f 	bl	8000224 <__adddf3>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	4b94      	ldr	r3, [pc, #592]	@ (80039c4 <trajectory+0x934>)
 8003774:	f7fc ff0c 	bl	8000590 <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4620      	mov	r0, r4
 800377e:	4629      	mov	r1, r5
 8003780:	f7fd f982 	bl	8000a88 <__aeabi_dcmple>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80dc 	beq.w	8003944 <trajectory+0x8b4>
			trajec_acceleration = 500.0;
 800378c:	4b8e      	ldr	r3, [pc, #568]	@ (80039c8 <trajectory+0x938>)
 800378e:	4a94      	ldr	r2, [pc, #592]	@ (80039e0 <trajectory+0x950>)
 8003790:	601a      	str	r2, [r3, #0]
			trajec_velocity = ((-500*(t-time-0.2))+(500*time))*-1;
 8003792:	ed97 7a01 	vldr	s14, [r7, #4]
 8003796:	edd7 7a00 	vldr	s15, [r7]
 800379a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800379e:	ee17 0a90 	vmov	r0, s15
 80037a2:	f7fc fe9d 	bl	80004e0 <__aeabi_f2d>
 80037a6:	a380      	add	r3, pc, #512	@ (adr r3, 80039a8 <trajectory+0x918>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f7fc fd38 	bl	8000220 <__aeabi_dsub>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	a37d      	add	r3, pc, #500	@ (adr r3, 80039b0 <trajectory+0x920>)
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f7fc fee7 	bl	8000590 <__aeabi_dmul>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4614      	mov	r4, r2
 80037c8:	461d      	mov	r5, r3
 80037ca:	edd7 7a00 	vldr	s15, [r7]
 80037ce:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80039cc <trajectory+0x93c>
 80037d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d6:	ee17 0a90 	vmov	r0, s15
 80037da:	f7fc fe81 	bl	80004e0 <__aeabi_f2d>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	f7fc fd1d 	bl	8000224 <__adddf3>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f7fd f9c5 	bl	8000b80 <__aeabi_d2f>
 80037f6:	4603      	mov	r3, r0
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eef1 7a67 	vneg.f32	s15, s15
 8003800:	4b73      	ldr	r3, [pc, #460]	@ (80039d0 <trajectory+0x940>)
 8003802:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (((-250*(t-time-0.2)*(t-time-0.2))+(500*time*(t-time-0.2))+(250*time*time)+(100*time))*-1)+p0;
 8003806:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <trajectory+0x944>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fe68 	bl	80004e0 <__aeabi_f2d>
 8003810:	4604      	mov	r4, r0
 8003812:	460d      	mov	r5, r1
 8003814:	ed97 7a01 	vldr	s14, [r7, #4]
 8003818:	edd7 7a00 	vldr	s15, [r7]
 800381c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003820:	ee17 0a90 	vmov	r0, s15
 8003824:	f7fc fe5c 	bl	80004e0 <__aeabi_f2d>
 8003828:	a35f      	add	r3, pc, #380	@ (adr r3, 80039a8 <trajectory+0x918>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fcf7 	bl	8000220 <__aeabi_dsub>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	a35f      	add	r3, pc, #380	@ (adr r3, 80039b8 <trajectory+0x928>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fc fea6 	bl	8000590 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4690      	mov	r8, r2
 800384a:	4699      	mov	r9, r3
 800384c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003850:	edd7 7a00 	vldr	s15, [r7]
 8003854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003858:	ee17 0a90 	vmov	r0, s15
 800385c:	f7fc fe40 	bl	80004e0 <__aeabi_f2d>
 8003860:	a351      	add	r3, pc, #324	@ (adr r3, 80039a8 <trajectory+0x918>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fcdb 	bl	8000220 <__aeabi_dsub>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4640      	mov	r0, r8
 8003870:	4649      	mov	r1, r9
 8003872:	f7fc fe8d 	bl	8000590 <__aeabi_dmul>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4692      	mov	sl, r2
 800387c:	469b      	mov	fp, r3
 800387e:	edd7 7a00 	vldr	s15, [r7]
 8003882:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80039cc <trajectory+0x93c>
 8003886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800388a:	ee17 0a90 	vmov	r0, s15
 800388e:	f7fc fe27 	bl	80004e0 <__aeabi_f2d>
 8003892:	4680      	mov	r8, r0
 8003894:	4689      	mov	r9, r1
 8003896:	ed97 7a01 	vldr	s14, [r7, #4]
 800389a:	edd7 7a00 	vldr	s15, [r7]
 800389e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a2:	ee17 0a90 	vmov	r0, s15
 80038a6:	f7fc fe1b 	bl	80004e0 <__aeabi_f2d>
 80038aa:	a33f      	add	r3, pc, #252	@ (adr r3, 80039a8 <trajectory+0x918>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fcb6 	bl	8000220 <__aeabi_dsub>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4640      	mov	r0, r8
 80038ba:	4649      	mov	r1, r9
 80038bc:	f7fc fe68 	bl	8000590 <__aeabi_dmul>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4650      	mov	r0, sl
 80038c6:	4659      	mov	r1, fp
 80038c8:	f7fc fcac 	bl	8000224 <__adddf3>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4690      	mov	r8, r2
 80038d2:	4699      	mov	r9, r3
 80038d4:	edd7 7a00 	vldr	s15, [r7]
 80038d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80039d8 <trajectory+0x948>
 80038dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038e0:	edd7 7a00 	vldr	s15, [r7]
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	ee17 0a90 	vmov	r0, s15
 80038ec:	f7fc fdf8 	bl	80004e0 <__aeabi_f2d>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4640      	mov	r0, r8
 80038f6:	4649      	mov	r1, r9
 80038f8:	f7fc fc94 	bl	8000224 <__adddf3>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4690      	mov	r8, r2
 8003902:	4699      	mov	r9, r3
 8003904:	edd7 7a00 	vldr	s15, [r7]
 8003908:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80039e4 <trajectory+0x954>
 800390c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003910:	ee17 0a90 	vmov	r0, s15
 8003914:	f7fc fde4 	bl	80004e0 <__aeabi_f2d>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4640      	mov	r0, r8
 800391e:	4649      	mov	r1, r9
 8003920:	f7fc fc80 	bl	8000224 <__adddf3>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4620      	mov	r0, r4
 800392a:	4629      	mov	r1, r5
 800392c:	f7fc fc78 	bl	8000220 <__aeabi_dsub>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f7fd f922 	bl	8000b80 <__aeabi_d2f>
 800393c:	4603      	mov	r3, r0
 800393e:	4a27      	ldr	r2, [pc, #156]	@ (80039dc <trajectory+0x94c>)
 8003940:	6013      	str	r3, [r2, #0]
	else if(trajec_state == 1 && trajec_target < 0){
 8003942:	e02b      	b.n	800399c <trajectory+0x90c>
		}
		else{
			trajec_acceleration = 0;
 8003944:	4b20      	ldr	r3, [pc, #128]	@ (80039c8 <trajectory+0x938>)
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
			trajec_velocity = 0;
 800394c:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <trajectory+0x940>)
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
//			trajec_position = 0;
			trajec_target = 0;
 8003954:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <trajectory+0x958>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
			trajec_state = 0;
 800395c:	4b23      	ldr	r3, [pc, #140]	@ (80039ec <trajectory+0x95c>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
	else if(trajec_state == 1 && trajec_target < 0){
 8003962:	e01b      	b.n	800399c <trajectory+0x90c>
		}
	}
	else if(trajec_state == 0 && trajec_target == 0){
 8003964:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <trajectory+0x95c>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d117      	bne.n	800399c <trajectory+0x90c>
 800396c:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <trajectory+0x958>)
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397a:	d10f      	bne.n	800399c <trajectory+0x90c>
		trajec_target = setposition-position;
 800397c:	4b1c      	ldr	r3, [pc, #112]	@ (80039f0 <trajectory+0x960>)
 800397e:	ed93 7a00 	vldr	s14, [r3]
 8003982:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <trajectory+0x964>)
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <trajectory+0x958>)
 800398e:	edc3 7a00 	vstr	s15, [r3]
		p0 = position;
 8003992:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <trajectory+0x964>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a0f      	ldr	r2, [pc, #60]	@ (80039d4 <trajectory+0x944>)
 8003998:	6013      	str	r3, [r2, #0]
	}
}
 800399a:	e7ff      	b.n	800399c <trajectory+0x90c>
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a6:	bf00      	nop
 80039a8:	9999999a 	.word	0x9999999a
 80039ac:	3fc99999 	.word	0x3fc99999
 80039b0:	00000000 	.word	0x00000000
 80039b4:	c07f4000 	.word	0xc07f4000
 80039b8:	00000000 	.word	0x00000000
 80039bc:	c06f4000 	.word	0xc06f4000
 80039c0:	200011f4 	.word	0x200011f4
 80039c4:	408f4000 	.word	0x408f4000
 80039c8:	20001174 	.word	0x20001174
 80039cc:	43fa0000 	.word	0x43fa0000
 80039d0:	20001170 	.word	0x20001170
 80039d4:	20001180 	.word	0x20001180
 80039d8:	437a0000 	.word	0x437a0000
 80039dc:	2000116c 	.word	0x2000116c
 80039e0:	43fa0000 	.word	0x43fa0000
 80039e4:	42c80000 	.word	0x42c80000
 80039e8:	20001178 	.word	0x20001178
 80039ec:	2000117c 	.word	0x2000117c
 80039f0:	20001108 	.word	0x20001108
 80039f4:	20001158 	.word	0x20001158

080039f8 <velocity_PID>:

void velocity_PID(){
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
	static float u_n;
	static float u_n1 = 0;
	static float u_n2 = 0;
	static float y_n;
	static float y_n1 = 0;
	float one = (2*velocity_Ts*velocity_Kp)+(velocity_Ki*velocity_Ts*velocity_Ts)+(2*velocity_Kd);
 80039fe:	4b56      	ldr	r3, [pc, #344]	@ (8003b58 <velocity_PID+0x160>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a08:	4b54      	ldr	r3, [pc, #336]	@ (8003b5c <velocity_PID+0x164>)
 8003a0a:	edd3 7a00 	vldr	s15, [r3]
 8003a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a12:	4b53      	ldr	r3, [pc, #332]	@ (8003b60 <velocity_PID+0x168>)
 8003a14:	edd3 6a00 	vldr	s13, [r3]
 8003a18:	4b4f      	ldr	r3, [pc, #316]	@ (8003b58 <velocity_PID+0x160>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a22:	4b4d      	ldr	r3, [pc, #308]	@ (8003b58 <velocity_PID+0x160>)
 8003a24:	edd3 7a00 	vldr	s15, [r3]
 8003a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a30:	4b4c      	ldr	r3, [pc, #304]	@ (8003b64 <velocity_PID+0x16c>)
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3e:	edc7 7a03 	vstr	s15, [r7, #12]
	float two = (-2*velocity_Ts*velocity_Kp)+(velocity_Ki*velocity_Ts*velocity_Ts)-(4*velocity_Kd);
 8003a42:	4b45      	ldr	r3, [pc, #276]	@ (8003b58 <velocity_PID+0x160>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003a4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a50:	4b42      	ldr	r3, [pc, #264]	@ (8003b5c <velocity_PID+0x164>)
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5a:	4b41      	ldr	r3, [pc, #260]	@ (8003b60 <velocity_PID+0x168>)
 8003a5c:	edd3 6a00 	vldr	s13, [r3]
 8003a60:	4b3d      	ldr	r3, [pc, #244]	@ (8003b58 <velocity_PID+0x160>)
 8003a62:	edd3 7a00 	vldr	s15, [r3]
 8003a66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <velocity_PID+0x160>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a78:	4b3a      	ldr	r3, [pc, #232]	@ (8003b64 <velocity_PID+0x16c>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003a82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8a:	edc7 7a02 	vstr	s15, [r7, #8]
	float three = 2*velocity_Kd;
 8003a8e:	4b35      	ldr	r3, [pc, #212]	@ (8003b64 <velocity_PID+0x16c>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a98:	edc7 7a01 	vstr	s15, [r7, #4]
	float four = 2*velocity_Ts;
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b58 <velocity_PID+0x160>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003aa6:	edc7 7a00 	vstr	s15, [r7]
	u_n = trajec_velocity + position_PID_output - velocity;
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8003b68 <velocity_PID+0x170>)
 8003aac:	ed93 7a00 	vldr	s14, [r3]
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b6c <velocity_PID+0x174>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aba:	4b2d      	ldr	r3, [pc, #180]	@ (8003b70 <velocity_PID+0x178>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <velocity_PID+0x17c>)
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
	y_n = ((one*u_n)+(two*u_n1)+(three*u_n2)+(four*y_n1))/four;
 8003aca:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <velocity_PID+0x17c>)
 8003acc:	ed93 7a00 	vldr	s14, [r3]
 8003ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ad8:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <velocity_PID+0x180>)
 8003ada:	edd3 6a00 	vldr	s13, [r3]
 8003ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <velocity_PID+0x184>)
 8003aec:	edd3 6a00 	vldr	s13, [r3]
 8003af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003afc:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <velocity_PID+0x188>)
 8003afe:	edd3 6a00 	vldr	s13, [r3]
 8003b02:	edd7 7a00 	vldr	s15, [r7]
 8003b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b0a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003b0e:	ed97 7a00 	vldr	s14, [r7]
 8003b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b16:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <velocity_PID+0x18c>)
 8003b18:	edc3 7a00 	vstr	s15, [r3]

	velocity_PID_output += y_n;
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b88 <velocity_PID+0x190>)
 8003b1e:	ed93 7a00 	vldr	s14, [r3]
 8003b22:	4b18      	ldr	r3, [pc, #96]	@ (8003b84 <velocity_PID+0x18c>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2c:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <velocity_PID+0x190>)
 8003b2e:	edc3 7a00 	vstr	s15, [r3]
	u_n2 = u_n1;
 8003b32:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <velocity_PID+0x180>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a11      	ldr	r2, [pc, #68]	@ (8003b7c <velocity_PID+0x184>)
 8003b38:	6013      	str	r3, [r2, #0]
	u_n1 = u_n;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <velocity_PID+0x17c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b78 <velocity_PID+0x180>)
 8003b40:	6013      	str	r3, [r2, #0]
	y_n1 = y_n;
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <velocity_PID+0x18c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <velocity_PID+0x188>)
 8003b48:	6013      	str	r3, [r2, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000238 	.word	0x20000238
 8003b5c:	2000022c 	.word	0x2000022c
 8003b60:	20000230 	.word	0x20000230
 8003b64:	20000234 	.word	0x20000234
 8003b68:	20001170 	.word	0x20001170
 8003b6c:	20001190 	.word	0x20001190
 8003b70:	20001154 	.word	0x20001154
 8003b74:	200011f8 	.word	0x200011f8
 8003b78:	200011fc 	.word	0x200011fc
 8003b7c:	20001200 	.word	0x20001200
 8003b80:	20001204 	.word	0x20001204
 8003b84:	20001208 	.word	0x20001208
 8003b88:	20001194 	.word	0x20001194

08003b8c <position_PID>:

void position_PID(){
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
	static float u_n;
	static float u_n1 = 0;
	static float u_n2 = 0;
	static float y_n;
	static float y_n1 = 0;
	float one = (2*position_Ts*position_Kp)+(position_Ki*position_Ts*position_Ts)+(2*position_Kd);
 8003b92:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <position_PID+0x154>)
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b9c:	4b51      	ldr	r3, [pc, #324]	@ (8003ce4 <position_PID+0x158>)
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba6:	4b50      	ldr	r3, [pc, #320]	@ (8003ce8 <position_PID+0x15c>)
 8003ba8:	edd3 6a00 	vldr	s13, [r3]
 8003bac:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce0 <position_PID+0x154>)
 8003bae:	edd3 7a00 	vldr	s15, [r3]
 8003bb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <position_PID+0x154>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc4:	4b49      	ldr	r3, [pc, #292]	@ (8003cec <position_PID+0x160>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd2:	edc7 7a03 	vstr	s15, [r7, #12]
	float two = (-2*position_Ts*position_Kp)+(position_Ki*position_Ts*position_Ts)-(4*position_Kd);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <position_PID+0x154>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003be0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003be4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <position_PID+0x158>)
 8003be6:	edd3 7a00 	vldr	s15, [r3]
 8003bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <position_PID+0x15c>)
 8003bf0:	edd3 6a00 	vldr	s13, [r3]
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce0 <position_PID+0x154>)
 8003bf6:	edd3 7a00 	vldr	s15, [r3]
 8003bfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <position_PID+0x154>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c0c:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <position_PID+0x160>)
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003c16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1e:	edc7 7a02 	vstr	s15, [r7, #8]
	float three = 2*position_Kd;
 8003c22:	4b32      	ldr	r3, [pc, #200]	@ (8003cec <position_PID+0x160>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c2c:	edc7 7a01 	vstr	s15, [r7, #4]
	float four = 2*position_Ts;
 8003c30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce0 <position_PID+0x154>)
 8003c32:	edd3 7a00 	vldr	s15, [r3]
 8003c36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c3a:	edc7 7a00 	vstr	s15, [r7]
	u_n = trajec_position - position;
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf0 <position_PID+0x164>)
 8003c40:	ed93 7a00 	vldr	s14, [r3]
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <position_PID+0x168>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf8 <position_PID+0x16c>)
 8003c50:	edc3 7a00 	vstr	s15, [r3]
	y_n = ((one*u_n)+(two*u_n1)+(three*u_n2)+(four*y_n1))/four;
 8003c54:	4b28      	ldr	r3, [pc, #160]	@ (8003cf8 <position_PID+0x16c>)
 8003c56:	ed93 7a00 	vldr	s14, [r3]
 8003c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c62:	4b26      	ldr	r3, [pc, #152]	@ (8003cfc <position_PID+0x170>)
 8003c64:	edd3 6a00 	vldr	s13, [r3]
 8003c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <position_PID+0x174>)
 8003c76:	edd3 6a00 	vldr	s13, [r3]
 8003c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c86:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <position_PID+0x178>)
 8003c88:	edd3 6a00 	vldr	s13, [r3]
 8003c8c:	edd7 7a00 	vldr	s15, [r7]
 8003c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c94:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003c98:	ed97 7a00 	vldr	s14, [r7]
 8003c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca0:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <position_PID+0x17c>)
 8003ca2:	edc3 7a00 	vstr	s15, [r3]

	position_PID_output += y_n;
 8003ca6:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <position_PID+0x180>)
 8003ca8:	ed93 7a00 	vldr	s14, [r3]
 8003cac:	4b16      	ldr	r3, [pc, #88]	@ (8003d08 <position_PID+0x17c>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <position_PID+0x180>)
 8003cb8:	edc3 7a00 	vstr	s15, [r3]
	u_n2 = u_n1;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <position_PID+0x170>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d00 <position_PID+0x174>)
 8003cc2:	6013      	str	r3, [r2, #0]
	u_n1 = u_n;
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <position_PID+0x16c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <position_PID+0x170>)
 8003cca:	6013      	str	r3, [r2, #0]
	y_n1 = y_n;
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <position_PID+0x17c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <position_PID+0x178>)
 8003cd2:	6013      	str	r3, [r2, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	20000228 	.word	0x20000228
 8003ce4:	20001184 	.word	0x20001184
 8003ce8:	20001188 	.word	0x20001188
 8003cec:	2000118c 	.word	0x2000118c
 8003cf0:	2000116c 	.word	0x2000116c
 8003cf4:	20001158 	.word	0x20001158
 8003cf8:	2000120c 	.word	0x2000120c
 8003cfc:	20001210 	.word	0x20001210
 8003d00:	20001214 	.word	0x20001214
 8003d04:	20001218 	.word	0x20001218
 8003d08:	2000121c 	.word	0x2000121c
 8003d0c:	20001190 	.word	0x20001190

08003d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d14:	b672      	cpsid	i
}
 8003d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <Error_Handler+0x8>

08003d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d22:	4b0f      	ldr	r3, [pc, #60]	@ (8003d60 <HAL_MspInit+0x44>)
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	4a0e      	ldr	r2, [pc, #56]	@ (8003d60 <HAL_MspInit+0x44>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <HAL_MspInit+0x44>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <HAL_MspInit+0x44>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	4a08      	ldr	r2, [pc, #32]	@ (8003d60 <HAL_MspInit+0x44>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_MspInit+0x44>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003d52:	f001 f9eb 	bl	800512c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000

08003d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d76:	4b38      	ldr	r3, [pc, #224]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	4a37      	ldr	r2, [pc, #220]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d82:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003d8e:	e05e      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a31      	ldr	r2, [pc, #196]	@ (8003e5c <HAL_TIM_Base_MspInit+0xf8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10c      	bne.n	8003db4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
}
 8003db2:	e04c      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a29      	ldr	r2, [pc, #164]	@ (8003e60 <HAL_TIM_Base_MspInit+0xfc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d114      	bne.n	8003de8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003dbe:	4b26      	ldr	r3, [pc, #152]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc2:	4a25      	ldr	r2, [pc, #148]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003dc4:	f043 0308 	orr.w	r3, r3, #8
 8003dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dca:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2032      	movs	r0, #50	@ 0x32
 8003ddc:	f000 fbe9 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003de0:	2032      	movs	r0, #50	@ 0x32
 8003de2:	f000 fc00 	bl	80045e6 <HAL_NVIC_EnableIRQ>
}
 8003de6:	e032      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <HAL_TIM_Base_MspInit+0x100>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d114      	bne.n	8003e1c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003df2:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df6:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dfe:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2036      	movs	r0, #54	@ 0x36
 8003e10:	f000 fbcf 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e14:	2036      	movs	r0, #54	@ 0x36
 8003e16:	f000 fbe6 	bl	80045e6 <HAL_NVIC_EnableIRQ>
}
 8003e1a:	e018      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a11      	ldr	r2, [pc, #68]	@ (8003e68 <HAL_TIM_Base_MspInit+0x104>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d113      	bne.n	8003e4e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003e26:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e32:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf4>)
 8003e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	2019      	movs	r0, #25
 8003e44:	f000 fbb5 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e48:	2019      	movs	r0, #25
 8003e4a:	f000 fbcc 	bl	80045e6 <HAL_NVIC_EnableIRQ>
}
 8003e4e:	bf00      	nop
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40001000 	.word	0x40001000
 8003e68:	40014400 	.word	0x40014400

08003e6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_TIM_Encoder_MspInit+0x80>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d129      	bne.n	8003ee2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b12      	ldr	r3, [pc, #72]	@ (8003ef0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	4a11      	ldr	r2, [pc, #68]	@ (8003ef0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003ebe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ede:	f000 fecf 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ee2:	bf00      	nop
 8003ee4:	3728      	adds	r7, #40	@ 0x28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <HAL_TIM_MspPostInit+0x64>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d11b      	bne.n	8003f4e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f16:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <HAL_TIM_MspPostInit+0x68>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1a:	4a10      	ldr	r2, [pc, #64]	@ (8003f5c <HAL_TIM_MspPostInit+0x68>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f22:	4b0e      	ldr	r3, [pc, #56]	@ (8003f5c <HAL_TIM_MspPostInit+0x68>)
 8003f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f32:	2302      	movs	r3, #2
 8003f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f42:	f107 030c 	add.w	r3, r7, #12
 8003f46:	4619      	mov	r1, r3
 8003f48:	4805      	ldr	r0, [pc, #20]	@ (8003f60 <HAL_TIM_MspPostInit+0x6c>)
 8003f4a:	f000 fe99 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f4e:	bf00      	nop
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	48000800 	.word	0x48000800

08003f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b0a0      	sub	sp, #128	@ 0x80
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f7c:	f107 0318 	add.w	r3, r7, #24
 8003f80:	2254      	movs	r2, #84	@ 0x54
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f005 ffdb 	bl	8009f40 <memset>
  if(huart->Instance==USART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a80      	ldr	r2, [pc, #512]	@ (8004190 <HAL_UART_MspInit+0x22c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d160      	bne.n	8004056 <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f94:	2301      	movs	r3, #1
 8003f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f9c:	f107 0318 	add.w	r3, r7, #24
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 fe01 	bl	8005ba8 <HAL_RCCEx_PeriphCLKConfig>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fac:	f7ff feb0 	bl	8003d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fb0:	4b78      	ldr	r3, [pc, #480]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb4:	4a77      	ldr	r2, [pc, #476]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8003fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fba:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fbc:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc8:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8003fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fcc:	4a71      	ldr	r2, [pc, #452]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fe0:	2330      	movs	r3, #48	@ 0x30
 8003fe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fec:	2300      	movs	r3, #0
 8003fee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ff0:	2307      	movs	r3, #7
 8003ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4867      	ldr	r0, [pc, #412]	@ (8004198 <HAL_UART_MspInit+0x234>)
 8003ffc:	f000 fe40 	bl	8004c80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8004000:	4b66      	ldr	r3, [pc, #408]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004002:	4a67      	ldr	r2, [pc, #412]	@ (80041a0 <HAL_UART_MspInit+0x23c>)
 8004004:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004006:	4b65      	ldr	r3, [pc, #404]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004008:	2218      	movs	r2, #24
 800400a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800400c:	4b63      	ldr	r3, [pc, #396]	@ (800419c <HAL_UART_MspInit+0x238>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004012:	4b62      	ldr	r3, [pc, #392]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004018:	4b60      	ldr	r3, [pc, #384]	@ (800419c <HAL_UART_MspInit+0x238>)
 800401a:	2280      	movs	r2, #128	@ 0x80
 800401c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401e:	4b5f      	ldr	r3, [pc, #380]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004020:	2200      	movs	r2, #0
 8004022:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004024:	4b5d      	ldr	r3, [pc, #372]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004026:	2200      	movs	r2, #0
 8004028:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800402a:	4b5c      	ldr	r3, [pc, #368]	@ (800419c <HAL_UART_MspInit+0x238>)
 800402c:	2220      	movs	r2, #32
 800402e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004030:	4b5a      	ldr	r3, [pc, #360]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004036:	4859      	ldr	r0, [pc, #356]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004038:	f000 faf0 	bl	800461c <HAL_DMA_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8004042:	f7ff fe65 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a54      	ldr	r2, [pc, #336]	@ (800419c <HAL_UART_MspInit+0x238>)
 800404a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800404e:	4a53      	ldr	r2, [pc, #332]	@ (800419c <HAL_UART_MspInit+0x238>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004054:	e097      	b.n	8004186 <HAL_UART_MspInit+0x222>
  else if(huart->Instance==USART2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a52      	ldr	r2, [pc, #328]	@ (80041a4 <HAL_UART_MspInit+0x240>)
 800405c:	4293      	cmp	r3, r2
 800405e:	f040 8092 	bne.w	8004186 <HAL_UART_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004062:	2302      	movs	r3, #2
 8004064:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004066:	2300      	movs	r3, #0
 8004068:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800406a:	f107 0318 	add.w	r3, r7, #24
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fd9a 	bl	8005ba8 <HAL_RCCEx_PeriphCLKConfig>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800407a:	f7ff fe49 	bl	8003d10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800407e:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	4a44      	ldr	r2, [pc, #272]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8004084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004088:	6593      	str	r3, [r2, #88]	@ 0x58
 800408a:	4b42      	ldr	r3, [pc, #264]	@ (8004194 <HAL_UART_MspInit+0x230>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	4b3f      	ldr	r3, [pc, #252]	@ (8004194 <HAL_UART_MspInit+0x230>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409a:	4a3e      	ldr	r2, [pc, #248]	@ (8004194 <HAL_UART_MspInit+0x230>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004194 <HAL_UART_MspInit+0x230>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040ae:	230c      	movs	r3, #12
 80040b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ba:	2300      	movs	r3, #0
 80040bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040be:	2307      	movs	r3, #7
 80040c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80040c6:	4619      	mov	r1, r3
 80040c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040cc:	f000 fdd8 	bl	8004c80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80040d0:	4b35      	ldr	r3, [pc, #212]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040d2:	4a36      	ldr	r2, [pc, #216]	@ (80041ac <HAL_UART_MspInit+0x248>)
 80040d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80040d6:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040d8:	221a      	movs	r2, #26
 80040da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040dc:	4b32      	ldr	r3, [pc, #200]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e2:	4b31      	ldr	r3, [pc, #196]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040e8:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040ea:	2280      	movs	r2, #128	@ 0x80
 80040ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ee:	4b2e      	ldr	r3, [pc, #184]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f4:	4b2c      	ldr	r3, [pc, #176]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80040fa:	4b2b      	ldr	r3, [pc, #172]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004100:	4b29      	ldr	r3, [pc, #164]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 8004102:	2200      	movs	r2, #0
 8004104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004106:	4828      	ldr	r0, [pc, #160]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 8004108:	f000 fa88 	bl	800461c <HAL_DMA_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8004112:	f7ff fdfd 	bl	8003d10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a23      	ldr	r2, [pc, #140]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 800411a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800411e:	4a22      	ldr	r2, [pc, #136]	@ (80041a8 <HAL_UART_MspInit+0x244>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004124:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004126:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <HAL_UART_MspInit+0x250>)
 8004128:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800412a:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 800412c:	221b      	movs	r2, #27
 800412e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004130:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004132:	2210      	movs	r2, #16
 8004134:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004136:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004138:	2200      	movs	r2, #0
 800413a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800413c:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 800413e:	2280      	movs	r2, #128	@ 0x80
 8004140:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004144:	2200      	movs	r2, #0
 8004146:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004148:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004150:	2200      	movs	r2, #0
 8004152:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004154:	4b16      	ldr	r3, [pc, #88]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004156:	2200      	movs	r2, #0
 8004158:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800415a:	4815      	ldr	r0, [pc, #84]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 800415c:	f000 fa5e 	bl	800461c <HAL_DMA_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_UART_MspInit+0x206>
      Error_Handler();
 8004166:	f7ff fdd3 	bl	8003d10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a10      	ldr	r2, [pc, #64]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 800416e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004170:	4a0f      	ldr	r2, [pc, #60]	@ (80041b0 <HAL_UART_MspInit+0x24c>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	2026      	movs	r0, #38	@ 0x26
 800417c:	f000 fa19 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004180:	2026      	movs	r0, #38	@ 0x26
 8004182:	f000 fa30 	bl	80045e6 <HAL_NVIC_EnableIRQ>
}
 8004186:	bf00      	nop
 8004188:	3780      	adds	r7, #128	@ 0x80
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40013800 	.word	0x40013800
 8004194:	40021000 	.word	0x40021000
 8004198:	48000800 	.word	0x48000800
 800419c:	20000930 	.word	0x20000930
 80041a0:	40020008 	.word	0x40020008
 80041a4:	40004400 	.word	0x40004400
 80041a8:	20000990 	.word	0x20000990
 80041ac:	4002001c 	.word	0x4002001c
 80041b0:	200009f0 	.word	0x200009f0
 80041b4:	40020030 	.word	0x40020030

080041b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <NMI_Handler+0x4>

080041c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <HardFault_Handler+0x4>

080041c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041cc:	bf00      	nop
 80041ce:	e7fd      	b.n	80041cc <MemManage_Handler+0x4>

080041d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <BusFault_Handler+0x4>

080041d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <UsageFault_Handler+0x4>

080041e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800420e:	f000 f8d7 	bl	80043c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800421c:	4802      	ldr	r0, [pc, #8]	@ (8004228 <DMA1_Channel1_IRQHandler+0x10>)
 800421e:	f000 fbe0 	bl	80049e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000930 	.word	0x20000930

0800422c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004230:	4802      	ldr	r0, [pc, #8]	@ (800423c <DMA1_Channel2_IRQHandler+0x10>)
 8004232:	f000 fbd6 	bl	80049e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000990 	.word	0x20000990

08004240 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004244:	4802      	ldr	r0, [pc, #8]	@ (8004250 <DMA1_Channel3_IRQHandler+0x10>)
 8004246:	f000 fbcc 	bl	80049e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200009f0 	.word	0x200009f0

08004254 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004258:	4802      	ldr	r0, [pc, #8]	@ (8004264 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800425a:	f002 fbf7 	bl	8006a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200006cc 	.word	0x200006cc

08004268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800426c:	4802      	ldr	r0, [pc, #8]	@ (8004278 <USART2_IRQHandler+0x10>)
 800426e:	f004 f92d 	bl	80084cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000864 	.word	0x20000864

0800427c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004280:	4802      	ldr	r0, [pc, #8]	@ (800428c <TIM5_IRQHandler+0x10>)
 8004282:	f002 fbe3 	bl	8006a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000534 	.word	0x20000534

08004290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004294:	4802      	ldr	r0, [pc, #8]	@ (80042a0 <TIM6_DAC_IRQHandler+0x10>)
 8004296:	f002 fbd9 	bl	8006a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000600 	.word	0x20000600

080042a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042a8:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <SystemInit+0x20>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	4a05      	ldr	r2, [pc, #20]	@ (80042c4 <SystemInit+0x20>)
 80042b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042c8:	480d      	ldr	r0, [pc, #52]	@ (8004300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042cc:	f7ff ffea 	bl	80042a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042d0:	480c      	ldr	r0, [pc, #48]	@ (8004304 <LoopForever+0x6>)
  ldr r1, =_edata
 80042d2:	490d      	ldr	r1, [pc, #52]	@ (8004308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042d4:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <LoopForever+0xe>)
  movs r3, #0
 80042d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80042d8:	e002      	b.n	80042e0 <LoopCopyDataInit>

080042da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042de:	3304      	adds	r3, #4

080042e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e4:	d3f9      	bcc.n	80042da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004314 <LoopForever+0x16>)
  movs r3, #0
 80042ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ec:	e001      	b.n	80042f2 <LoopFillZerobss>

080042ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f0:	3204      	adds	r2, #4

080042f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f4:	d3fb      	bcc.n	80042ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042f6:	f005 fe31 	bl	8009f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042fa:	f7fd f93d 	bl	8001578 <main>

080042fe <LoopForever>:

LoopForever:
    b LoopForever
 80042fe:	e7fe      	b.n	80042fe <LoopForever>
  ldr   r0, =_estack
 8004300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004308:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800430c:	0800af70 	.word	0x0800af70
  ldr r2, =_sbss
 8004310:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8004314:	2000135c 	.word	0x2000135c

08004318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004318:	e7fe      	b.n	8004318 <ADC1_2_IRQHandler>

0800431a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004324:	2003      	movs	r0, #3
 8004326:	f000 f939 	bl	800459c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800432a:	2000      	movs	r0, #0
 800432c:	f000 f80e 	bl	800434c <HAL_InitTick>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	71fb      	strb	r3, [r7, #7]
 800433a:	e001      	b.n	8004340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800433c:	f7ff fcee 	bl	8003d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004340:	79fb      	ldrb	r3, [r7, #7]

}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004358:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <HAL_InitTick+0x68>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d022      	beq.n	80043a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <HAL_InitTick+0x6c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b13      	ldr	r3, [pc, #76]	@ (80043b4 <HAL_InitTick+0x68>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800436c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f944 	bl	8004602 <HAL_SYSTICK_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d809      	bhi.n	800439a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004386:	2200      	movs	r2, #0
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	f04f 30ff 	mov.w	r0, #4294967295
 800438e:	f000 f910 	bl	80045b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004392:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_InitTick+0x70>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e007      	b.n	80043aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e004      	b.n	80043aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e001      	b.n	80043aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000248 	.word	0x20000248
 80043b8:	20000240 	.word	0x20000240
 80043bc:	20000244 	.word	0x20000244

080043c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_IncTick+0x1c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_IncTick+0x20>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	4a03      	ldr	r2, [pc, #12]	@ (80043dc <HAL_IncTick+0x1c>)
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20001220 	.word	0x20001220
 80043e0:	20000248 	.word	0x20000248

080043e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <HAL_GetTick+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20001220 	.word	0x20001220

080043fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004418:	4013      	ands	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442e:	4a04      	ldr	r2, [pc, #16]	@ (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	60d3      	str	r3, [r2, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <__NVIC_GetPriorityGrouping+0x18>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0307 	and.w	r3, r3, #7
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	db0b      	blt.n	800448a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4907      	ldr	r1, [pc, #28]	@ (8004498 <__NVIC_EnableIRQ+0x38>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2001      	movs	r0, #1
 8004482:	fa00 f202 	lsl.w	r2, r0, r2
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e100 	.word	0xe000e100

0800449c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	@ (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	@ (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	@ 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf28      	it	cs
 800450e:	2304      	movcs	r3, #4
 8004510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3304      	adds	r3, #4
 8004516:	2b06      	cmp	r3, #6
 8004518:	d902      	bls.n	8004520 <NVIC_EncodePriority+0x30>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3b03      	subs	r3, #3
 800451e:	e000      	b.n	8004522 <NVIC_EncodePriority+0x32>
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004538:	f04f 31ff 	mov.w	r1, #4294967295
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	43d9      	mvns	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	4313      	orrs	r3, r2
         );
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	@ 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004568:	d301      	bcc.n	800456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456a:	2301      	movs	r3, #1
 800456c:	e00f      	b.n	800458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <SysTick_Config+0x40>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004576:	210f      	movs	r1, #15
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f7ff ff8e 	bl	800449c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <SysTick_Config+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004586:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <SysTick_Config+0x40>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000e010 	.word	0xe000e010

0800459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff29 	bl	80043fc <__NVIC_SetPriorityGrouping>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045c0:	f7ff ff40 	bl	8004444 <__NVIC_GetPriorityGrouping>
 80045c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	6978      	ldr	r0, [r7, #20]
 80045cc:	f7ff ff90 	bl	80044f0 <NVIC_EncodePriority>
 80045d0:	4602      	mov	r2, r0
 80045d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff5f 	bl	800449c <__NVIC_SetPriority>
}
 80045de:	bf00      	nop
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	4603      	mov	r3, r0
 80045ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ff33 	bl	8004460 <__NVIC_EnableIRQ>
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ffa4 	bl	8004558 <SysTick_Config>
 8004610:	4603      	mov	r3, r0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e08d      	b.n	800474a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	4b47      	ldr	r3, [pc, #284]	@ (8004754 <HAL_DMA_Init+0x138>)
 8004636:	429a      	cmp	r2, r3
 8004638:	d80f      	bhi.n	800465a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	4b45      	ldr	r3, [pc, #276]	@ (8004758 <HAL_DMA_Init+0x13c>)
 8004642:	4413      	add	r3, r2
 8004644:	4a45      	ldr	r2, [pc, #276]	@ (800475c <HAL_DMA_Init+0x140>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	009a      	lsls	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a42      	ldr	r2, [pc, #264]	@ (8004760 <HAL_DMA_Init+0x144>)
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40
 8004658:	e00e      	b.n	8004678 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	4b40      	ldr	r3, [pc, #256]	@ (8004764 <HAL_DMA_Init+0x148>)
 8004662:	4413      	add	r3, r2
 8004664:	4a3d      	ldr	r2, [pc, #244]	@ (800475c <HAL_DMA_Init+0x140>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	009a      	lsls	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a3c      	ldr	r2, [pc, #240]	@ (8004768 <HAL_DMA_Init+0x14c>)
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800469c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa76 	bl	8004bbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046d8:	d102      	bne.n	80046e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_DMA_Init+0x104>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d80c      	bhi.n	8004720 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa96 	bl	8004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	e008      	b.n	8004732 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40020407 	.word	0x40020407
 8004758:	bffdfff8 	.word	0xbffdfff8
 800475c:	cccccccd 	.word	0xcccccccd
 8004760:	40020000 	.word	0x40020000
 8004764:	bffdfbf8 	.word	0xbffdfbf8
 8004768:	40020400 	.word	0x40020400

0800476c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_DMA_Start_IT+0x20>
 8004788:	2302      	movs	r3, #2
 800478a:	e066      	b.n	800485a <HAL_DMA_Start_IT+0xee>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d155      	bne.n	800484c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f9bb 	bl	8004b40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 020e 	orr.w	r2, r2, #14
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e00f      	b.n	8004804 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0204 	bic.w	r2, r2, #4
 80047f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 020a 	orr.w	r2, r2, #10
 8004802:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004820:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004838:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e005      	b.n	8004858 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004854:	2302      	movs	r3, #2
 8004856:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d005      	beq.n	8004886 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e037      	b.n	80048f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 020e 	bic.w	r2, r2, #14
 8004894:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	f003 021f 	and.w	r2, r3, #31
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2101      	movs	r1, #1
 80048c4:	fa01 f202 	lsl.w	r2, r1, r2
 80048c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d00d      	beq.n	8004948 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2204      	movs	r2, #4
 8004930:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
 8004946:	e047      	b.n	80049d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 020e 	bic.w	r2, r2, #14
 8004956:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004972:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	f003 021f 	and.w	r2, r3, #31
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f202 	lsl.w	r2, r1, r2
 800498a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004994:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
    }
  }
  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2204      	movs	r2, #4
 8004a04:	409a      	lsls	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d026      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x7a>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d021      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0204 	bic.w	r2, r2, #4
 8004a34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f003 021f 	and.w	r2, r3, #31
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2104      	movs	r1, #4
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d071      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a5a:	e06c      	b.n	8004b36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2202      	movs	r2, #2
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02e      	beq.n	8004ace <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d029      	beq.n	8004ace <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 020a 	bic.w	r2, r2, #10
 8004a96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	2102      	movs	r1, #2
 8004aae:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d038      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004acc:	e033      	b.n	8004b36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02a      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d025      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 020e 	bic.w	r2, r2, #14
 8004afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b00:	f003 021f 	and.w	r2, r3, #31
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
}
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f003 021f 	and.w	r2, r3, #31
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	2101      	movs	r1, #1
 8004b78:	fa01 f202 	lsl.w	r2, r1, r2
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d108      	bne.n	8004ba0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b9e:	e007      	b.n	8004bb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b16      	ldr	r3, [pc, #88]	@ (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d802      	bhi.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004bd0:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e001      	b.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bd8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b08      	subs	r3, #8
 8004be6:	4a12      	ldr	r2, [pc, #72]	@ (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	009a      	lsls	r2, r3, #2
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a0b      	ldr	r2, [pc, #44]	@ (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2201      	movs	r2, #1
 8004c10:	409a      	lsls	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40020407 	.word	0x40020407
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	40020820 	.word	0x40020820
 8004c30:	cccccccd 	.word	0xcccccccd
 8004c34:	40020880 	.word	0x40020880

08004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c5a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2201      	movs	r2, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	1000823f 	.word	0x1000823f
 8004c7c:	40020940 	.word	0x40020940

08004c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c8e:	e15a      	b.n	8004f46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 814c 	beq.w	8004f40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d005      	beq.n	8004cc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d130      	bne.n	8004d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2203      	movs	r2, #3
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0201 	and.w	r2, r3, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d017      	beq.n	8004d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	2203      	movs	r2, #3
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d123      	bne.n	8004db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	08da      	lsrs	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3208      	adds	r2, #8
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3208      	adds	r2, #8
 8004dac:	6939      	ldr	r1, [r7, #16]
 8004dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80a6 	beq.w	8004f40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df4:	4b5b      	ldr	r3, [pc, #364]	@ (8004f64 <HAL_GPIO_Init+0x2e4>)
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f64 <HAL_GPIO_Init+0x2e4>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e00:	4b58      	ldr	r3, [pc, #352]	@ (8004f64 <HAL_GPIO_Init+0x2e4>)
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e0c:	4a56      	ldr	r2, [pc, #344]	@ (8004f68 <HAL_GPIO_Init+0x2e8>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	220f      	movs	r2, #15
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e36:	d01f      	beq.n	8004e78 <HAL_GPIO_Init+0x1f8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a4c      	ldr	r2, [pc, #304]	@ (8004f6c <HAL_GPIO_Init+0x2ec>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d019      	beq.n	8004e74 <HAL_GPIO_Init+0x1f4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a4b      	ldr	r2, [pc, #300]	@ (8004f70 <HAL_GPIO_Init+0x2f0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <HAL_GPIO_Init+0x1f0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f74 <HAL_GPIO_Init+0x2f4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00d      	beq.n	8004e6c <HAL_GPIO_Init+0x1ec>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a49      	ldr	r2, [pc, #292]	@ (8004f78 <HAL_GPIO_Init+0x2f8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <HAL_GPIO_Init+0x1e8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a48      	ldr	r2, [pc, #288]	@ (8004f7c <HAL_GPIO_Init+0x2fc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d101      	bne.n	8004e64 <HAL_GPIO_Init+0x1e4>
 8004e60:	2305      	movs	r3, #5
 8004e62:	e00a      	b.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e64:	2306      	movs	r3, #6
 8004e66:	e008      	b.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	e006      	b.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e004      	b.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e002      	b.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	f002 0203 	and.w	r2, r2, #3
 8004e80:	0092      	lsls	r2, r2, #2
 8004e82:	4093      	lsls	r3, r2
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e8a:	4937      	ldr	r1, [pc, #220]	@ (8004f68 <HAL_GPIO_Init+0x2e8>)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	3302      	adds	r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e98:	4b39      	ldr	r3, [pc, #228]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ebc:	4a30      	ldr	r2, [pc, #192]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ee6:	4a26      	ldr	r2, [pc, #152]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004eec:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f10:	4a1b      	ldr	r2, [pc, #108]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f3a:	4a11      	ldr	r2, [pc, #68]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3301      	adds	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f ae9d 	bne.w	8004c90 <HAL_GPIO_Init+0x10>
  }
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	48000400 	.word	0x48000400
 8004f70:	48000800 	.word	0x48000800
 8004f74:	48000c00 	.word	0x48000c00
 8004f78:	48001000 	.word	0x48001000
 8004f7c:	48001400 	.word	0x48001400
 8004f80:	40010400 	.word	0x40010400

08004f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d141      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffe:	d131      	bne.n	8005064 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005000:	4b47      	ldr	r3, [pc, #284]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005006:	4a46      	ldr	r2, [pc, #280]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800500c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005010:	4b43      	ldr	r3, [pc, #268]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005018:	4a41      	ldr	r2, [pc, #260]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800501e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005020:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2232      	movs	r2, #50	@ 0x32
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	4a3f      	ldr	r2, [pc, #252]	@ (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	0c9b      	lsrs	r3, r3, #18
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005036:	e002      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800503e:	4b38      	ldr	r3, [pc, #224]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d102      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f2      	bne.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005052:	4b33      	ldr	r3, [pc, #204]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505e:	d158      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e057      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005064:	4b2e      	ldr	r3, [pc, #184]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506a:	4a2d      	ldr	r2, [pc, #180]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005074:	e04d      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507c:	d141      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d131      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005092:	4a23      	ldr	r2, [pc, #140]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800509c:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2232      	movs	r2, #50	@ 0x32
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c2:	e002      	b.n	80050ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ca:	4b15      	ldr	r3, [pc, #84]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d102      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f2      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ea:	d112      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e011      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005100:	e007      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005102:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800510a:	4a05      	ldr	r2, [pc, #20]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005110:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40007000 	.word	0x40007000
 8005124:	20000240 	.word	0x20000240
 8005128:	431bde83 	.word	0x431bde83

0800512c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a04      	ldr	r2, [pc, #16]	@ (8005148 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800513a:	6093      	str	r3, [r2, #8]
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40007000 	.word	0x40007000

0800514c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e2fe      	b.n	800575c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d075      	beq.n	8005256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800516a:	4b97      	ldr	r3, [pc, #604]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005174:	4b94      	ldr	r3, [pc, #592]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d102      	bne.n	800518a <HAL_RCC_OscConfig+0x3e>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b03      	cmp	r3, #3
 8005188:	d002      	beq.n	8005190 <HAL_RCC_OscConfig+0x44>
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d10b      	bne.n	80051a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	4b8d      	ldr	r3, [pc, #564]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d05b      	beq.n	8005254 <HAL_RCC_OscConfig+0x108>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d157      	bne.n	8005254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e2d9      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b0:	d106      	bne.n	80051c0 <HAL_RCC_OscConfig+0x74>
 80051b2:	4b85      	ldr	r3, [pc, #532]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a84      	ldr	r2, [pc, #528]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e01d      	b.n	80051fc <HAL_RCC_OscConfig+0xb0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x98>
 80051ca:	4b7f      	ldr	r3, [pc, #508]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b7c      	ldr	r3, [pc, #496]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a7b      	ldr	r2, [pc, #492]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e00b      	b.n	80051fc <HAL_RCC_OscConfig+0xb0>
 80051e4:	4b78      	ldr	r3, [pc, #480]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a77      	ldr	r2, [pc, #476]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	4b75      	ldr	r3, [pc, #468]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a74      	ldr	r2, [pc, #464]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d013      	beq.n	800522c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7ff f8ee 	bl	80043e4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800520c:	f7ff f8ea 	bl	80043e4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	@ 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e29e      	b.n	800575c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521e:	4b6a      	ldr	r3, [pc, #424]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0xc0>
 800522a:	e014      	b.n	8005256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7ff f8da 	bl	80043e4 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005234:	f7ff f8d6 	bl	80043e4 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	@ 0x64
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e28a      	b.n	800575c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005246:	4b60      	ldr	r3, [pc, #384]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0xe8>
 8005252:	e000      	b.n	8005256 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d075      	beq.n	800534e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005262:	4b59      	ldr	r3, [pc, #356]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800526c:	4b56      	ldr	r3, [pc, #344]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d102      	bne.n	8005282 <HAL_RCC_OscConfig+0x136>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d002      	beq.n	8005288 <HAL_RCC_OscConfig+0x13c>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d11f      	bne.n	80052c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005288:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_OscConfig+0x154>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e25d      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a0:	4b49      	ldr	r3, [pc, #292]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	4946      	ldr	r1, [pc, #280]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052b4:	4b45      	ldr	r3, [pc, #276]	@ (80053cc <HAL_RCC_OscConfig+0x280>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff f847 	bl	800434c <HAL_InitTick>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d043      	beq.n	800534c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e249      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d023      	beq.n	8005318 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d0:	4b3d      	ldr	r3, [pc, #244]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3c      	ldr	r2, [pc, #240]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7ff f882 	bl	80043e4 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e4:	f7ff f87e 	bl	80043e4 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e232      	b.n	800575c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f6:	4b34      	ldr	r3, [pc, #208]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	061b      	lsls	r3, r3, #24
 8005310:	492d      	ldr	r1, [pc, #180]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]
 8005316:	e01a      	b.n	800534e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005318:	4b2b      	ldr	r3, [pc, #172]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2a      	ldr	r2, [pc, #168]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800531e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7ff f85e 	bl	80043e4 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532c:	f7ff f85a 	bl	80043e4 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e20e      	b.n	800575c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533e:	4b22      	ldr	r3, [pc, #136]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x1e0>
 800534a:	e000      	b.n	800534e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800534c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d041      	beq.n	80053de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01c      	beq.n	800539c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005362:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005368:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005372:	f7ff f837 	bl	80043e4 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800537a:	f7ff f833 	bl	80043e4 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1e7      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800538c:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ef      	beq.n	800537a <HAL_RCC_OscConfig+0x22e>
 800539a:	e020      	b.n	80053de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 800539e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a2:	4a09      	ldr	r2, [pc, #36]	@ (80053c8 <HAL_RCC_OscConfig+0x27c>)
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7ff f81a 	bl	80043e4 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053b2:	e00d      	b.n	80053d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b4:	f7ff f816 	bl	80043e4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d906      	bls.n	80053d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1ca      	b.n	800575c <HAL_RCC_OscConfig+0x610>
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
 80053cc:	20000244 	.word	0x20000244
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80053d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ea      	bne.n	80053b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80a6 	beq.w	8005538 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ec:	2300      	movs	r3, #0
 80053ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053f0:	4b84      	ldr	r3, [pc, #528]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_OscConfig+0x2b4>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x2b6>
 8005400:	2300      	movs	r3, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	4b7f      	ldr	r3, [pc, #508]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540a:	4a7e      	ldr	r2, [pc, #504]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005410:	6593      	str	r3, [r2, #88]	@ 0x58
 8005412:	4b7c      	ldr	r3, [pc, #496]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800541e:	2301      	movs	r3, #1
 8005420:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005422:	4b79      	ldr	r3, [pc, #484]	@ (8005608 <HAL_RCC_OscConfig+0x4bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d118      	bne.n	8005460 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542e:	4b76      	ldr	r3, [pc, #472]	@ (8005608 <HAL_RCC_OscConfig+0x4bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a75      	ldr	r2, [pc, #468]	@ (8005608 <HAL_RCC_OscConfig+0x4bc>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543a:	f7fe ffd3 	bl	80043e4 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005442:	f7fe ffcf 	bl	80043e4 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e183      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005454:	4b6c      	ldr	r3, [pc, #432]	@ (8005608 <HAL_RCC_OscConfig+0x4bc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d108      	bne.n	800547a <HAL_RCC_OscConfig+0x32e>
 8005468:	4b66      	ldr	r3, [pc, #408]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546e:	4a65      	ldr	r2, [pc, #404]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005478:	e024      	b.n	80054c4 <HAL_RCC_OscConfig+0x378>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b05      	cmp	r3, #5
 8005480:	d110      	bne.n	80054a4 <HAL_RCC_OscConfig+0x358>
 8005482:	4b60      	ldr	r3, [pc, #384]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	4a5e      	ldr	r2, [pc, #376]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f043 0304 	orr.w	r3, r3, #4
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005492:	4b5c      	ldr	r3, [pc, #368]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005498:	4a5a      	ldr	r2, [pc, #360]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a2:	e00f      	b.n	80054c4 <HAL_RCC_OscConfig+0x378>
 80054a4:	4b57      	ldr	r3, [pc, #348]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a56      	ldr	r2, [pc, #344]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054b4:	4b53      	ldr	r3, [pc, #332]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ba:	4a52      	ldr	r2, [pc, #328]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f023 0304 	bic.w	r3, r3, #4
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d016      	beq.n	80054fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fe ff8a 	bl	80043e4 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d4:	f7fe ff86 	bl	80043e4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e138      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ea:	4b46      	ldr	r3, [pc, #280]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ed      	beq.n	80054d4 <HAL_RCC_OscConfig+0x388>
 80054f8:	e015      	b.n	8005526 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fe ff73 	bl	80043e4 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005500:	e00a      	b.n	8005518 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005502:	f7fe ff6f 	bl	80043e4 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e121      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005518:	4b3a      	ldr	r3, [pc, #232]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1ed      	bne.n	8005502 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005526:	7ffb      	ldrb	r3, [r7, #31]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d105      	bne.n	8005538 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552c:	4b35      	ldr	r3, [pc, #212]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005530:	4a34      	ldr	r2, [pc, #208]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005536:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d03c      	beq.n	80055be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01c      	beq.n	8005586 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800554c:	4b2d      	ldr	r3, [pc, #180]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800554e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005552:	4a2c      	ldr	r2, [pc, #176]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fe ff42 	bl	80043e4 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005564:	f7fe ff3e 	bl	80043e4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0f2      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005576:	4b23      	ldr	r3, [pc, #140]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ef      	beq.n	8005564 <HAL_RCC_OscConfig+0x418>
 8005584:	e01b      	b.n	80055be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005586:	4b1f      	ldr	r3, [pc, #124]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558c:	4a1d      	ldr	r2, [pc, #116]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fe ff25 	bl	80043e4 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559e:	f7fe ff21 	bl	80043e4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e0d5      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055b0:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80055b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ef      	bne.n	800559e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 80c9 	beq.w	800575a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 030c 	and.w	r3, r3, #12
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	f000 8083 	beq.w	80056dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d15e      	bne.n	800569c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055de:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a08      	ldr	r2, [pc, #32]	@ (8005604 <HAL_RCC_OscConfig+0x4b8>)
 80055e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fe fefb 	bl	80043e4 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f0:	e00c      	b.n	800560c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fe fef7 	bl	80043e4 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d905      	bls.n	800560c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e0ab      	b.n	800575c <HAL_RCC_OscConfig+0x610>
 8005604:	40021000 	.word	0x40021000
 8005608:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800560c:	4b55      	ldr	r3, [pc, #340]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ec      	bne.n	80055f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005618:	4b52      	ldr	r3, [pc, #328]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	4b52      	ldr	r3, [pc, #328]	@ (8005768 <HAL_RCC_OscConfig+0x61c>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6a11      	ldr	r1, [r2, #32]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005628:	3a01      	subs	r2, #1
 800562a:	0112      	lsls	r2, r2, #4
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005632:	0212      	lsls	r2, r2, #8
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800563a:	0852      	lsrs	r2, r2, #1
 800563c:	3a01      	subs	r2, #1
 800563e:	0552      	lsls	r2, r2, #21
 8005640:	4311      	orrs	r1, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005646:	0852      	lsrs	r2, r2, #1
 8005648:	3a01      	subs	r2, #1
 800564a:	0652      	lsls	r2, r2, #25
 800564c:	4311      	orrs	r1, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005652:	06d2      	lsls	r2, r2, #27
 8005654:	430a      	orrs	r2, r1
 8005656:	4943      	ldr	r1, [pc, #268]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 8005658:	4313      	orrs	r3, r2
 800565a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800565c:	4b41      	ldr	r3, [pc, #260]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a40      	ldr	r2, [pc, #256]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 8005662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005666:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005668:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a3d      	ldr	r2, [pc, #244]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 800566e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005672:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fe feb6 	bl	80043e4 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fe feb2 	bl	80043e4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e066      	b.n	800575c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568e:	4b35      	ldr	r3, [pc, #212]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x530>
 800569a:	e05e      	b.n	800575a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569c:	4b31      	ldr	r3, [pc, #196]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a30      	ldr	r2, [pc, #192]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 80056a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fe fe9c 	bl	80043e4 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b0:	f7fe fe98 	bl	80043e4 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e04c      	b.n	800575c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c2:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056ce:	4b25      	ldr	r3, [pc, #148]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	4924      	ldr	r1, [pc, #144]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 80056d4:	4b25      	ldr	r3, [pc, #148]	@ (800576c <HAL_RCC_OscConfig+0x620>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	60cb      	str	r3, [r1, #12]
 80056da:	e03e      	b.n	800575a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e039      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <HAL_RCC_OscConfig+0x618>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f003 0203 	and.w	r2, r3, #3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d12c      	bne.n	8005756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	3b01      	subs	r3, #1
 8005708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d123      	bne.n	8005756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d11b      	bne.n	8005756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d113      	bne.n	8005756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	3b01      	subs	r3, #1
 800573c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d109      	bne.n	8005756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	3b01      	subs	r3, #1
 8005750:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d001      	beq.n	800575a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40021000 	.word	0x40021000
 8005768:	019f800c 	.word	0x019f800c
 800576c:	feeefffc 	.word	0xfeeefffc

08005770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e11e      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	4b91      	ldr	r3, [pc, #580]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d910      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	4b8e      	ldr	r3, [pc, #568]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 020f 	bic.w	r2, r3, #15
 800579e:	498c      	ldr	r1, [pc, #560]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b8a      	ldr	r3, [pc, #552]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e106      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d073      	beq.n	80058ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d129      	bne.n	8005820 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057cc:	4b81      	ldr	r3, [pc, #516]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0f4      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057dc:	f000 f99e 	bl	8005b1c <RCC_GetSysClockFreqFromPLLSource>
 80057e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4a7c      	ldr	r2, [pc, #496]	@ (80059d8 <HAL_RCC_ClockConfig+0x268>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d93f      	bls.n	800586a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057ea:	4b7a      	ldr	r3, [pc, #488]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d033      	beq.n	800586a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005806:	2b00      	cmp	r3, #0
 8005808:	d12f      	bne.n	800586a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800580a:	4b72      	ldr	r3, [pc, #456]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005812:	4a70      	ldr	r2, [pc, #448]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005818:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e024      	b.n	800586a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d107      	bne.n	8005838 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005828:	4b6a      	ldr	r3, [pc, #424]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0c6      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005838:	4b66      	ldr	r3, [pc, #408]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0be      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005848:	f000 f8ce 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 800584c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4a61      	ldr	r2, [pc, #388]	@ (80059d8 <HAL_RCC_ClockConfig+0x268>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d909      	bls.n	800586a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005856:	4b5f      	ldr	r3, [pc, #380]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800585e:	4a5d      	ldr	r2, [pc, #372]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005864:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800586a:	4b5a      	ldr	r3, [pc, #360]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f023 0203 	bic.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4957      	ldr	r1, [pc, #348]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005878:	4313      	orrs	r3, r2
 800587a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587c:	f7fe fdb2 	bl	80043e4 <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	e00a      	b.n	800589a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005884:	f7fe fdae 	bl	80043e4 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d901      	bls.n	800589a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e095      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589a:	4b4e      	ldr	r3, [pc, #312]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 020c 	and.w	r2, r3, #12
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d1eb      	bne.n	8005884 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d023      	beq.n	8005900 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b43      	ldr	r3, [pc, #268]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a42      	ldr	r2, [pc, #264]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80058ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058dc:	4b3d      	ldr	r3, [pc, #244]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058e4:	4a3b      	ldr	r2, [pc, #236]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80058e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ec:	4b39      	ldr	r3, [pc, #228]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4936      	ldr	r1, [pc, #216]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
 80058fe:	e008      	b.n	8005912 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d105      	bne.n	8005912 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005906:	4b33      	ldr	r3, [pc, #204]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	4a32      	ldr	r2, [pc, #200]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800590c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005910:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005912:	4b2f      	ldr	r3, [pc, #188]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d21d      	bcs.n	800595c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005920:	4b2b      	ldr	r3, [pc, #172]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 020f 	bic.w	r2, r3, #15
 8005928:	4929      	ldr	r1, [pc, #164]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005930:	f7fe fd58 	bl	80043e4 <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	e00a      	b.n	800594e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005938:	f7fe fd54 	bl	80043e4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e03b      	b.n	80059c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594e:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <HAL_RCC_ClockConfig+0x260>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d1ed      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005968:	4b1a      	ldr	r3, [pc, #104]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4917      	ldr	r1, [pc, #92]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005986:	4b13      	ldr	r3, [pc, #76]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	490f      	ldr	r1, [pc, #60]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800599a:	f000 f825 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b0c      	ldr	r3, [pc, #48]	@ (80059d4 <HAL_RCC_ClockConfig+0x264>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	490c      	ldr	r1, [pc, #48]	@ (80059dc <HAL_RCC_ClockConfig+0x26c>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	4a0a      	ldr	r2, [pc, #40]	@ (80059e0 <HAL_RCC_ClockConfig+0x270>)
 80059b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059ba:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <HAL_RCC_ClockConfig+0x274>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fcc4 	bl	800434c <HAL_InitTick>
 80059c4:	4603      	mov	r3, r0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40022000 	.word	0x40022000
 80059d4:	40021000 	.word	0x40021000
 80059d8:	04c4b400 	.word	0x04c4b400
 80059dc:	0800aef0 	.word	0x0800aef0
 80059e0:	20000240 	.word	0x20000240
 80059e4:	20000244 	.word	0x20000244

080059e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059ee:	4b2c      	ldr	r3, [pc, #176]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d102      	bne.n	8005a00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059fa:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e047      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a00:	4b27      	ldr	r3, [pc, #156]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d102      	bne.n	8005a12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a0c:	4b26      	ldr	r3, [pc, #152]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e03e      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a12:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d136      	bne.n	8005a8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a1e:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a28:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	3301      	adds	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d10c      	bne.n	8005a56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	4a16      	ldr	r2, [pc, #88]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a46:	68d2      	ldr	r2, [r2, #12]
 8005a48:	0a12      	lsrs	r2, r2, #8
 8005a4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	617b      	str	r3, [r7, #20]
      break;
 8005a54:	e00c      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a56:	4a13      	ldr	r2, [pc, #76]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	4a10      	ldr	r2, [pc, #64]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a60:	68d2      	ldr	r2, [r2, #12]
 8005a62:	0a12      	lsrs	r2, r2, #8
 8005a64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a68:	fb02 f303 	mul.w	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]
      break;
 8005a6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a70:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	0e5b      	lsrs	r3, r3, #25
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	e001      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a90:	693b      	ldr	r3, [r7, #16]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	016e3600 	.word	0x016e3600

08005aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	@ (8005ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000240 	.word	0x20000240

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ac8:	f7ff fff0 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4904      	ldr	r1, [pc, #16]	@ (8005aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	0800af00 	.word	0x0800af00

08005af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005af4:	f7ff ffda 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0adb      	lsrs	r3, r3, #11
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000
 8005b18:	0800af00 	.word	0x0800af00

08005b1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10c      	bne.n	8005b5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b40:	4a17      	ldr	r2, [pc, #92]	@ (8005ba0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	0a12      	lsrs	r2, r2, #8
 8005b4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	617b      	str	r3, [r7, #20]
    break;
 8005b58:	e00c      	b.n	8005b74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a0e      	ldr	r2, [pc, #56]	@ (8005b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	0a12      	lsrs	r2, r2, #8
 8005b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
    break;
 8005b72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	0e5b      	lsrs	r3, r3, #25
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b8e:	687b      	ldr	r3, [r7, #4]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	016e3600 	.word	0x016e3600
 8005ba4:	00f42400 	.word	0x00f42400

08005ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8098 	beq.w	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bca:	4b43      	ldr	r3, [pc, #268]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10d      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd6:	4b40      	ldr	r3, [pc, #256]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bda:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a39      	ldr	r2, [pc, #228]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bfe:	f7fe fbf1 	bl	80043e4 <HAL_GetTick>
 8005c02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c04:	e009      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c06:	f7fe fbed 	bl	80043e4 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d902      	bls.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	74fb      	strb	r3, [r7, #19]
        break;
 8005c18:	e005      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c1a:	4b30      	ldr	r3, [pc, #192]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0ef      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c26:	7cfb      	ldrb	r3, [r7, #19]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d159      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01e      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d019      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c48:	4b23      	ldr	r3, [pc, #140]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c54:	4b20      	ldr	r3, [pc, #128]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c64:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c74:	4a18      	ldr	r2, [pc, #96]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d016      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fe fbad 	bl	80043e4 <HAL_GetTick>
 8005c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8c:	e00b      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8e:	f7fe fba9 	bl	80043e4 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d902      	bls.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0ec      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cb4:	7cfb      	ldrb	r3, [r7, #19]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cba:	4b07      	ldr	r3, [pc, #28]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc8:	4903      	ldr	r1, [pc, #12]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
 8005cd4:	74bb      	strb	r3, [r7, #18]
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ce4:	7c7b      	ldrb	r3, [r7, #17]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d105      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cea:	4ba7      	ldr	r3, [pc, #668]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cee:	4aa6      	ldr	r2, [pc, #664]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cf4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d02:	4ba1      	ldr	r3, [pc, #644]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d08:	f023 0203 	bic.w	r2, r3, #3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	499d      	ldr	r1, [pc, #628]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d24:	4b98      	ldr	r3, [pc, #608]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2a:	f023 020c 	bic.w	r2, r3, #12
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	4995      	ldr	r1, [pc, #596]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d46:	4b90      	ldr	r3, [pc, #576]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	498c      	ldr	r1, [pc, #560]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d68:	4b87      	ldr	r3, [pc, #540]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	4984      	ldr	r1, [pc, #528]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	497b      	ldr	r1, [pc, #492]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dac:	4b76      	ldr	r3, [pc, #472]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	4973      	ldr	r1, [pc, #460]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dce:	4b6e      	ldr	r3, [pc, #440]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	496a      	ldr	r1, [pc, #424]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005df0:	4b65      	ldr	r3, [pc, #404]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	4962      	ldr	r1, [pc, #392]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e12:	4b5d      	ldr	r3, [pc, #372]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e20:	4959      	ldr	r1, [pc, #356]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e34:	4b54      	ldr	r3, [pc, #336]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e3a:	f023 0203 	bic.w	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	4951      	ldr	r1, [pc, #324]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e56:	4b4c      	ldr	r3, [pc, #304]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	4948      	ldr	r1, [pc, #288]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e78:	4b43      	ldr	r3, [pc, #268]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	4940      	ldr	r1, [pc, #256]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e98:	4b3b      	ldr	r3, [pc, #236]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a3a      	ldr	r2, [pc, #232]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ea2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005eb0:	4b35      	ldr	r3, [pc, #212]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebe:	4932      	ldr	r1, [pc, #200]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ece:	d105      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ee8:	4b27      	ldr	r3, [pc, #156]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	4924      	ldr	r1, [pc, #144]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f08:	4b1f      	ldr	r3, [pc, #124]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f20:	4b19      	ldr	r3, [pc, #100]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2e:	4916      	ldr	r1, [pc, #88]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f40:	4b11      	ldr	r3, [pc, #68]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a10      	ldr	r2, [pc, #64]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d019      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f58:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	4908      	ldr	r1, [pc, #32]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f76:	d109      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f78:	4b03      	ldr	r3, [pc, #12]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a02      	ldr	r2, [pc, #8]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f82:	60d3      	str	r3, [r2, #12]
 8005f84:	e002      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d015      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f98:	4b29      	ldr	r3, [pc, #164]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa6:	4926      	ldr	r1, [pc, #152]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fb8:	4b21      	ldr	r3, [pc, #132]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4a20      	ldr	r2, [pc, #128]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fde:	4918      	ldr	r1, [pc, #96]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fee:	d105      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ff0:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a12      	ldr	r2, [pc, #72]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d015      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006008:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800600e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006016:	490a      	ldr	r1, [pc, #40]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006026:	d105      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006028:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4a04      	ldr	r2, [pc, #16]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006032:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006034:	7cbb      	ldrb	r3, [r7, #18]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000

08006044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e054      	b.n	8006100 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d111      	bne.n	8006086 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 feec 	bl	8007e48 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a23      	ldr	r2, [pc, #140]	@ (8006108 <HAL_TIM_Base_Init+0xc4>)
 800607c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f001 fa35 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	08003d65 	.word	0x08003d65

0800610c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d001      	beq.n	8006124 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e04c      	b.n	80061be <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a26      	ldr	r2, [pc, #152]	@ (80061cc <HAL_TIM_Base_Start+0xc0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800613e:	d01d      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <HAL_TIM_Base_Start+0xc4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a21      	ldr	r2, [pc, #132]	@ (80061d4 <HAL_TIM_Base_Start+0xc8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1f      	ldr	r2, [pc, #124]	@ (80061d8 <HAL_TIM_Base_Start+0xcc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1e      	ldr	r2, [pc, #120]	@ (80061dc <HAL_TIM_Base_Start+0xd0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <HAL_TIM_Base_Start+0xd4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIM_Base_Start+0x70>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <HAL_TIM_Base_Start+0xd8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d115      	bne.n	80061a8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_TIM_Base_Start+0xdc>)
 8006184:	4013      	ands	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b06      	cmp	r3, #6
 800618c:	d015      	beq.n	80061ba <HAL_TIM_Base_Start+0xae>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006194:	d011      	beq.n	80061ba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a6:	e008      	b.n	80061ba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e000      	b.n	80061bc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40013400 	.word	0x40013400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40015000 	.word	0x40015000
 80061e8:	00010007 	.word	0x00010007

080061ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d001      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e054      	b.n	80062ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a26      	ldr	r2, [pc, #152]	@ (80062bc <HAL_TIM_Base_Start_IT+0xd0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622e:	d01d      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a22      	ldr	r2, [pc, #136]	@ (80062c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a21      	ldr	r2, [pc, #132]	@ (80062c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1f      	ldr	r2, [pc, #124]	@ (80062c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1e      	ldr	r2, [pc, #120]	@ (80062cc <HAL_TIM_Base_Start_IT+0xe0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1c      	ldr	r2, [pc, #112]	@ (80062d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x80>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d115      	bne.n	8006298 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	4b19      	ldr	r3, [pc, #100]	@ (80062d8 <HAL_TIM_Base_Start_IT+0xec>)
 8006274:	4013      	ands	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b06      	cmp	r3, #6
 800627c:	d015      	beq.n	80062aa <HAL_TIM_Base_Start_IT+0xbe>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006284:	d011      	beq.n	80062aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006296:	e008      	b.n	80062aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e000      	b.n	80062ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40013400 	.word	0x40013400
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40015000 	.word	0x40015000
 80062d8:	00010007 	.word	0x00010007

080062dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e054      	b.n	8006398 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d111      	bne.n	800631e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fda0 	bl	8007e48 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a23      	ldr	r2, [pc, #140]	@ (80063a0 <HAL_TIM_PWM_Init+0xc4>)
 8006314:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3304      	adds	r3, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f001 f8e9 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	080063a5 	.word	0x080063a5

080063a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d109      	bne.n	80063dc <HAL_TIM_PWM_Start+0x24>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e03c      	b.n	8006456 <HAL_TIM_PWM_Start+0x9e>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d109      	bne.n	80063f6 <HAL_TIM_PWM_Start+0x3e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	bf14      	ite	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	2300      	moveq	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	e02f      	b.n	8006456 <HAL_TIM_PWM_Start+0x9e>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d109      	bne.n	8006410 <HAL_TIM_PWM_Start+0x58>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	bf14      	ite	ne
 8006408:	2301      	movne	r3, #1
 800640a:	2300      	moveq	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e022      	b.n	8006456 <HAL_TIM_PWM_Start+0x9e>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b0c      	cmp	r3, #12
 8006414:	d109      	bne.n	800642a <HAL_TIM_PWM_Start+0x72>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	e015      	b.n	8006456 <HAL_TIM_PWM_Start+0x9e>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b10      	cmp	r3, #16
 800642e:	d109      	bne.n	8006444 <HAL_TIM_PWM_Start+0x8c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e008      	b.n	8006456 <HAL_TIM_PWM_Start+0x9e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e0a6      	b.n	80065ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <HAL_TIM_PWM_Start+0xb6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800646c:	e023      	b.n	80064b6 <HAL_TIM_PWM_Start+0xfe>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b04      	cmp	r3, #4
 8006472:	d104      	bne.n	800647e <HAL_TIM_PWM_Start+0xc6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800647c:	e01b      	b.n	80064b6 <HAL_TIM_PWM_Start+0xfe>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d104      	bne.n	800648e <HAL_TIM_PWM_Start+0xd6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800648c:	e013      	b.n	80064b6 <HAL_TIM_PWM_Start+0xfe>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	d104      	bne.n	800649e <HAL_TIM_PWM_Start+0xe6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800649c:	e00b      	b.n	80064b6 <HAL_TIM_PWM_Start+0xfe>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Start+0xf6>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ac:	e003      	b.n	80064b6 <HAL_TIM_PWM_Start+0xfe>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2201      	movs	r2, #1
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fc9c 	bl	8007dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3a      	ldr	r2, [pc, #232]	@ (80065b4 <HAL_TIM_PWM_Start+0x1fc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d018      	beq.n	8006500 <HAL_TIM_PWM_Start+0x148>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a39      	ldr	r2, [pc, #228]	@ (80065b8 <HAL_TIM_PWM_Start+0x200>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_TIM_PWM_Start+0x148>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a37      	ldr	r2, [pc, #220]	@ (80065bc <HAL_TIM_PWM_Start+0x204>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_TIM_PWM_Start+0x148>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a36      	ldr	r2, [pc, #216]	@ (80065c0 <HAL_TIM_PWM_Start+0x208>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIM_PWM_Start+0x148>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a34      	ldr	r2, [pc, #208]	@ (80065c4 <HAL_TIM_PWM_Start+0x20c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_PWM_Start+0x148>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a33      	ldr	r2, [pc, #204]	@ (80065c8 <HAL_TIM_PWM_Start+0x210>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_PWM_Start+0x14c>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <HAL_TIM_PWM_Start+0x14e>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a25      	ldr	r2, [pc, #148]	@ (80065b4 <HAL_TIM_PWM_Start+0x1fc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652c:	d01d      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a26      	ldr	r2, [pc, #152]	@ (80065cc <HAL_TIM_PWM_Start+0x214>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a24      	ldr	r2, [pc, #144]	@ (80065d0 <HAL_TIM_PWM_Start+0x218>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a23      	ldr	r2, [pc, #140]	@ (80065d4 <HAL_TIM_PWM_Start+0x21c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a19      	ldr	r2, [pc, #100]	@ (80065b8 <HAL_TIM_PWM_Start+0x200>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	@ (80065bc <HAL_TIM_PWM_Start+0x204>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_TIM_PWM_Start+0x1b2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a18      	ldr	r2, [pc, #96]	@ (80065c8 <HAL_TIM_PWM_Start+0x210>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d115      	bne.n	8006596 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	4b19      	ldr	r3, [pc, #100]	@ (80065d8 <HAL_TIM_PWM_Start+0x220>)
 8006572:	4013      	ands	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b06      	cmp	r3, #6
 800657a:	d015      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x1f0>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006582:	d011      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006594:	e008      	b.n	80065a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e000      	b.n	80065aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800
 80065c8:	40015000 	.word	0x40015000
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	00010007 	.word	0x00010007

080065dc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e04c      	b.n	800668a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d111      	bne.n	8006620 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fc1f 	bl	8007e48 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1f      	ldr	r2, [pc, #124]	@ (8006694 <HAL_TIM_OnePulse_Init+0xb8>)
 8006616:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f000 ff68 	bl	8007508 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0208 	bic.w	r2, r2, #8
 8006646:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6819      	ldr	r1, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	08006699 	.word	0x08006699

08006698 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066d4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d108      	bne.n	80066ee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d105      	bne.n	80066ee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e2:	7b7b      	ldrb	r3, [r7, #13]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d102      	bne.n	80066ee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066e8:	7b3b      	ldrb	r3, [r7, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d001      	beq.n	80066f2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e059      	b.n	80067a6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0202 	orr.w	r2, r2, #2
 8006720:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0204 	orr.w	r2, r2, #4
 8006730:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fb5e 	bl	8007dfc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	2104      	movs	r1, #4
 8006748:	4618      	mov	r0, r3
 800674a:	f001 fb57 	bl	8007dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d018      	beq.n	800678a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a15      	ldr	r2, [pc, #84]	@ (80067b4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a14      	ldr	r2, [pc, #80]	@ (80067b8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00e      	beq.n	800678a <HAL_TIM_OnePulse_Start_IT+0xde>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a11      	ldr	r2, [pc, #68]	@ (80067c0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0f      	ldr	r2, [pc, #60]	@ (80067c4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800
 80067c4:	40015000 	.word	0x40015000

080067c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0a2      	b.n	8006922 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d111      	bne.n	800680c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fb29 	bl	8007e48 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a4a      	ldr	r2, [pc, #296]	@ (800692c <HAL_TIM_Encoder_Init+0x164>)
 8006802:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f000 fe68 	bl	8007508 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	4313      	orrs	r3, r2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800687e:	f023 030c 	bic.w	r3, r3, #12
 8006882:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800688a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800688e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	4313      	orrs	r3, r2
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	011a      	lsls	r2, r3, #4
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	031b      	lsls	r3, r3, #12
 80068ae:	4313      	orrs	r3, r2
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80068bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80068c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4313      	orrs	r3, r2
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	08003e6d 	.word	0x08003e6d

08006930 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006940:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006948:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006950:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006958:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d110      	bne.n	8006982 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d102      	bne.n	800696c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006966:	7b7b      	ldrb	r3, [r7, #13]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d001      	beq.n	8006970 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e069      	b.n	8006a44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006980:	e031      	b.n	80069e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d110      	bne.n	80069aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d102      	bne.n	8006994 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800698e:	7b3b      	ldrb	r3, [r7, #12]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d001      	beq.n	8006998 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e055      	b.n	8006a44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069a8:	e01d      	b.n	80069e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d108      	bne.n	80069c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d105      	bne.n	80069c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069b6:	7b7b      	ldrb	r3, [r7, #13]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d102      	bne.n	80069c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069bc:	7b3b      	ldrb	r3, [r7, #12]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d001      	beq.n	80069c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e03e      	b.n	8006a44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2202      	movs	r2, #2
 80069d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_TIM_Encoder_Start+0xc4>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d008      	beq.n	8006a04 <HAL_TIM_Encoder_Start+0xd4>
 80069f2:	e00f      	b.n	8006a14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2201      	movs	r2, #1
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 f9fd 	bl	8007dfc <TIM_CCxChannelCmd>
      break;
 8006a02:	e016      	b.n	8006a32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f9f5 	bl	8007dfc <TIM_CCxChannelCmd>
      break;
 8006a12:	e00e      	b.n	8006a32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f001 f9ed 	bl	8007dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	2104      	movs	r1, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 f9e6 	bl	8007dfc <TIM_CCxChannelCmd>
      break;
 8006a30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0201 	orr.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d026      	beq.n	8006abc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d021      	beq.n	8006abc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0202 	mvn.w	r2, #2
 8006a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
 8006aa0:	e009      	b.n	8006ab6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d026      	beq.n	8006b14 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d021      	beq.n	8006b14 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0204 	mvn.w	r2, #4
 8006ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
 8006af8:	e009      	b.n	8006b0e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d026      	beq.n	8006b6c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d021      	beq.n	8006b6c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0208 	mvn.w	r2, #8
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2204      	movs	r2, #4
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
 8006b50:	e009      	b.n	8006b66 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d026      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d021      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0210 	mvn.w	r2, #16
 8006b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
 8006ba8:	e009      	b.n	8006bbe <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00e      	beq.n	8006bec <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0201 	mvn.w	r2, #1
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d009      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00e      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0220 	mvn.w	r2, #32
 8006c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00e      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e0ff      	b.n	8006f5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b14      	cmp	r3, #20
 8006d6a:	f200 80f0 	bhi.w	8006f4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006f4f 	.word	0x08006f4f
 8006d7c:	08006f4f 	.word	0x08006f4f
 8006d80:	08006f4f 	.word	0x08006f4f
 8006d84:	08006e09 	.word	0x08006e09
 8006d88:	08006f4f 	.word	0x08006f4f
 8006d8c:	08006f4f 	.word	0x08006f4f
 8006d90:	08006f4f 	.word	0x08006f4f
 8006d94:	08006e4b 	.word	0x08006e4b
 8006d98:	08006f4f 	.word	0x08006f4f
 8006d9c:	08006f4f 	.word	0x08006f4f
 8006da0:	08006f4f 	.word	0x08006f4f
 8006da4:	08006e8b 	.word	0x08006e8b
 8006da8:	08006f4f 	.word	0x08006f4f
 8006dac:	08006f4f 	.word	0x08006f4f
 8006db0:	08006f4f 	.word	0x08006f4f
 8006db4:	08006ecd 	.word	0x08006ecd
 8006db8:	08006f4f 	.word	0x08006f4f
 8006dbc:	08006f4f 	.word	0x08006f4f
 8006dc0:	08006f4f 	.word	0x08006f4f
 8006dc4:	08006f0d 	.word	0x08006f0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fc4e 	bl	8007670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6999      	ldr	r1, [r3, #24]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	619a      	str	r2, [r3, #24]
      break;
 8006e06:	e0a5      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fcc8 	bl	80077a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	619a      	str	r2, [r3, #24]
      break;
 8006e48:	e084      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fd3b 	bl	80078cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0208 	orr.w	r2, r2, #8
 8006e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0204 	bic.w	r2, r2, #4
 8006e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69d9      	ldr	r1, [r3, #28]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	61da      	str	r2, [r3, #28]
      break;
 8006e88:	e064      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fdad 	bl	80079f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	021a      	lsls	r2, r3, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	61da      	str	r2, [r3, #28]
      break;
 8006eca:	e043      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fe20 	bl	8007b18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0208 	orr.w	r2, r2, #8
 8006ee6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0204 	bic.w	r2, r2, #4
 8006ef6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006f0a:	e023      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fe6a 	bl	8007bec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f36:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006f4c:	e002      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
      break;
 8006f52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop

08006f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIM_ConfigClockSource+0x1c>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e0f6      	b.n	8007172 <HAL_TIM_ConfigClockSource+0x20a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006fa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a6f      	ldr	r2, [pc, #444]	@ (800717c <HAL_TIM_ConfigClockSource+0x214>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	f000 80c1 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8006fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800717c <HAL_TIM_ConfigClockSource+0x214>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	f200 80c6 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fcc:	4a6c      	ldr	r2, [pc, #432]	@ (8007180 <HAL_TIM_ConfigClockSource+0x218>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	f000 80b9 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8006fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8007180 <HAL_TIM_ConfigClockSource+0x218>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	f200 80be 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fdc:	4a69      	ldr	r2, [pc, #420]	@ (8007184 <HAL_TIM_ConfigClockSource+0x21c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f000 80b1 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8006fe4:	4a67      	ldr	r2, [pc, #412]	@ (8007184 <HAL_TIM_ConfigClockSource+0x21c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f200 80b6 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fec:	4a66      	ldr	r2, [pc, #408]	@ (8007188 <HAL_TIM_ConfigClockSource+0x220>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	f000 80a9 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8006ff4:	4a64      	ldr	r2, [pc, #400]	@ (8007188 <HAL_TIM_ConfigClockSource+0x220>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	f200 80ae 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ffc:	4a63      	ldr	r2, [pc, #396]	@ (800718c <HAL_TIM_ConfigClockSource+0x224>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	f000 80a1 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8007004:	4a61      	ldr	r2, [pc, #388]	@ (800718c <HAL_TIM_ConfigClockSource+0x224>)
 8007006:	4293      	cmp	r3, r2
 8007008:	f200 80a6 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 800700c:	4a60      	ldr	r2, [pc, #384]	@ (8007190 <HAL_TIM_ConfigClockSource+0x228>)
 800700e:	4293      	cmp	r3, r2
 8007010:	f000 8099 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8007014:	4a5e      	ldr	r2, [pc, #376]	@ (8007190 <HAL_TIM_ConfigClockSource+0x228>)
 8007016:	4293      	cmp	r3, r2
 8007018:	f200 809e 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 800701c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007020:	f000 8091 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8007024:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007028:	f200 8096 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 800702c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007030:	f000 8089 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8007034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007038:	f200 808e 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 800703c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007040:	d03e      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0x158>
 8007042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007046:	f200 8087 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704e:	f000 8086 	beq.w	800715e <HAL_TIM_ConfigClockSource+0x1f6>
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007056:	d87f      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007058:	2b70      	cmp	r3, #112	@ 0x70
 800705a:	d01a      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x12a>
 800705c:	2b70      	cmp	r3, #112	@ 0x70
 800705e:	d87b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007060:	2b60      	cmp	r3, #96	@ 0x60
 8007062:	d050      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x19e>
 8007064:	2b60      	cmp	r3, #96	@ 0x60
 8007066:	d877      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007068:	2b50      	cmp	r3, #80	@ 0x50
 800706a:	d03c      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x17e>
 800706c:	2b50      	cmp	r3, #80	@ 0x50
 800706e:	d873      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007070:	2b40      	cmp	r3, #64	@ 0x40
 8007072:	d058      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x1be>
 8007074:	2b40      	cmp	r3, #64	@ 0x40
 8007076:	d86f      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007078:	2b30      	cmp	r3, #48	@ 0x30
 800707a:	d064      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 800707c:	2b30      	cmp	r3, #48	@ 0x30
 800707e:	d86b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d060      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d867      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d05c      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 800708c:	2b10      	cmp	r3, #16
 800708e:	d05a      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x1de>
 8007090:	e062      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070a2:	f000 fe8b 	bl	8007dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	609a      	str	r2, [r3, #8]
      break;
 80070be:	e04f      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070d0:	f000 fe74 	bl	8007dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070e2:	609a      	str	r2, [r3, #8]
      break;
 80070e4:	e03c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f2:	461a      	mov	r2, r3
 80070f4:	f000 fde6 	bl	8007cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2150      	movs	r1, #80	@ 0x50
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fe3f 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 8007104:	e02c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007112:	461a      	mov	r2, r3
 8007114:	f000 fe05 	bl	8007d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2160      	movs	r1, #96	@ 0x60
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fe2f 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 8007124:	e01c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007132:	461a      	mov	r2, r3
 8007134:	f000 fdc6 	bl	8007cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2140      	movs	r1, #64	@ 0x40
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fe1f 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 8007144:	e00c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f000 fe16 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 8007156:	e003      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
      break;
 800715c:	e000      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800715e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	00100070 	.word	0x00100070
 8007180:	00100060 	.word	0x00100060
 8007184:	00100050 	.word	0x00100050
 8007188:	00100040 	.word	0x00100040
 800718c:	00100030 	.word	0x00100030
 8007190:	00100020 	.word	0x00100020

08007194 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	460b      	mov	r3, r1
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e14a      	b.n	80074fa <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	f040 80dd 	bne.w	800742c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	2b1f      	cmp	r3, #31
 8007276:	f200 80d6 	bhi.w	8007426 <HAL_TIM_RegisterCallback+0x1de>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <HAL_TIM_RegisterCallback+0x38>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	08007301 	.word	0x08007301
 8007284:	08007309 	.word	0x08007309
 8007288:	08007311 	.word	0x08007311
 800728c:	08007319 	.word	0x08007319
 8007290:	08007321 	.word	0x08007321
 8007294:	08007329 	.word	0x08007329
 8007298:	08007331 	.word	0x08007331
 800729c:	08007339 	.word	0x08007339
 80072a0:	08007341 	.word	0x08007341
 80072a4:	08007349 	.word	0x08007349
 80072a8:	08007351 	.word	0x08007351
 80072ac:	08007359 	.word	0x08007359
 80072b0:	08007361 	.word	0x08007361
 80072b4:	08007369 	.word	0x08007369
 80072b8:	08007373 	.word	0x08007373
 80072bc:	0800737d 	.word	0x0800737d
 80072c0:	08007387 	.word	0x08007387
 80072c4:	08007391 	.word	0x08007391
 80072c8:	0800739b 	.word	0x0800739b
 80072cc:	080073a5 	.word	0x080073a5
 80072d0:	080073af 	.word	0x080073af
 80072d4:	080073b9 	.word	0x080073b9
 80072d8:	080073c3 	.word	0x080073c3
 80072dc:	080073cd 	.word	0x080073cd
 80072e0:	080073d7 	.word	0x080073d7
 80072e4:	080073e1 	.word	0x080073e1
 80072e8:	080073eb 	.word	0x080073eb
 80072ec:	080073f5 	.word	0x080073f5
 80072f0:	080073ff 	.word	0x080073ff
 80072f4:	08007409 	.word	0x08007409
 80072f8:	08007413 	.word	0x08007413
 80072fc:	0800741d 	.word	0x0800741d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007306:	e0f7      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800730e:	e0f3      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007316:	e0ef      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800731e:	e0eb      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007326:	e0e7      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800732e:	e0e3      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007336:	e0df      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800733e:	e0db      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007346:	e0d7      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800734e:	e0d3      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007356:	e0cf      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800735e:	e0cb      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007366:	e0c7      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007370:	e0c2      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800737a:	e0bd      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007384:	e0b8      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800738e:	e0b3      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007398:	e0ae      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80073a2:	e0a9      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80073ac:	e0a4      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80073b6:	e09f      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80073c0:	e09a      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80073ca:	e095      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80073d4:	e090      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80073de:	e08b      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80073e8:	e086      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80073f2:	e081      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80073fc:	e07c      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007406:	e077      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007410:	e072      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800741a:	e06d      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007424:	e068      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]
        break;
 800742a:	e065      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d15d      	bne.n	80074f4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	2b0d      	cmp	r3, #13
 800743c:	d857      	bhi.n	80074ee <HAL_TIM_RegisterCallback+0x2a6>
 800743e:	a201      	add	r2, pc, #4	@ (adr r2, 8007444 <HAL_TIM_RegisterCallback+0x1fc>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	0800747d 	.word	0x0800747d
 8007448:	08007485 	.word	0x08007485
 800744c:	0800748d 	.word	0x0800748d
 8007450:	08007495 	.word	0x08007495
 8007454:	0800749d 	.word	0x0800749d
 8007458:	080074a5 	.word	0x080074a5
 800745c:	080074ad 	.word	0x080074ad
 8007460:	080074b5 	.word	0x080074b5
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074c5 	.word	0x080074c5
 800746c:	080074cd 	.word	0x080074cd
 8007470:	080074d5 	.word	0x080074d5
 8007474:	080074dd 	.word	0x080074dd
 8007478:	080074e5 	.word	0x080074e5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007482:	e039      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800748a:	e035      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007492:	e031      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800749a:	e02d      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80074a2:	e029      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80074aa:	e025      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80074b2:	e021      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80074ba:	e01d      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80074c2:	e019      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80074ca:	e015      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80074d2:	e011      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80074da:	e00d      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80074e2:	e009      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80074ec:	e004      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
        break;
 80074f2:	e001      	b.n	80074f8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop

08007508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a4c      	ldr	r2, [pc, #304]	@ (800764c <TIM_Base_SetConfig+0x144>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d017      	beq.n	8007550 <TIM_Base_SetConfig+0x48>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007526:	d013      	beq.n	8007550 <TIM_Base_SetConfig+0x48>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a49      	ldr	r2, [pc, #292]	@ (8007650 <TIM_Base_SetConfig+0x148>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_Base_SetConfig+0x48>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a48      	ldr	r2, [pc, #288]	@ (8007654 <TIM_Base_SetConfig+0x14c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0x48>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a47      	ldr	r2, [pc, #284]	@ (8007658 <TIM_Base_SetConfig+0x150>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0x48>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a46      	ldr	r2, [pc, #280]	@ (800765c <TIM_Base_SetConfig+0x154>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0x48>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a45      	ldr	r2, [pc, #276]	@ (8007660 <TIM_Base_SetConfig+0x158>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d108      	bne.n	8007562 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a39      	ldr	r2, [pc, #228]	@ (800764c <TIM_Base_SetConfig+0x144>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d023      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007570:	d01f      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a36      	ldr	r2, [pc, #216]	@ (8007650 <TIM_Base_SetConfig+0x148>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01b      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a35      	ldr	r2, [pc, #212]	@ (8007654 <TIM_Base_SetConfig+0x14c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d017      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a34      	ldr	r2, [pc, #208]	@ (8007658 <TIM_Base_SetConfig+0x150>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a33      	ldr	r2, [pc, #204]	@ (800765c <TIM_Base_SetConfig+0x154>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00f      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a33      	ldr	r2, [pc, #204]	@ (8007664 <TIM_Base_SetConfig+0x15c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00b      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a32      	ldr	r2, [pc, #200]	@ (8007668 <TIM_Base_SetConfig+0x160>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d007      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a31      	ldr	r2, [pc, #196]	@ (800766c <TIM_Base_SetConfig+0x164>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d003      	beq.n	80075b2 <TIM_Base_SetConfig+0xaa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007660 <TIM_Base_SetConfig+0x158>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d108      	bne.n	80075c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a18      	ldr	r2, [pc, #96]	@ (800764c <TIM_Base_SetConfig+0x144>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <TIM_Base_SetConfig+0x110>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1a      	ldr	r2, [pc, #104]	@ (800765c <TIM_Base_SetConfig+0x154>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00f      	beq.n	8007618 <TIM_Base_SetConfig+0x110>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007664 <TIM_Base_SetConfig+0x15c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00b      	beq.n	8007618 <TIM_Base_SetConfig+0x110>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a19      	ldr	r2, [pc, #100]	@ (8007668 <TIM_Base_SetConfig+0x160>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d007      	beq.n	8007618 <TIM_Base_SetConfig+0x110>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a18      	ldr	r2, [pc, #96]	@ (800766c <TIM_Base_SetConfig+0x164>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0x110>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a13      	ldr	r2, [pc, #76]	@ (8007660 <TIM_Base_SetConfig+0x158>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d103      	bne.n	8007620 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d105      	bne.n	800763e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f023 0201 	bic.w	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	611a      	str	r2, [r3, #16]
  }
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40012c00 	.word	0x40012c00
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40013400 	.word	0x40013400
 8007660:	40015000 	.word	0x40015000
 8007664:	40014000 	.word	0x40014000
 8007668:	40014400 	.word	0x40014400
 800766c:	40014800 	.word	0x40014800

08007670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f023 0201 	bic.w	r2, r3, #1
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800769e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0303 	bic.w	r3, r3, #3
 80076aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f023 0302 	bic.w	r3, r3, #2
 80076bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a30      	ldr	r2, [pc, #192]	@ (800778c <TIM_OC1_SetConfig+0x11c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <TIM_OC1_SetConfig+0x88>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007790 <TIM_OC1_SetConfig+0x120>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00f      	beq.n	80076f8 <TIM_OC1_SetConfig+0x88>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a2e      	ldr	r2, [pc, #184]	@ (8007794 <TIM_OC1_SetConfig+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00b      	beq.n	80076f8 <TIM_OC1_SetConfig+0x88>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007798 <TIM_OC1_SetConfig+0x128>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <TIM_OC1_SetConfig+0x88>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a2c      	ldr	r2, [pc, #176]	@ (800779c <TIM_OC1_SetConfig+0x12c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_OC1_SetConfig+0x88>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a2b      	ldr	r2, [pc, #172]	@ (80077a0 <TIM_OC1_SetConfig+0x130>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d10c      	bne.n	8007712 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0308 	bic.w	r3, r3, #8
 80076fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f023 0304 	bic.w	r3, r3, #4
 8007710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a1d      	ldr	r2, [pc, #116]	@ (800778c <TIM_OC1_SetConfig+0x11c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <TIM_OC1_SetConfig+0xd2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <TIM_OC1_SetConfig+0x120>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00f      	beq.n	8007742 <TIM_OC1_SetConfig+0xd2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1b      	ldr	r2, [pc, #108]	@ (8007794 <TIM_OC1_SetConfig+0x124>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00b      	beq.n	8007742 <TIM_OC1_SetConfig+0xd2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1a      	ldr	r2, [pc, #104]	@ (8007798 <TIM_OC1_SetConfig+0x128>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d007      	beq.n	8007742 <TIM_OC1_SetConfig+0xd2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a19      	ldr	r2, [pc, #100]	@ (800779c <TIM_OC1_SetConfig+0x12c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d003      	beq.n	8007742 <TIM_OC1_SetConfig+0xd2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a18      	ldr	r2, [pc, #96]	@ (80077a0 <TIM_OC1_SetConfig+0x130>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d111      	bne.n	8007766 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	621a      	str	r2, [r3, #32]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40013400 	.word	0x40013400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800
 80077a0:	40015000 	.word	0x40015000

080077a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f023 0210 	bic.w	r2, r3, #16
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f023 0320 	bic.w	r3, r3, #32
 80077f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a2c      	ldr	r2, [pc, #176]	@ (80078b4 <TIM_OC2_SetConfig+0x110>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d007      	beq.n	8007818 <TIM_OC2_SetConfig+0x74>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a2b      	ldr	r2, [pc, #172]	@ (80078b8 <TIM_OC2_SetConfig+0x114>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_OC2_SetConfig+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a2a      	ldr	r2, [pc, #168]	@ (80078bc <TIM_OC2_SetConfig+0x118>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10d      	bne.n	8007834 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800781e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4313      	orrs	r3, r2
 800782a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a1f      	ldr	r2, [pc, #124]	@ (80078b4 <TIM_OC2_SetConfig+0x110>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <TIM_OC2_SetConfig+0xc0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a1e      	ldr	r2, [pc, #120]	@ (80078b8 <TIM_OC2_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00f      	beq.n	8007864 <TIM_OC2_SetConfig+0xc0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1e      	ldr	r2, [pc, #120]	@ (80078c0 <TIM_OC2_SetConfig+0x11c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00b      	beq.n	8007864 <TIM_OC2_SetConfig+0xc0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1d      	ldr	r2, [pc, #116]	@ (80078c4 <TIM_OC2_SetConfig+0x120>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_OC2_SetConfig+0xc0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1c      	ldr	r2, [pc, #112]	@ (80078c8 <TIM_OC2_SetConfig+0x124>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC2_SetConfig+0xc0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a17      	ldr	r2, [pc, #92]	@ (80078bc <TIM_OC2_SetConfig+0x118>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d113      	bne.n	800788c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800786a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40012c00 	.word	0x40012c00
 80078b8:	40013400 	.word	0x40013400
 80078bc:	40015000 	.word	0x40015000
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800

080078cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a2b      	ldr	r2, [pc, #172]	@ (80079d8 <TIM_OC3_SetConfig+0x10c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d007      	beq.n	800793e <TIM_OC3_SetConfig+0x72>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2a      	ldr	r2, [pc, #168]	@ (80079dc <TIM_OC3_SetConfig+0x110>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d003      	beq.n	800793e <TIM_OC3_SetConfig+0x72>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a29      	ldr	r2, [pc, #164]	@ (80079e0 <TIM_OC3_SetConfig+0x114>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d10d      	bne.n	800795a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a1e      	ldr	r2, [pc, #120]	@ (80079d8 <TIM_OC3_SetConfig+0x10c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_OC3_SetConfig+0xbe>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a1d      	ldr	r2, [pc, #116]	@ (80079dc <TIM_OC3_SetConfig+0x110>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_OC3_SetConfig+0xbe>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a1d      	ldr	r2, [pc, #116]	@ (80079e4 <TIM_OC3_SetConfig+0x118>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_OC3_SetConfig+0xbe>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a1c      	ldr	r2, [pc, #112]	@ (80079e8 <TIM_OC3_SetConfig+0x11c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_OC3_SetConfig+0xbe>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1b      	ldr	r2, [pc, #108]	@ (80079ec <TIM_OC3_SetConfig+0x120>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_OC3_SetConfig+0xbe>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a16      	ldr	r2, [pc, #88]	@ (80079e0 <TIM_OC3_SetConfig+0x114>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d113      	bne.n	80079b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40012c00 	.word	0x40012c00
 80079dc:	40013400 	.word	0x40013400
 80079e0:	40015000 	.word	0x40015000
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800

080079f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b00 <TIM_OC4_SetConfig+0x110>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_OC4_SetConfig+0x74>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2b      	ldr	r2, [pc, #172]	@ (8007b04 <TIM_OC4_SetConfig+0x114>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_OC4_SetConfig+0x74>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b08 <TIM_OC4_SetConfig+0x118>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d10d      	bne.n	8007a80 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	031b      	lsls	r3, r3, #12
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a1f      	ldr	r2, [pc, #124]	@ (8007b00 <TIM_OC4_SetConfig+0x110>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <TIM_OC4_SetConfig+0xc0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b04 <TIM_OC4_SetConfig+0x114>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00f      	beq.n	8007ab0 <TIM_OC4_SetConfig+0xc0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1e      	ldr	r2, [pc, #120]	@ (8007b0c <TIM_OC4_SetConfig+0x11c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00b      	beq.n	8007ab0 <TIM_OC4_SetConfig+0xc0>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b10 <TIM_OC4_SetConfig+0x120>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <TIM_OC4_SetConfig+0xc0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b14 <TIM_OC4_SetConfig+0x124>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_OC4_SetConfig+0xc0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a17      	ldr	r2, [pc, #92]	@ (8007b08 <TIM_OC4_SetConfig+0x118>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d113      	bne.n	8007ad8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ab6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007abe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	019b      	lsls	r3, r3, #6
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	019b      	lsls	r3, r3, #6
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40013400 	.word	0x40013400
 8007b08:	40015000 	.word	0x40015000
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	40014400 	.word	0x40014400
 8007b14:	40014800 	.word	0x40014800

08007b18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a19      	ldr	r2, [pc, #100]	@ (8007bd4 <TIM_OC5_SetConfig+0xbc>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <TIM_OC5_SetConfig+0x82>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a18      	ldr	r2, [pc, #96]	@ (8007bd8 <TIM_OC5_SetConfig+0xc0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <TIM_OC5_SetConfig+0x82>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a17      	ldr	r2, [pc, #92]	@ (8007bdc <TIM_OC5_SetConfig+0xc4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_OC5_SetConfig+0x82>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a16      	ldr	r2, [pc, #88]	@ (8007be0 <TIM_OC5_SetConfig+0xc8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_OC5_SetConfig+0x82>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a15      	ldr	r2, [pc, #84]	@ (8007be4 <TIM_OC5_SetConfig+0xcc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_OC5_SetConfig+0x82>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a14      	ldr	r2, [pc, #80]	@ (8007be8 <TIM_OC5_SetConfig+0xd0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d109      	bne.n	8007bae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	621a      	str	r2, [r3, #32]
}
 8007bc8:	bf00      	nop
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	40014000 	.word	0x40014000
 8007be0:	40014400 	.word	0x40014400
 8007be4:	40014800 	.word	0x40014800
 8007be8:	40015000 	.word	0x40015000

08007bec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	051b      	lsls	r3, r3, #20
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a1a      	ldr	r2, [pc, #104]	@ (8007cac <TIM_OC6_SetConfig+0xc0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <TIM_OC6_SetConfig+0x84>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a19      	ldr	r2, [pc, #100]	@ (8007cb0 <TIM_OC6_SetConfig+0xc4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00f      	beq.n	8007c70 <TIM_OC6_SetConfig+0x84>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a18      	ldr	r2, [pc, #96]	@ (8007cb4 <TIM_OC6_SetConfig+0xc8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <TIM_OC6_SetConfig+0x84>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a17      	ldr	r2, [pc, #92]	@ (8007cb8 <TIM_OC6_SetConfig+0xcc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_OC6_SetConfig+0x84>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <TIM_OC6_SetConfig+0xd0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_OC6_SetConfig+0x84>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	@ (8007cc0 <TIM_OC6_SetConfig+0xd4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d109      	bne.n	8007c84 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	029b      	lsls	r3, r3, #10
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800
 8007cc0:	40015000 	.word	0x40015000

08007cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f023 0201 	bic.w	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f023 030a 	bic.w	r3, r3, #10
 8007d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	f023 0210 	bic.w	r2, r3, #16
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	031b      	lsls	r3, r3, #12
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b085      	sub	sp, #20
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f043 0307 	orr.w	r3, r3, #7
 8007da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	609a      	str	r2, [r3, #8]
}
 8007db0:	bf00      	nop
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	021a      	lsls	r2, r3, #8
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	431a      	orrs	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	609a      	str	r2, [r3, #8]
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	2201      	movs	r2, #1
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1a      	ldr	r2, [r3, #32]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	401a      	ands	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1a      	ldr	r2, [r3, #32]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	fa01 f303 	lsl.w	r3, r1, r3
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	621a      	str	r2, [r3, #32]
}
 8007e3a:	bf00      	nop
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a26      	ldr	r2, [pc, #152]	@ (8007eec <TIM_ResetCallback+0xa4>)
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a25      	ldr	r2, [pc, #148]	@ (8007ef0 <TIM_ResetCallback+0xa8>)
 8007e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a24      	ldr	r2, [pc, #144]	@ (8007ef4 <TIM_ResetCallback+0xac>)
 8007e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a23      	ldr	r2, [pc, #140]	@ (8007ef8 <TIM_ResetCallback+0xb0>)
 8007e6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a22      	ldr	r2, [pc, #136]	@ (8007efc <TIM_ResetCallback+0xb4>)
 8007e74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	@ (8007f00 <TIM_ResetCallback+0xb8>)
 8007e7c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a20      	ldr	r2, [pc, #128]	@ (8007f04 <TIM_ResetCallback+0xbc>)
 8007e84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007f08 <TIM_ResetCallback+0xc0>)
 8007e8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1e      	ldr	r2, [pc, #120]	@ (8007f0c <TIM_ResetCallback+0xc4>)
 8007e94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <TIM_ResetCallback+0xc8>)
 8007e9c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f14 <TIM_ResetCallback+0xcc>)
 8007ea4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f18 <TIM_ResetCallback+0xd0>)
 8007eac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8007f1c <TIM_ResetCallback+0xd4>)
 8007eb4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a19      	ldr	r2, [pc, #100]	@ (8007f20 <TIM_ResetCallback+0xd8>)
 8007ebc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <TIM_ResetCallback+0xdc>)
 8007ec4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <TIM_ResetCallback+0xe0>)
 8007ecc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <TIM_ResetCallback+0xe4>)
 8007ed4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a15      	ldr	r2, [pc, #84]	@ (8007f30 <TIM_ResetCallback+0xe8>)
 8007edc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	08002c9d 	.word	0x08002c9d
 8007ef0:	08007195 	.word	0x08007195
 8007ef4:	0800720d 	.word	0x0800720d
 8007ef8:	08007221 	.word	0x08007221
 8007efc:	080071bd 	.word	0x080071bd
 8007f00:	080071d1 	.word	0x080071d1
 8007f04:	080071a9 	.word	0x080071a9
 8007f08:	080071e5 	.word	0x080071e5
 8007f0c:	080071f9 	.word	0x080071f9
 8007f10:	08007235 	.word	0x08007235
 8007f14:	08008061 	.word	0x08008061
 8007f18:	08008075 	.word	0x08008075
 8007f1c:	08008089 	.word	0x08008089
 8007f20:	0800809d 	.word	0x0800809d
 8007f24:	080080b1 	.word	0x080080b1
 8007f28:	080080c5 	.word	0x080080c5
 8007f2c:	080080d9 	.word	0x080080d9
 8007f30:	080080ed 	.word	0x080080ed

08007f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e074      	b.n	8008036 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a34      	ldr	r2, [pc, #208]	@ (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d009      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a33      	ldr	r2, [pc, #204]	@ (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d004      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a31      	ldr	r2, [pc, #196]	@ (800804c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d108      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a21      	ldr	r2, [pc, #132]	@ (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d022      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fcc:	d01d      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d018      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00e      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d009      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a18      	ldr	r2, [pc, #96]	@ (800805c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a11      	ldr	r2, [pc, #68]	@ (800804c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d10c      	bne.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4313      	orrs	r3, r2
 800801a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40013400 	.word	0x40013400
 800804c:	40015000 	.word	0x40015000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40014000 	.word	0x40014000

08008060 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e050      	b.n	80081b4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008118:	2b00      	cmp	r3, #0
 800811a:	d114      	bne.n	8008146 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fdbb 	bl	8008ca0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d103      	bne.n	800813c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a21      	ldr	r2, [pc, #132]	@ (80081bc <HAL_UART_Init+0xbc>)
 8008138:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2224      	movs	r2, #36	@ 0x24
 800814a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0201 	bic.w	r2, r2, #1
 800815c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f8e8 	bl	800933c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fde9 	bl	8008d44 <UART_SetConfig>
 8008172:	4603      	mov	r3, r0
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e01b      	b.n	80081b4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800818a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800819a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0201 	orr.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f967 	bl	8009480 <UART_CheckIdleState>
 80081b2:	4603      	mov	r3, r0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	08003f65 	.word	0x08003f65

080081c0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	460b      	mov	r3, r1
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e09c      	b.n	8008326 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d16c      	bne.n	80082d0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80081f6:	7afb      	ldrb	r3, [r7, #11]
 80081f8:	2b0c      	cmp	r3, #12
 80081fa:	d85e      	bhi.n	80082ba <HAL_UART_RegisterCallback+0xfa>
 80081fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <HAL_UART_RegisterCallback+0x44>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008239 	.word	0x08008239
 8008208:	08008243 	.word	0x08008243
 800820c:	0800824d 	.word	0x0800824d
 8008210:	08008257 	.word	0x08008257
 8008214:	08008261 	.word	0x08008261
 8008218:	0800826b 	.word	0x0800826b
 800821c:	08008275 	.word	0x08008275
 8008220:	0800827f 	.word	0x0800827f
 8008224:	08008289 	.word	0x08008289
 8008228:	08008293 	.word	0x08008293
 800822c:	0800829d 	.word	0x0800829d
 8008230:	080082a7 	.word	0x080082a7
 8008234:	080082b1 	.word	0x080082b1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008240:	e070      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800824a:	e06b      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008254:	e066      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800825e:	e061      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008268:	e05c      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008272:	e057      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800827c:	e052      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008286:	e04d      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008290:	e048      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800829a:	e043      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80082a4:	e03e      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80082ae:	e039      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80082b8:	e034      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]
        break;
 80082ce:	e029      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d11a      	bne.n	8008310 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b0b      	cmp	r3, #11
 80082de:	d002      	beq.n	80082e6 <HAL_UART_RegisterCallback+0x126>
 80082e0:	2b0c      	cmp	r3, #12
 80082e2:	d005      	beq.n	80082f0 <HAL_UART_RegisterCallback+0x130>
 80082e4:	e009      	b.n	80082fa <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80082ee:	e019      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80082f8:	e014      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008300:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
        break;
 800830e:	e009      	b.n	8008324 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008316:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
}
 8008326:	4618      	mov	r0, r3
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08a      	sub	sp, #40	@ 0x28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008348:	2b20      	cmp	r3, #32
 800834a:	d167      	bne.n	800841c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_UART_Transmit_DMA+0x24>
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e060      	b.n	800841e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	88fa      	ldrh	r2, [r7, #6]
 8008366:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	88fa      	ldrh	r2, [r7, #6]
 800836e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2221      	movs	r2, #33	@ 0x21
 800837e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d028      	beq.n	80083dc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800838e:	4a26      	ldr	r2, [pc, #152]	@ (8008428 <HAL_UART_Transmit_DMA+0xf4>)
 8008390:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008396:	4a25      	ldr	r2, [pc, #148]	@ (800842c <HAL_UART_Transmit_DMA+0xf8>)
 8008398:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800839e:	4a24      	ldr	r2, [pc, #144]	@ (8008430 <HAL_UART_Transmit_DMA+0xfc>)
 80083a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083a6:	2200      	movs	r2, #0
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b2:	4619      	mov	r1, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3328      	adds	r3, #40	@ 0x28
 80083ba:	461a      	mov	r2, r3
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	f7fc f9d5 	bl	800476c <HAL_DMA_Start_IT>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d009      	beq.n	80083dc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2210      	movs	r2, #16
 80083cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e020      	b.n	800841e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2240      	movs	r2, #64	@ 0x40
 80083e2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3308      	adds	r3, #8
 80083ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	613b      	str	r3, [r7, #16]
   return(result);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008404:	623a      	str	r2, [r7, #32]
 8008406:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	69f9      	ldr	r1, [r7, #28]
 800840a:	6a3a      	ldr	r2, [r7, #32]
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	61bb      	str	r3, [r7, #24]
   return(result);
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e5      	bne.n	80083e4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	e000      	b.n	800841e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800841c:	2302      	movs	r3, #2
  }
}
 800841e:	4618      	mov	r0, r3
 8008420:	3728      	adds	r7, #40	@ 0x28
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	0800994b 	.word	0x0800994b
 800842c:	080099e9 	.word	0x080099e9
 8008430:	08009b83 	.word	0x08009b83

08008434 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008448:	2b20      	cmp	r3, #32
 800844a:	d137      	bne.n	80084bc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <HAL_UART_Receive_DMA+0x24>
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e030      	b.n	80084be <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a18      	ldr	r2, [pc, #96]	@ (80084c8 <HAL_UART_Receive_DMA+0x94>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d01f      	beq.n	80084ac <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d018      	beq.n	80084ac <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	613b      	str	r3, [r7, #16]
   return(result);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	623b      	str	r3, [r7, #32]
 800849a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	69f9      	ldr	r1, [r7, #28]
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e6      	bne.n	800847a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	461a      	mov	r2, r3
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f001 f8fc 	bl	80096b0 <UART_Start_Receive_DMA>
 80084b8:	4603      	mov	r3, r0
 80084ba:	e000      	b.n	80084be <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084bc:	2302      	movs	r3, #2
  }
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3728      	adds	r7, #40	@ 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40008000 	.word	0x40008000

080084cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b0ba      	sub	sp, #232	@ 0xe8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80084f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80084fa:	4013      	ands	r3, r2
 80084fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11b      	bne.n	8008540 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800850c:	f003 0320 	and.w	r3, r3, #32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d015      	beq.n	8008540 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b00      	cmp	r3, #0
 800851e:	d105      	bne.n	800852c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d009      	beq.n	8008540 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 82f3 	beq.w	8008b1c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
      }
      return;
 800853e:	e2ed      	b.n	8008b1c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8129 	beq.w	800879c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800854a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800854e:	4b90      	ldr	r3, [pc, #576]	@ (8008790 <HAL_UART_IRQHandler+0x2c4>)
 8008550:	4013      	ands	r3, r2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008556:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800855a:	4b8e      	ldr	r3, [pc, #568]	@ (8008794 <HAL_UART_IRQHandler+0x2c8>)
 800855c:	4013      	ands	r3, r2
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 811c 	beq.w	800879c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d011      	beq.n	8008594 <HAL_UART_IRQHandler+0xc8>
 8008570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2201      	movs	r2, #1
 8008582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858a:	f043 0201 	orr.w	r2, r3, #1
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d011      	beq.n	80085c4 <HAL_UART_IRQHandler+0xf8>
 80085a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2202      	movs	r2, #2
 80085b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ba:	f043 0204 	orr.w	r2, r3, #4
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d011      	beq.n	80085f4 <HAL_UART_IRQHandler+0x128>
 80085d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2204      	movs	r2, #4
 80085e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ea:	f043 0202 	orr.w	r2, r3, #2
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d017      	beq.n	8008630 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d105      	bne.n	8008618 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800860c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008610:	4b5f      	ldr	r3, [pc, #380]	@ (8008790 <HAL_UART_IRQHandler+0x2c4>)
 8008612:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2208      	movs	r2, #8
 800861e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008626:	f043 0208 	orr.w	r2, r3, #8
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008638:	2b00      	cmp	r3, #0
 800863a:	d012      	beq.n	8008662 <HAL_UART_IRQHandler+0x196>
 800863c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008640:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008658:	f043 0220 	orr.w	r2, r3, #32
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8259 	beq.w	8008b20 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d013      	beq.n	80086a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800867a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800868a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b6:	2b40      	cmp	r3, #64	@ 0x40
 80086b8:	d005      	beq.n	80086c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d058      	beq.n	8008778 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 f8d9 	bl	800987e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d6:	2b40      	cmp	r3, #64	@ 0x40
 80086d8:	d148      	bne.n	800876c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008706:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800870a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800871e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1d9      	bne.n	80086da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800872c:	2b00      	cmp	r3, #0
 800872e:	d017      	beq.n	8008760 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	4a18      	ldr	r2, [pc, #96]	@ (8008798 <HAL_UART_IRQHandler+0x2cc>)
 8008738:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008740:	4618      	mov	r0, r3
 8008742:	f7fc f8e7 	bl	8004914 <HAL_DMA_Abort_IT>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01f      	beq.n	800878c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800875a:	4610      	mov	r0, r2
 800875c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875e:	e015      	b.n	800878c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876a:	e00f      	b.n	800878c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008776:	e009      	b.n	800878c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800878a:	e1c9      	b.n	8008b20 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800878c:	bf00      	nop
    return;
 800878e:	e1c7      	b.n	8008b20 <HAL_UART_IRQHandler+0x654>
 8008790:	10000001 	.word	0x10000001
 8008794:	04000120 	.word	0x04000120
 8008798:	08009c07 	.word	0x08009c07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	f040 8157 	bne.w	8008a54 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 8150 	beq.w	8008a54 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b8:	f003 0310 	and.w	r3, r3, #16
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8149 	beq.w	8008a54 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2210      	movs	r2, #16
 80087c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d4:	2b40      	cmp	r3, #64	@ 0x40
 80087d6:	f040 80bd 	bne.w	8008954 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 8199 	beq.w	8008b24 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087fc:	429a      	cmp	r2, r3
 80087fe:	f080 8191 	bcs.w	8008b24 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008808:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	f040 8087 	bne.w	800892e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800883c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800884a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800884e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008856:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1da      	bne.n	8008820 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3308      	adds	r3, #8
 8008870:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800887a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800887c:	f023 0301 	bic.w	r3, r3, #1
 8008880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3308      	adds	r3, #8
 800888a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800888e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008892:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008896:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e1      	bne.n	800886a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e3      	bne.n	80088a6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088fc:	f023 0310 	bic.w	r3, r3, #16
 8008900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800890e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008910:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008914:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800891c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e4      	bne.n	80088ec <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008928:	4618      	mov	r0, r3
 800892a:	f7fb ff9a 	bl	8004862 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008946:	b292      	uxth	r2, r2
 8008948:	1a8a      	subs	r2, r1, r2
 800894a:	b292      	uxth	r2, r2
 800894c:	4611      	mov	r1, r2
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008952:	e0e7      	b.n	8008b24 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008960:	b29b      	uxth	r3, r3
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80d9 	beq.w	8008b28 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8008976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 80d4 	beq.w	8008b28 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800898e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80089a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e4      	bne.n	8008980 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3308      	adds	r3, #8
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	623b      	str	r3, [r7, #32]
   return(result);
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3308      	adds	r3, #8
 80089da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089de:	633a      	str	r2, [r7, #48]	@ 0x30
 80089e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e1      	bne.n	80089b6 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0310 	bic.w	r3, r3, #16
 8008a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	69b9      	ldr	r1, [r7, #24]
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	617b      	str	r3, [r7, #20]
   return(result);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a48:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a52:	e069      	b.n	8008b28 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d010      	beq.n	8008a82 <HAL_UART_IRQHandler+0x5b6>
 8008a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a74:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a80:	e055      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d014      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d008      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d03e      	beq.n	8008b2c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
    }
    return;
 8008ab6:	e039      	b.n	8008b2c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x60c>
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 f8b0 	bl	8009c36 <UART_EndTransmit_IT>
    return;
 8008ad6:	e02a      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008adc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <HAL_UART_IRQHandler+0x630>
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008afa:	e018      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d012      	beq.n	8008b2e <HAL_UART_IRQHandler+0x662>
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da0e      	bge.n	8008b2e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b1a:	e008      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
      return;
 8008b1c:	bf00      	nop
 8008b1e:	e006      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
    return;
 8008b20:	bf00      	nop
 8008b22:	e004      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
      return;
 8008b24:	bf00      	nop
 8008b26:	e002      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
      return;
 8008b28:	bf00      	nop
 8008b2a:	e000      	b.n	8008b2e <HAL_UART_IRQHandler+0x662>
    return;
 8008b2c:	bf00      	nop
  }
}
 8008b2e:	37e8      	adds	r7, #232	@ 0xe8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a09      	ldr	r2, [pc, #36]	@ (8008c0c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	615a      	str	r2, [r3, #20]
  }
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40008000 	.word	0x40008000

08008c10 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <HAL_UART_EnableReceiverTimeout+0x70>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d027      	beq.n	8008c72 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d120      	bne.n	8008c6e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <HAL_UART_EnableReceiverTimeout+0x2a>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e01c      	b.n	8008c74 <HAL_UART_EnableReceiverTimeout+0x64>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2224      	movs	r2, #36	@ 0x24
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008c58:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e002      	b.n	8008c74 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e000      	b.n	8008c74 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40008000 	.word	0x40008000

08008c84 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1a      	ldr	r2, [pc, #104]	@ (8008d14 <UART_InitCallbacksToDefault+0x74>)
 8008cac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a19      	ldr	r2, [pc, #100]	@ (8008d18 <UART_InitCallbacksToDefault+0x78>)
 8008cb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a18      	ldr	r2, [pc, #96]	@ (8008d1c <UART_InitCallbacksToDefault+0x7c>)
 8008cbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a17      	ldr	r2, [pc, #92]	@ (8008d20 <UART_InitCallbacksToDefault+0x80>)
 8008cc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a16      	ldr	r2, [pc, #88]	@ (8008d24 <UART_InitCallbacksToDefault+0x84>)
 8008ccc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a15      	ldr	r2, [pc, #84]	@ (8008d28 <UART_InitCallbacksToDefault+0x88>)
 8008cd4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a14      	ldr	r2, [pc, #80]	@ (8008d2c <UART_InitCallbacksToDefault+0x8c>)
 8008cdc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a13      	ldr	r2, [pc, #76]	@ (8008d30 <UART_InitCallbacksToDefault+0x90>)
 8008ce4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a12      	ldr	r2, [pc, #72]	@ (8008d34 <UART_InitCallbacksToDefault+0x94>)
 8008cec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a11      	ldr	r2, [pc, #68]	@ (8008d38 <UART_InitCallbacksToDefault+0x98>)
 8008cf4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a10      	ldr	r2, [pc, #64]	@ (8008d3c <UART_InitCallbacksToDefault+0x9c>)
 8008cfc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a0f      	ldr	r2, [pc, #60]	@ (8008d40 <UART_InitCallbacksToDefault+0xa0>)
 8008d04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	08008b49 	.word	0x08008b49
 8008d18:	08008b35 	.word	0x08008b35
 8008d1c:	08008b5d 	.word	0x08008b5d
 8008d20:	08002b79 	.word	0x08002b79
 8008d24:	08008b71 	.word	0x08008b71
 8008d28:	08008b85 	.word	0x08008b85
 8008d2c:	08008b99 	.word	0x08008b99
 8008d30:	08008bad 	.word	0x08008bad
 8008d34:	08009c91 	.word	0x08009c91
 8008d38:	08009ca5 	.word	0x08009ca5
 8008d3c:	08009cb9 	.word	0x08009cb9
 8008d40:	08008bc1 	.word	0x08008bc1

08008d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d48:	b08c      	sub	sp, #48	@ 0x30
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4baa      	ldr	r3, [pc, #680]	@ (800901c <UART_SetConfig+0x2d8>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d7c:	430b      	orrs	r3, r1
 8008d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a9f      	ldr	r2, [pc, #636]	@ (8009020 <UART_SetConfig+0x2dc>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dac:	4313      	orrs	r3, r2
 8008dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008dba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	6812      	ldr	r2, [r2, #0]
 8008dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dce:	f023 010f 	bic.w	r1, r3, #15
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a90      	ldr	r2, [pc, #576]	@ (8009024 <UART_SetConfig+0x2e0>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d125      	bne.n	8008e34 <UART_SetConfig+0xf0>
 8008de8:	4b8f      	ldr	r3, [pc, #572]	@ (8009028 <UART_SetConfig+0x2e4>)
 8008dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d81a      	bhi.n	8008e2c <UART_SetConfig+0xe8>
 8008df6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dfc <UART_SetConfig+0xb8>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e0d 	.word	0x08008e0d
 8008e00:	08008e1d 	.word	0x08008e1d
 8008e04:	08008e15 	.word	0x08008e15
 8008e08:	08008e25 	.word	0x08008e25
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e12:	e116      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e14:	2302      	movs	r3, #2
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1a:	e112      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e22:	e10e      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2a:	e10a      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e32:	e106      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a7c      	ldr	r2, [pc, #496]	@ (800902c <UART_SetConfig+0x2e8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d138      	bne.n	8008eb0 <UART_SetConfig+0x16c>
 8008e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8009028 <UART_SetConfig+0x2e4>)
 8008e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e44:	f003 030c 	and.w	r3, r3, #12
 8008e48:	2b0c      	cmp	r3, #12
 8008e4a:	d82d      	bhi.n	8008ea8 <UART_SetConfig+0x164>
 8008e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e54 <UART_SetConfig+0x110>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e89 	.word	0x08008e89
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008ea9 	.word	0x08008ea9
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008ea9 	.word	0x08008ea9
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008ea9 	.word	0x08008ea9
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	08008ea9 	.word	0x08008ea9
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8e:	e0d8      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e90:	2302      	movs	r3, #2
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e96:	e0d4      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9e:	e0d0      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e0cc      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e0c8      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8009030 <UART_SetConfig+0x2ec>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d125      	bne.n	8008f06 <UART_SetConfig+0x1c2>
 8008eba:	4b5b      	ldr	r3, [pc, #364]	@ (8009028 <UART_SetConfig+0x2e4>)
 8008ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ec0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ec4:	2b30      	cmp	r3, #48	@ 0x30
 8008ec6:	d016      	beq.n	8008ef6 <UART_SetConfig+0x1b2>
 8008ec8:	2b30      	cmp	r3, #48	@ 0x30
 8008eca:	d818      	bhi.n	8008efe <UART_SetConfig+0x1ba>
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	d00a      	beq.n	8008ee6 <UART_SetConfig+0x1a2>
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d814      	bhi.n	8008efe <UART_SetConfig+0x1ba>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <UART_SetConfig+0x19a>
 8008ed8:	2b10      	cmp	r3, #16
 8008eda:	d008      	beq.n	8008eee <UART_SetConfig+0x1aa>
 8008edc:	e00f      	b.n	8008efe <UART_SetConfig+0x1ba>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee4:	e0ad      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eec:	e0a9      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008eee:	2304      	movs	r3, #4
 8008ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef4:	e0a5      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008ef6:	2308      	movs	r3, #8
 8008ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efc:	e0a1      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008efe:	2310      	movs	r3, #16
 8008f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f04:	e09d      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8009034 <UART_SetConfig+0x2f0>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d125      	bne.n	8008f5c <UART_SetConfig+0x218>
 8008f10:	4b45      	ldr	r3, [pc, #276]	@ (8009028 <UART_SetConfig+0x2e4>)
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f1c:	d016      	beq.n	8008f4c <UART_SetConfig+0x208>
 8008f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f20:	d818      	bhi.n	8008f54 <UART_SetConfig+0x210>
 8008f22:	2b80      	cmp	r3, #128	@ 0x80
 8008f24:	d00a      	beq.n	8008f3c <UART_SetConfig+0x1f8>
 8008f26:	2b80      	cmp	r3, #128	@ 0x80
 8008f28:	d814      	bhi.n	8008f54 <UART_SetConfig+0x210>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <UART_SetConfig+0x1f0>
 8008f2e:	2b40      	cmp	r3, #64	@ 0x40
 8008f30:	d008      	beq.n	8008f44 <UART_SetConfig+0x200>
 8008f32:	e00f      	b.n	8008f54 <UART_SetConfig+0x210>
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3a:	e082      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f42:	e07e      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f44:	2304      	movs	r3, #4
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4a:	e07a      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e076      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f54:	2310      	movs	r3, #16
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5a:	e072      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a35      	ldr	r2, [pc, #212]	@ (8009038 <UART_SetConfig+0x2f4>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d12a      	bne.n	8008fbc <UART_SetConfig+0x278>
 8008f66:	4b30      	ldr	r3, [pc, #192]	@ (8009028 <UART_SetConfig+0x2e4>)
 8008f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f74:	d01a      	beq.n	8008fac <UART_SetConfig+0x268>
 8008f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f7a:	d81b      	bhi.n	8008fb4 <UART_SetConfig+0x270>
 8008f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f80:	d00c      	beq.n	8008f9c <UART_SetConfig+0x258>
 8008f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f86:	d815      	bhi.n	8008fb4 <UART_SetConfig+0x270>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <UART_SetConfig+0x250>
 8008f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f90:	d008      	beq.n	8008fa4 <UART_SetConfig+0x260>
 8008f92:	e00f      	b.n	8008fb4 <UART_SetConfig+0x270>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f9a:	e052      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa2:	e04e      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008faa:	e04a      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	e046      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fba:	e042      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a17      	ldr	r2, [pc, #92]	@ (8009020 <UART_SetConfig+0x2dc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d13a      	bne.n	800903c <UART_SetConfig+0x2f8>
 8008fc6:	4b18      	ldr	r3, [pc, #96]	@ (8009028 <UART_SetConfig+0x2e4>)
 8008fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fd4:	d01a      	beq.n	800900c <UART_SetConfig+0x2c8>
 8008fd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fda:	d81b      	bhi.n	8009014 <UART_SetConfig+0x2d0>
 8008fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fe0:	d00c      	beq.n	8008ffc <UART_SetConfig+0x2b8>
 8008fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fe6:	d815      	bhi.n	8009014 <UART_SetConfig+0x2d0>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <UART_SetConfig+0x2b0>
 8008fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ff0:	d008      	beq.n	8009004 <UART_SetConfig+0x2c0>
 8008ff2:	e00f      	b.n	8009014 <UART_SetConfig+0x2d0>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ffa:	e022      	b.n	8009042 <UART_SetConfig+0x2fe>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009002:	e01e      	b.n	8009042 <UART_SetConfig+0x2fe>
 8009004:	2304      	movs	r3, #4
 8009006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800900a:	e01a      	b.n	8009042 <UART_SetConfig+0x2fe>
 800900c:	2308      	movs	r3, #8
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009012:	e016      	b.n	8009042 <UART_SetConfig+0x2fe>
 8009014:	2310      	movs	r3, #16
 8009016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901a:	e012      	b.n	8009042 <UART_SetConfig+0x2fe>
 800901c:	cfff69f3 	.word	0xcfff69f3
 8009020:	40008000 	.word	0x40008000
 8009024:	40013800 	.word	0x40013800
 8009028:	40021000 	.word	0x40021000
 800902c:	40004400 	.word	0x40004400
 8009030:	40004800 	.word	0x40004800
 8009034:	40004c00 	.word	0x40004c00
 8009038:	40005000 	.word	0x40005000
 800903c:	2310      	movs	r3, #16
 800903e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4aae      	ldr	r2, [pc, #696]	@ (8009300 <UART_SetConfig+0x5bc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	f040 8097 	bne.w	800917c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800904e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009052:	2b08      	cmp	r3, #8
 8009054:	d823      	bhi.n	800909e <UART_SetConfig+0x35a>
 8009056:	a201      	add	r2, pc, #4	@ (adr r2, 800905c <UART_SetConfig+0x318>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009081 	.word	0x08009081
 8009060:	0800909f 	.word	0x0800909f
 8009064:	08009089 	.word	0x08009089
 8009068:	0800909f 	.word	0x0800909f
 800906c:	0800908f 	.word	0x0800908f
 8009070:	0800909f 	.word	0x0800909f
 8009074:	0800909f 	.word	0x0800909f
 8009078:	0800909f 	.word	0x0800909f
 800907c:	08009097 	.word	0x08009097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009080:	f7fc fd20 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8009084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009086:	e010      	b.n	80090aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009088:	4b9e      	ldr	r3, [pc, #632]	@ (8009304 <UART_SetConfig+0x5c0>)
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800908c:	e00d      	b.n	80090aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800908e:	f7fc fcab 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8009092:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009094:	e009      	b.n	80090aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800909c:	e005      	b.n	80090aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8130 	beq.w	8009312 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b6:	4a94      	ldr	r2, [pc, #592]	@ (8009308 <UART_SetConfig+0x5c4>)
 80090b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090bc:	461a      	mov	r2, r3
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4413      	add	r3, r2
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d305      	bcc.n	80090e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d903      	bls.n	80090ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090e8:	e113      	b.n	8009312 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ec:	2200      	movs	r2, #0
 80090ee:	60bb      	str	r3, [r7, #8]
 80090f0:	60fa      	str	r2, [r7, #12]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	4a84      	ldr	r2, [pc, #528]	@ (8009308 <UART_SetConfig+0x5c4>)
 80090f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	2200      	movs	r2, #0
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800910c:	f7f7 fd88 	bl	8000c20 <__aeabi_uldivmod>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4610      	mov	r0, r2
 8009116:	4619      	mov	r1, r3
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	020b      	lsls	r3, r1, #8
 8009122:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009126:	0202      	lsls	r2, r0, #8
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	6849      	ldr	r1, [r1, #4]
 800912c:	0849      	lsrs	r1, r1, #1
 800912e:	2000      	movs	r0, #0
 8009130:	460c      	mov	r4, r1
 8009132:	4605      	mov	r5, r0
 8009134:	eb12 0804 	adds.w	r8, r2, r4
 8009138:	eb43 0905 	adc.w	r9, r3, r5
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	469a      	mov	sl, r3
 8009144:	4693      	mov	fp, r2
 8009146:	4652      	mov	r2, sl
 8009148:	465b      	mov	r3, fp
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 fd67 	bl	8000c20 <__aeabi_uldivmod>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4613      	mov	r3, r2
 8009158:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009160:	d308      	bcc.n	8009174 <UART_SetConfig+0x430>
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009168:	d204      	bcs.n	8009174 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e0ce      	b.n	8009312 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800917a:	e0ca      	b.n	8009312 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009184:	d166      	bne.n	8009254 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009186:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800918a:	2b08      	cmp	r3, #8
 800918c:	d827      	bhi.n	80091de <UART_SetConfig+0x49a>
 800918e:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <UART_SetConfig+0x450>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091c1 	.word	0x080091c1
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	080091df 	.word	0x080091df
 80091a4:	080091cf 	.word	0x080091cf
 80091a8:	080091df 	.word	0x080091df
 80091ac:	080091df 	.word	0x080091df
 80091b0:	080091df 	.word	0x080091df
 80091b4:	080091d7 	.word	0x080091d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091b8:	f7fc fc84 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 80091bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091be:	e014      	b.n	80091ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091c0:	f7fc fc96 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 80091c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091c6:	e010      	b.n	80091ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009304 <UART_SetConfig+0x5c0>)
 80091ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091cc:	e00d      	b.n	80091ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ce:	f7fc fc0b 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 80091d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091d4:	e009      	b.n	80091ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091dc:	e005      	b.n	80091ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8090 	beq.w	8009312 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f6:	4a44      	ldr	r2, [pc, #272]	@ (8009308 <UART_SetConfig+0x5c4>)
 80091f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091fc:	461a      	mov	r2, r3
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	fbb3 f3f2 	udiv	r3, r3, r2
 8009204:	005a      	lsls	r2, r3, #1
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	085b      	lsrs	r3, r3, #1
 800920c:	441a      	add	r2, r3
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	fbb2 f3f3 	udiv	r3, r2, r3
 8009216:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	2b0f      	cmp	r3, #15
 800921c:	d916      	bls.n	800924c <UART_SetConfig+0x508>
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009224:	d212      	bcs.n	800924c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	b29b      	uxth	r3, r3
 800922a:	f023 030f 	bic.w	r3, r3, #15
 800922e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	b29b      	uxth	r3, r3
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	b29a      	uxth	r2, r3
 800923c:	8bfb      	ldrh	r3, [r7, #30]
 800923e:	4313      	orrs	r3, r2
 8009240:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	8bfa      	ldrh	r2, [r7, #30]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	e062      	b.n	8009312 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009252:	e05e      	b.n	8009312 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009254:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009258:	2b08      	cmp	r3, #8
 800925a:	d828      	bhi.n	80092ae <UART_SetConfig+0x56a>
 800925c:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <UART_SetConfig+0x520>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	080092af 	.word	0x080092af
 8009274:	0800929f 	.word	0x0800929f
 8009278:	080092af 	.word	0x080092af
 800927c:	080092af 	.word	0x080092af
 8009280:	080092af 	.word	0x080092af
 8009284:	080092a7 	.word	0x080092a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009288:	f7fc fc1c 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 800928c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800928e:	e014      	b.n	80092ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009290:	f7fc fc2e 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8009294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009296:	e010      	b.n	80092ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009298:	4b1a      	ldr	r3, [pc, #104]	@ (8009304 <UART_SetConfig+0x5c0>)
 800929a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800929c:	e00d      	b.n	80092ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800929e:	f7fc fba3 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 80092a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092a4:	e009      	b.n	80092ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092ac:	e005      	b.n	80092ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092b8:	bf00      	nop
    }

    if (pclk != 0U)
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d028      	beq.n	8009312 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	4a10      	ldr	r2, [pc, #64]	@ (8009308 <UART_SetConfig+0x5c4>)
 80092c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ca:	461a      	mov	r2, r3
 80092cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	085b      	lsrs	r3, r3, #1
 80092d8:	441a      	add	r2, r3
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d910      	bls.n	800930c <UART_SetConfig+0x5c8>
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f0:	d20c      	bcs.n	800930c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60da      	str	r2, [r3, #12]
 80092fc:	e009      	b.n	8009312 <UART_SetConfig+0x5ce>
 80092fe:	bf00      	nop
 8009300:	40008000 	.word	0x40008000
 8009304:	00f42400 	.word	0x00f42400
 8009308:	0800af08 	.word	0x0800af08
      }
      else
      {
        ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2201      	movs	r2, #1
 8009316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2201      	movs	r2, #1
 800931e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2200      	movs	r2, #0
 8009326:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2200      	movs	r2, #0
 800932c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800932e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009332:	4618      	mov	r0, r3
 8009334:	3730      	adds	r7, #48	@ 0x30
 8009336:	46bd      	mov	sp, r7
 8009338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800933c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009348:	f003 0308 	and.w	r3, r3, #8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01a      	beq.n	8009452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800943a:	d10a      	bne.n	8009452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	605a      	str	r2, [r3, #4]
  }
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b098      	sub	sp, #96	@ 0x60
 8009484:	af02      	add	r7, sp, #8
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009490:	f7fa ffa8 	bl	80043e4 <HAL_GetTick>
 8009494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0308 	and.w	r3, r3, #8
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d12f      	bne.n	8009504 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ac:	2200      	movs	r2, #0
 80094ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f88e 	bl	80095d4 <UART_WaitOnFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d022      	beq.n	8009504 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80094de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e6      	bne.n	80094be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e063      	b.n	80095cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b04      	cmp	r3, #4
 8009510:	d149      	bne.n	80095a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009512:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800951a:	2200      	movs	r2, #0
 800951c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f857 	bl	80095d4 <UART_WaitOnFlagUntilTimeout>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d03c      	beq.n	80095a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	623b      	str	r3, [r7, #32]
   return(result);
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954a:	633b      	str	r3, [r7, #48]	@ 0x30
 800954c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e6      	bne.n	800952c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3308      	adds	r3, #8
 8009564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	60fb      	str	r3, [r7, #12]
   return(result);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800957e:	61fa      	str	r2, [r7, #28]
 8009580:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	617b      	str	r3, [r7, #20]
   return(result);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e5      	bne.n	800955e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e012      	b.n	80095cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3758      	adds	r7, #88	@ 0x58
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095e4:	e04f      	b.n	8009686 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d04b      	beq.n	8009686 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ee:	f7fa fef9 	bl	80043e4 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d302      	bcc.n	8009604 <UART_WaitOnFlagUntilTimeout+0x30>
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e04e      	b.n	80096a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	d037      	beq.n	8009686 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b80      	cmp	r3, #128	@ 0x80
 800961a:	d034      	beq.n	8009686 <UART_WaitOnFlagUntilTimeout+0xb2>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b40      	cmp	r3, #64	@ 0x40
 8009620:	d031      	beq.n	8009686 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	2b08      	cmp	r3, #8
 800962e:	d110      	bne.n	8009652 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2208      	movs	r2, #8
 8009636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f920 	bl	800987e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2208      	movs	r2, #8
 8009642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e029      	b.n	80096a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800965c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009660:	d111      	bne.n	8009686 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800966a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f906 	bl	800987e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e00f      	b.n	80096a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69da      	ldr	r2, [r3, #28]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4013      	ands	r3, r2
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	429a      	cmp	r2, r3
 8009694:	bf0c      	ite	eq
 8009696:	2301      	moveq	r3, #1
 8009698:	2300      	movne	r3, #0
 800969a:	b2db      	uxtb	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d0a0      	beq.n	80095e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b096      	sub	sp, #88	@ 0x58
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	88fa      	ldrh	r2, [r7, #6]
 80096c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2222      	movs	r2, #34	@ 0x22
 80096d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d02d      	beq.n	8009742 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ec:	4a40      	ldr	r2, [pc, #256]	@ (80097f0 <UART_Start_Receive_DMA+0x140>)
 80096ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f6:	4a3f      	ldr	r2, [pc, #252]	@ (80097f4 <UART_Start_Receive_DMA+0x144>)
 80096f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009700:	4a3d      	ldr	r2, [pc, #244]	@ (80097f8 <UART_Start_Receive_DMA+0x148>)
 8009702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970a:	2200      	movs	r2, #0
 800970c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3324      	adds	r3, #36	@ 0x24
 800971a:	4619      	mov	r1, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009720:	461a      	mov	r2, r3
 8009722:	88fb      	ldrh	r3, [r7, #6]
 8009724:	f7fb f822 	bl	800476c <HAL_DMA_Start_IT>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d009      	beq.n	8009742 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2210      	movs	r2, #16
 8009732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e051      	b.n	80097e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d018      	beq.n	800977c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800975e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800976a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800976e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e6      	bne.n	800974a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	f043 0301 	orr.w	r3, r3, #1
 8009792:	653b      	str	r3, [r7, #80]	@ 0x50
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800979c:	637a      	str	r2, [r7, #52]	@ 0x34
 800979e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80097aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e5      	bne.n	800977c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	613b      	str	r3, [r7, #16]
   return(result);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097d0:	623a      	str	r2, [r7, #32]
 80097d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	6a3a      	ldr	r2, [r7, #32]
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3758      	adds	r7, #88	@ 0x58
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	08009a09 	.word	0x08009a09
 80097f4:	08009b3d 	.word	0x08009b3d
 80097f8:	08009b83 	.word	0x08009b83

080097fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b08f      	sub	sp, #60	@ 0x3c
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	61fb      	str	r3, [r7, #28]
   return(result);
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009824:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e6      	bne.n	8009804 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3308      	adds	r3, #8
 800983c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	60bb      	str	r3, [r7, #8]
   return(result);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800984c:	633b      	str	r3, [r7, #48]	@ 0x30
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009856:	61ba      	str	r2, [r7, #24]
 8009858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6979      	ldr	r1, [r7, #20]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	613b      	str	r3, [r7, #16]
   return(result);
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e5      	bne.n	8009836 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009872:	bf00      	nop
 8009874:	373c      	adds	r7, #60	@ 0x3c
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800987e:	b480      	push	{r7}
 8009880:	b095      	sub	sp, #84	@ 0x54
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800989a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80098a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e6      	bne.n	8009886 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3308      	adds	r3, #8
 80098be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098ce:	f023 0301 	bic.w	r3, r3, #1
 80098d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e3      	bne.n	80098b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d118      	bne.n	800992a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	60bb      	str	r3, [r7, #8]
   return(result);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f023 0310 	bic.w	r3, r3, #16
 800990c:	647b      	str	r3, [r7, #68]	@ 0x44
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6979      	ldr	r1, [r7, #20]
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	613b      	str	r3, [r7, #16]
   return(result);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800993e:	bf00      	nop
 8009940:	3754      	adds	r7, #84	@ 0x54
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b090      	sub	sp, #64	@ 0x40
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d137      	bne.n	80099d6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009968:	2200      	movs	r2, #0
 800996a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800996e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	623b      	str	r3, [r7, #32]
   return(result);
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3308      	adds	r3, #8
 800998c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800998e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e5      	bne.n	800996e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	69b9      	ldr	r1, [r7, #24]
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	617b      	str	r3, [r7, #20]
   return(result);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099d4:	e004      	b.n	80099e0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80099de:	4798      	blx	r3
}
 80099e0:	bf00      	nop
 80099e2:	3740      	adds	r7, #64	@ 0x40
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b09c      	sub	sp, #112	@ 0x70
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d171      	bne.n	8009b08 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e6      	bne.n	8009a2c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3308      	adds	r3, #8
 8009a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e5      	bne.n	8009a5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3308      	adds	r3, #8
 8009ab0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009ab2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e5      	bne.n	8009a92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d118      	bne.n	8009b08 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0310 	bic.w	r3, r3, #16
 8009aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	69b9      	ldr	r1, [r7, #24]
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	617b      	str	r3, [r7, #20]
   return(result);
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e6      	bne.n	8009ad6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d109      	bne.n	8009b2a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b1e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b22:	4611      	mov	r1, r2
 8009b24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b26:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b28:	e004      	b.n	8009b34 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8009b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b32:	4798      	blx	r3
}
 8009b34:	bf00      	nop
 8009b36:	3770      	adds	r7, #112	@ 0x70
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d10b      	bne.n	8009b70 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b64:	0852      	lsrs	r2, r2, #1
 8009b66:	b292      	uxth	r2, r2
 8009b68:	4611      	mov	r1, r2
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b6e:	e004      	b.n	8009b7a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	4798      	blx	r3
}
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009baa:	2b80      	cmp	r3, #128	@ 0x80
 8009bac:	d109      	bne.n	8009bc2 <UART_DMAError+0x40>
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2b21      	cmp	r3, #33	@ 0x21
 8009bb2:	d106      	bne.n	8009bc2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009bbc:	6978      	ldr	r0, [r7, #20]
 8009bbe:	f7ff fe1d 	bl	80097fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bcc:	2b40      	cmp	r3, #64	@ 0x40
 8009bce:	d109      	bne.n	8009be4 <UART_DMAError+0x62>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b22      	cmp	r3, #34	@ 0x22
 8009bd4:	d106      	bne.n	8009be4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009bde:	6978      	ldr	r0, [r7, #20]
 8009be0:	f7ff fe4d 	bl	800987e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bea:	f043 0210 	orr.w	r2, r3, #16
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009bfa:	6978      	ldr	r0, [r7, #20]
 8009bfc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bfe:	bf00      	nop
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c2e:	bf00      	nop
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b088      	sub	sp, #32
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6979      	ldr	r1, [r7, #20]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e6      	bne.n	8009c3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c88:	bf00      	nop
 8009c8a:	3720      	adds	r7, #32
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e027      	b.n	8009d32 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2224      	movs	r2, #36	@ 0x24
 8009cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0201 	bic.w	r2, r2, #1
 8009d08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2220      	movs	r2, #32
 8009d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d101      	bne.n	8009d56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d52:	2302      	movs	r3, #2
 8009d54:	e02d      	b.n	8009db2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2224      	movs	r2, #36	@ 0x24
 8009d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0201 	bic.w	r2, r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f850 	bl	8009e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d101      	bne.n	8009dd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e02d      	b.n	8009e2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2224      	movs	r2, #36	@ 0x24
 8009dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0201 	bic.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f812 	bl	8009e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d108      	bne.n	8009e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e58:	e031      	b.n	8009ebe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e5e:	2308      	movs	r3, #8
 8009e60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	0e5b      	lsrs	r3, r3, #25
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	0f5b      	lsrs	r3, r3, #29
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0307 	and.w	r3, r3, #7
 8009e80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	7b3a      	ldrb	r2, [r7, #12]
 8009e86:	4911      	ldr	r1, [pc, #68]	@ (8009ecc <UARTEx_SetNbDataToProcess+0x94>)
 8009e88:	5c8a      	ldrb	r2, [r1, r2]
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e8e:	7b3a      	ldrb	r2, [r7, #12]
 8009e90:	490f      	ldr	r1, [pc, #60]	@ (8009ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8009e92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	7b7a      	ldrb	r2, [r7, #13]
 8009ea4:	4909      	ldr	r1, [pc, #36]	@ (8009ecc <UARTEx_SetNbDataToProcess+0x94>)
 8009ea6:	5c8a      	ldrb	r2, [r1, r2]
 8009ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eac:	7b7a      	ldrb	r2, [r7, #13]
 8009eae:	4908      	ldr	r1, [pc, #32]	@ (8009ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8009eb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ebe:	bf00      	nop
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	0800af20 	.word	0x0800af20
 8009ed0:	0800af28 	.word	0x0800af28

08009ed4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	ed93 7a06 	vldr	s14, [r3, #24]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	edd3 7a07 	vldr	s15, [r3, #28]
 8009eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	edd3 7a08 	vldr	s15, [r3, #32]
 8009ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	edd3 7a06 	vldr	s15, [r3, #24]
 8009f04:	eeb1 7a67 	vneg.f32	s14, s15
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8009f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1a      	ldr	r2, [r3, #32]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d006      	beq.n	8009f38 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	330c      	adds	r3, #12
 8009f2e:	220c      	movs	r2, #12
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f804 	bl	8009f40 <memset>
  }

}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <memset>:
 8009f40:	4402      	add	r2, r0
 8009f42:	4603      	mov	r3, r0
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d100      	bne.n	8009f4a <memset+0xa>
 8009f48:	4770      	bx	lr
 8009f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4e:	e7f9      	b.n	8009f44 <memset+0x4>

08009f50 <__errno>:
 8009f50:	4b01      	ldr	r3, [pc, #4]	@ (8009f58 <__errno+0x8>)
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	2000024c 	.word	0x2000024c

08009f5c <__libc_init_array>:
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8009f94 <__libc_init_array+0x38>)
 8009f60:	4c0d      	ldr	r4, [pc, #52]	@ (8009f98 <__libc_init_array+0x3c>)
 8009f62:	1b64      	subs	r4, r4, r5
 8009f64:	10a4      	asrs	r4, r4, #2
 8009f66:	2600      	movs	r6, #0
 8009f68:	42a6      	cmp	r6, r4
 8009f6a:	d109      	bne.n	8009f80 <__libc_init_array+0x24>
 8009f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f9c <__libc_init_array+0x40>)
 8009f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa0 <__libc_init_array+0x44>)
 8009f70:	f000 ffb2 	bl	800aed8 <_init>
 8009f74:	1b64      	subs	r4, r4, r5
 8009f76:	10a4      	asrs	r4, r4, #2
 8009f78:	2600      	movs	r6, #0
 8009f7a:	42a6      	cmp	r6, r4
 8009f7c:	d105      	bne.n	8009f8a <__libc_init_array+0x2e>
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f84:	4798      	blx	r3
 8009f86:	3601      	adds	r6, #1
 8009f88:	e7ee      	b.n	8009f68 <__libc_init_array+0xc>
 8009f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8e:	4798      	blx	r3
 8009f90:	3601      	adds	r6, #1
 8009f92:	e7f2      	b.n	8009f7a <__libc_init_array+0x1e>
 8009f94:	0800af68 	.word	0x0800af68
 8009f98:	0800af68 	.word	0x0800af68
 8009f9c:	0800af68 	.word	0x0800af68
 8009fa0:	0800af6c 	.word	0x0800af6c

08009fa4 <memcpy>:
 8009fa4:	440a      	add	r2, r1
 8009fa6:	4291      	cmp	r1, r2
 8009fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fac:	d100      	bne.n	8009fb0 <memcpy+0xc>
 8009fae:	4770      	bx	lr
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fba:	4291      	cmp	r1, r2
 8009fbc:	d1f9      	bne.n	8009fb2 <memcpy+0xe>
 8009fbe:	bd10      	pop	{r4, pc}

08009fc0 <pow>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	ed2d 8b02 	vpush	{d8}
 8009fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8009fca:	eef0 8a60 	vmov.f32	s17, s1
 8009fce:	ec55 4b11 	vmov	r4, r5, d1
 8009fd2:	f000 f979 	bl	800a2c8 <__ieee754_pow>
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	4620      	mov	r0, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	ec57 6b10 	vmov	r6, r7, d0
 8009fe2:	f7f6 fd6f 	bl	8000ac4 <__aeabi_dcmpun>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d13b      	bne.n	800a062 <pow+0xa2>
 8009fea:	ec51 0b18 	vmov	r0, r1, d8
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f7f6 fd35 	bl	8000a60 <__aeabi_dcmpeq>
 8009ff6:	b1b8      	cbz	r0, 800a028 <pow+0x68>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 fd2e 	bl	8000a60 <__aeabi_dcmpeq>
 800a004:	2800      	cmp	r0, #0
 800a006:	d146      	bne.n	800a096 <pow+0xd6>
 800a008:	ec45 4b10 	vmov	d0, r4, r5
 800a00c:	f000 f874 	bl	800a0f8 <finite>
 800a010:	b338      	cbz	r0, 800a062 <pow+0xa2>
 800a012:	2200      	movs	r2, #0
 800a014:	2300      	movs	r3, #0
 800a016:	4620      	mov	r0, r4
 800a018:	4629      	mov	r1, r5
 800a01a:	f7f6 fd2b 	bl	8000a74 <__aeabi_dcmplt>
 800a01e:	b300      	cbz	r0, 800a062 <pow+0xa2>
 800a020:	f7ff ff96 	bl	8009f50 <__errno>
 800a024:	2322      	movs	r3, #34	@ 0x22
 800a026:	e01b      	b.n	800a060 <pow+0xa0>
 800a028:	ec47 6b10 	vmov	d0, r6, r7
 800a02c:	f000 f864 	bl	800a0f8 <finite>
 800a030:	b9e0      	cbnz	r0, 800a06c <pow+0xac>
 800a032:	eeb0 0a48 	vmov.f32	s0, s16
 800a036:	eef0 0a68 	vmov.f32	s1, s17
 800a03a:	f000 f85d 	bl	800a0f8 <finite>
 800a03e:	b1a8      	cbz	r0, 800a06c <pow+0xac>
 800a040:	ec45 4b10 	vmov	d0, r4, r5
 800a044:	f000 f858 	bl	800a0f8 <finite>
 800a048:	b180      	cbz	r0, 800a06c <pow+0xac>
 800a04a:	4632      	mov	r2, r6
 800a04c:	463b      	mov	r3, r7
 800a04e:	4630      	mov	r0, r6
 800a050:	4639      	mov	r1, r7
 800a052:	f7f6 fd37 	bl	8000ac4 <__aeabi_dcmpun>
 800a056:	2800      	cmp	r0, #0
 800a058:	d0e2      	beq.n	800a020 <pow+0x60>
 800a05a:	f7ff ff79 	bl	8009f50 <__errno>
 800a05e:	2321      	movs	r3, #33	@ 0x21
 800a060:	6003      	str	r3, [r0, #0]
 800a062:	ecbd 8b02 	vpop	{d8}
 800a066:	ec47 6b10 	vmov	d0, r6, r7
 800a06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06c:	2200      	movs	r2, #0
 800a06e:	2300      	movs	r3, #0
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fcf4 	bl	8000a60 <__aeabi_dcmpeq>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d0f2      	beq.n	800a062 <pow+0xa2>
 800a07c:	eeb0 0a48 	vmov.f32	s0, s16
 800a080:	eef0 0a68 	vmov.f32	s1, s17
 800a084:	f000 f838 	bl	800a0f8 <finite>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d0ea      	beq.n	800a062 <pow+0xa2>
 800a08c:	ec45 4b10 	vmov	d0, r4, r5
 800a090:	f000 f832 	bl	800a0f8 <finite>
 800a094:	e7c3      	b.n	800a01e <pow+0x5e>
 800a096:	4f01      	ldr	r7, [pc, #4]	@ (800a09c <pow+0xdc>)
 800a098:	2600      	movs	r6, #0
 800a09a:	e7e2      	b.n	800a062 <pow+0xa2>
 800a09c:	3ff00000 	.word	0x3ff00000

0800a0a0 <sqrt>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	ed2d 8b02 	vpush	{d8}
 800a0a6:	ec55 4b10 	vmov	r4, r5, d0
 800a0aa:	f000 f831 	bl	800a110 <__ieee754_sqrt>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	eeb0 8a40 	vmov.f32	s16, s0
 800a0ba:	eef0 8a60 	vmov.f32	s17, s1
 800a0be:	f7f6 fd01 	bl	8000ac4 <__aeabi_dcmpun>
 800a0c2:	b990      	cbnz	r0, 800a0ea <sqrt+0x4a>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	f7f6 fcd2 	bl	8000a74 <__aeabi_dcmplt>
 800a0d0:	b158      	cbz	r0, 800a0ea <sqrt+0x4a>
 800a0d2:	f7ff ff3d 	bl	8009f50 <__errno>
 800a0d6:	2321      	movs	r3, #33	@ 0x21
 800a0d8:	6003      	str	r3, [r0, #0]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f7f6 fb7f 	bl	80007e4 <__aeabi_ddiv>
 800a0e6:	ec41 0b18 	vmov	d8, r0, r1
 800a0ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a0ee:	eef0 0a68 	vmov.f32	s1, s17
 800a0f2:	ecbd 8b02 	vpop	{d8}
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}

0800a0f8 <finite>:
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	ed8d 0b00 	vstr	d0, [sp]
 800a0fe:	9801      	ldr	r0, [sp, #4]
 800a100:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a104:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a108:	0fc0      	lsrs	r0, r0, #31
 800a10a:	b002      	add	sp, #8
 800a10c:	4770      	bx	lr
	...

0800a110 <__ieee754_sqrt>:
 800a110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	4a68      	ldr	r2, [pc, #416]	@ (800a2b8 <__ieee754_sqrt+0x1a8>)
 800a116:	ec55 4b10 	vmov	r4, r5, d0
 800a11a:	43aa      	bics	r2, r5
 800a11c:	462b      	mov	r3, r5
 800a11e:	4621      	mov	r1, r4
 800a120:	d110      	bne.n	800a144 <__ieee754_sqrt+0x34>
 800a122:	4622      	mov	r2, r4
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 fa32 	bl	8000590 <__aeabi_dmul>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4620      	mov	r0, r4
 800a132:	4629      	mov	r1, r5
 800a134:	f7f6 f876 	bl	8000224 <__adddf3>
 800a138:	4604      	mov	r4, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	ec45 4b10 	vmov	d0, r4, r5
 800a140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	2d00      	cmp	r5, #0
 800a146:	dc0e      	bgt.n	800a166 <__ieee754_sqrt+0x56>
 800a148:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a14c:	4322      	orrs	r2, r4
 800a14e:	d0f5      	beq.n	800a13c <__ieee754_sqrt+0x2c>
 800a150:	b19d      	cbz	r5, 800a17a <__ieee754_sqrt+0x6a>
 800a152:	4622      	mov	r2, r4
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 f862 	bl	8000220 <__aeabi_dsub>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	f7f6 fb40 	bl	80007e4 <__aeabi_ddiv>
 800a164:	e7e8      	b.n	800a138 <__ieee754_sqrt+0x28>
 800a166:	152a      	asrs	r2, r5, #20
 800a168:	d115      	bne.n	800a196 <__ieee754_sqrt+0x86>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e009      	b.n	800a182 <__ieee754_sqrt+0x72>
 800a16e:	0acb      	lsrs	r3, r1, #11
 800a170:	3a15      	subs	r2, #21
 800a172:	0549      	lsls	r1, r1, #21
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0fa      	beq.n	800a16e <__ieee754_sqrt+0x5e>
 800a178:	e7f7      	b.n	800a16a <__ieee754_sqrt+0x5a>
 800a17a:	462a      	mov	r2, r5
 800a17c:	e7fa      	b.n	800a174 <__ieee754_sqrt+0x64>
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	3001      	adds	r0, #1
 800a182:	02dc      	lsls	r4, r3, #11
 800a184:	d5fb      	bpl.n	800a17e <__ieee754_sqrt+0x6e>
 800a186:	1e44      	subs	r4, r0, #1
 800a188:	1b12      	subs	r2, r2, r4
 800a18a:	f1c0 0420 	rsb	r4, r0, #32
 800a18e:	fa21 f404 	lsr.w	r4, r1, r4
 800a192:	4323      	orrs	r3, r4
 800a194:	4081      	lsls	r1, r0
 800a196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a19a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a19e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1a2:	07d2      	lsls	r2, r2, #31
 800a1a4:	bf5c      	itt	pl
 800a1a6:	005b      	lslpl	r3, r3, #1
 800a1a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a1ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1b0:	bf58      	it	pl
 800a1b2:	0049      	lslpl	r1, r1, #1
 800a1b4:	2600      	movs	r6, #0
 800a1b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a1ba:	106d      	asrs	r5, r5, #1
 800a1bc:	0049      	lsls	r1, r1, #1
 800a1be:	2016      	movs	r0, #22
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a1c6:	1917      	adds	r7, r2, r4
 800a1c8:	429f      	cmp	r7, r3
 800a1ca:	bfde      	ittt	le
 800a1cc:	193a      	addle	r2, r7, r4
 800a1ce:	1bdb      	suble	r3, r3, r7
 800a1d0:	1936      	addle	r6, r6, r4
 800a1d2:	0fcf      	lsrs	r7, r1, #31
 800a1d4:	3801      	subs	r0, #1
 800a1d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a1da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a1de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a1e2:	d1f0      	bne.n	800a1c6 <__ieee754_sqrt+0xb6>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	2720      	movs	r7, #32
 800a1e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	eb00 0e0c 	add.w	lr, r0, ip
 800a1f2:	db02      	blt.n	800a1fa <__ieee754_sqrt+0xea>
 800a1f4:	d113      	bne.n	800a21e <__ieee754_sqrt+0x10e>
 800a1f6:	458e      	cmp	lr, r1
 800a1f8:	d811      	bhi.n	800a21e <__ieee754_sqrt+0x10e>
 800a1fa:	f1be 0f00 	cmp.w	lr, #0
 800a1fe:	eb0e 000c 	add.w	r0, lr, ip
 800a202:	da42      	bge.n	800a28a <__ieee754_sqrt+0x17a>
 800a204:	2800      	cmp	r0, #0
 800a206:	db40      	blt.n	800a28a <__ieee754_sqrt+0x17a>
 800a208:	f102 0801 	add.w	r8, r2, #1
 800a20c:	1a9b      	subs	r3, r3, r2
 800a20e:	458e      	cmp	lr, r1
 800a210:	bf88      	it	hi
 800a212:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a216:	eba1 010e 	sub.w	r1, r1, lr
 800a21a:	4464      	add	r4, ip
 800a21c:	4642      	mov	r2, r8
 800a21e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a222:	3f01      	subs	r7, #1
 800a224:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a228:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a22c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a230:	d1dc      	bne.n	800a1ec <__ieee754_sqrt+0xdc>
 800a232:	4319      	orrs	r1, r3
 800a234:	d01b      	beq.n	800a26e <__ieee754_sqrt+0x15e>
 800a236:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a2bc <__ieee754_sqrt+0x1ac>
 800a23a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a2c0 <__ieee754_sqrt+0x1b0>
 800a23e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a242:	e9db 2300 	ldrd	r2, r3, [fp]
 800a246:	f7f5 ffeb 	bl	8000220 <__aeabi_dsub>
 800a24a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4640      	mov	r0, r8
 800a254:	4649      	mov	r1, r9
 800a256:	f7f6 fc17 	bl	8000a88 <__aeabi_dcmple>
 800a25a:	b140      	cbz	r0, 800a26e <__ieee754_sqrt+0x15e>
 800a25c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a260:	e9da 0100 	ldrd	r0, r1, [sl]
 800a264:	e9db 2300 	ldrd	r2, r3, [fp]
 800a268:	d111      	bne.n	800a28e <__ieee754_sqrt+0x17e>
 800a26a:	3601      	adds	r6, #1
 800a26c:	463c      	mov	r4, r7
 800a26e:	1072      	asrs	r2, r6, #1
 800a270:	0863      	lsrs	r3, r4, #1
 800a272:	07f1      	lsls	r1, r6, #31
 800a274:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a278:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a27c:	bf48      	it	mi
 800a27e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a282:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a286:	4618      	mov	r0, r3
 800a288:	e756      	b.n	800a138 <__ieee754_sqrt+0x28>
 800a28a:	4690      	mov	r8, r2
 800a28c:	e7be      	b.n	800a20c <__ieee754_sqrt+0xfc>
 800a28e:	f7f5 ffc9 	bl	8000224 <__adddf3>
 800a292:	e9da 8900 	ldrd	r8, r9, [sl]
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	f7f6 fbe9 	bl	8000a74 <__aeabi_dcmplt>
 800a2a2:	b120      	cbz	r0, 800a2ae <__ieee754_sqrt+0x19e>
 800a2a4:	1ca0      	adds	r0, r4, #2
 800a2a6:	bf08      	it	eq
 800a2a8:	3601      	addeq	r6, #1
 800a2aa:	3402      	adds	r4, #2
 800a2ac:	e7df      	b.n	800a26e <__ieee754_sqrt+0x15e>
 800a2ae:	1c63      	adds	r3, r4, #1
 800a2b0:	f023 0401 	bic.w	r4, r3, #1
 800a2b4:	e7db      	b.n	800a26e <__ieee754_sqrt+0x15e>
 800a2b6:	bf00      	nop
 800a2b8:	7ff00000 	.word	0x7ff00000
 800a2bc:	200002a8 	.word	0x200002a8
 800a2c0:	200002a0 	.word	0x200002a0
 800a2c4:	00000000 	.word	0x00000000

0800a2c8 <__ieee754_pow>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	b091      	sub	sp, #68	@ 0x44
 800a2ce:	ed8d 1b00 	vstr	d1, [sp]
 800a2d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a2d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a2da:	ea5a 0001 	orrs.w	r0, sl, r1
 800a2de:	ec57 6b10 	vmov	r6, r7, d0
 800a2e2:	d113      	bne.n	800a30c <__ieee754_pow+0x44>
 800a2e4:	19b3      	adds	r3, r6, r6
 800a2e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a2ea:	4152      	adcs	r2, r2
 800a2ec:	4298      	cmp	r0, r3
 800a2ee:	4b98      	ldr	r3, [pc, #608]	@ (800a550 <__ieee754_pow+0x288>)
 800a2f0:	4193      	sbcs	r3, r2
 800a2f2:	f080 84ea 	bcs.w	800acca <__ieee754_pow+0xa02>
 800a2f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	f7f5 ff91 	bl	8000224 <__adddf3>
 800a302:	ec41 0b10 	vmov	d0, r0, r1
 800a306:	b011      	add	sp, #68	@ 0x44
 800a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30c:	4a91      	ldr	r2, [pc, #580]	@ (800a554 <__ieee754_pow+0x28c>)
 800a30e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a312:	4590      	cmp	r8, r2
 800a314:	463d      	mov	r5, r7
 800a316:	4633      	mov	r3, r6
 800a318:	d806      	bhi.n	800a328 <__ieee754_pow+0x60>
 800a31a:	d101      	bne.n	800a320 <__ieee754_pow+0x58>
 800a31c:	2e00      	cmp	r6, #0
 800a31e:	d1ea      	bne.n	800a2f6 <__ieee754_pow+0x2e>
 800a320:	4592      	cmp	sl, r2
 800a322:	d801      	bhi.n	800a328 <__ieee754_pow+0x60>
 800a324:	d10e      	bne.n	800a344 <__ieee754_pow+0x7c>
 800a326:	b169      	cbz	r1, 800a344 <__ieee754_pow+0x7c>
 800a328:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a32c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a330:	431d      	orrs	r5, r3
 800a332:	d1e0      	bne.n	800a2f6 <__ieee754_pow+0x2e>
 800a334:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a338:	18db      	adds	r3, r3, r3
 800a33a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a33e:	4152      	adcs	r2, r2
 800a340:	429d      	cmp	r5, r3
 800a342:	e7d4      	b.n	800a2ee <__ieee754_pow+0x26>
 800a344:	2d00      	cmp	r5, #0
 800a346:	46c3      	mov	fp, r8
 800a348:	da3a      	bge.n	800a3c0 <__ieee754_pow+0xf8>
 800a34a:	4a83      	ldr	r2, [pc, #524]	@ (800a558 <__ieee754_pow+0x290>)
 800a34c:	4592      	cmp	sl, r2
 800a34e:	d84d      	bhi.n	800a3ec <__ieee754_pow+0x124>
 800a350:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a354:	4592      	cmp	sl, r2
 800a356:	f240 84c7 	bls.w	800ace8 <__ieee754_pow+0xa20>
 800a35a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a35e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a362:	2a14      	cmp	r2, #20
 800a364:	dd0f      	ble.n	800a386 <__ieee754_pow+0xbe>
 800a366:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a36a:	fa21 f402 	lsr.w	r4, r1, r2
 800a36e:	fa04 f202 	lsl.w	r2, r4, r2
 800a372:	428a      	cmp	r2, r1
 800a374:	f040 84b8 	bne.w	800ace8 <__ieee754_pow+0xa20>
 800a378:	f004 0401 	and.w	r4, r4, #1
 800a37c:	f1c4 0402 	rsb	r4, r4, #2
 800a380:	2900      	cmp	r1, #0
 800a382:	d158      	bne.n	800a436 <__ieee754_pow+0x16e>
 800a384:	e00e      	b.n	800a3a4 <__ieee754_pow+0xdc>
 800a386:	2900      	cmp	r1, #0
 800a388:	d154      	bne.n	800a434 <__ieee754_pow+0x16c>
 800a38a:	f1c2 0214 	rsb	r2, r2, #20
 800a38e:	fa4a f402 	asr.w	r4, sl, r2
 800a392:	fa04 f202 	lsl.w	r2, r4, r2
 800a396:	4552      	cmp	r2, sl
 800a398:	f040 84a3 	bne.w	800ace2 <__ieee754_pow+0xa1a>
 800a39c:	f004 0401 	and.w	r4, r4, #1
 800a3a0:	f1c4 0402 	rsb	r4, r4, #2
 800a3a4:	4a6d      	ldr	r2, [pc, #436]	@ (800a55c <__ieee754_pow+0x294>)
 800a3a6:	4592      	cmp	sl, r2
 800a3a8:	d12e      	bne.n	800a408 <__ieee754_pow+0x140>
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	f280 8494 	bge.w	800acda <__ieee754_pow+0xa12>
 800a3b2:	496a      	ldr	r1, [pc, #424]	@ (800a55c <__ieee754_pow+0x294>)
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	463b      	mov	r3, r7
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f7f6 fa13 	bl	80007e4 <__aeabi_ddiv>
 800a3be:	e7a0      	b.n	800a302 <__ieee754_pow+0x3a>
 800a3c0:	2400      	movs	r4, #0
 800a3c2:	bbc1      	cbnz	r1, 800a436 <__ieee754_pow+0x16e>
 800a3c4:	4a63      	ldr	r2, [pc, #396]	@ (800a554 <__ieee754_pow+0x28c>)
 800a3c6:	4592      	cmp	sl, r2
 800a3c8:	d1ec      	bne.n	800a3a4 <__ieee754_pow+0xdc>
 800a3ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a3ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	f000 8479 	beq.w	800acca <__ieee754_pow+0xa02>
 800a3d8:	4b61      	ldr	r3, [pc, #388]	@ (800a560 <__ieee754_pow+0x298>)
 800a3da:	4598      	cmp	r8, r3
 800a3dc:	d908      	bls.n	800a3f0 <__ieee754_pow+0x128>
 800a3de:	f1b9 0f00 	cmp.w	r9, #0
 800a3e2:	f2c0 8476 	blt.w	800acd2 <__ieee754_pow+0xa0a>
 800a3e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ea:	e78a      	b.n	800a302 <__ieee754_pow+0x3a>
 800a3ec:	2402      	movs	r4, #2
 800a3ee:	e7e8      	b.n	800a3c2 <__ieee754_pow+0xfa>
 800a3f0:	f1b9 0f00 	cmp.w	r9, #0
 800a3f4:	f04f 0000 	mov.w	r0, #0
 800a3f8:	f04f 0100 	mov.w	r1, #0
 800a3fc:	da81      	bge.n	800a302 <__ieee754_pow+0x3a>
 800a3fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a402:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a406:	e77c      	b.n	800a302 <__ieee754_pow+0x3a>
 800a408:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a40c:	d106      	bne.n	800a41c <__ieee754_pow+0x154>
 800a40e:	4632      	mov	r2, r6
 800a410:	463b      	mov	r3, r7
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f6 f8bb 	bl	8000590 <__aeabi_dmul>
 800a41a:	e772      	b.n	800a302 <__ieee754_pow+0x3a>
 800a41c:	4a51      	ldr	r2, [pc, #324]	@ (800a564 <__ieee754_pow+0x29c>)
 800a41e:	4591      	cmp	r9, r2
 800a420:	d109      	bne.n	800a436 <__ieee754_pow+0x16e>
 800a422:	2d00      	cmp	r5, #0
 800a424:	db07      	blt.n	800a436 <__ieee754_pow+0x16e>
 800a426:	ec47 6b10 	vmov	d0, r6, r7
 800a42a:	b011      	add	sp, #68	@ 0x44
 800a42c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	f7ff be6e 	b.w	800a110 <__ieee754_sqrt>
 800a434:	2400      	movs	r4, #0
 800a436:	ec47 6b10 	vmov	d0, r6, r7
 800a43a:	9302      	str	r3, [sp, #8]
 800a43c:	f000 fc88 	bl	800ad50 <fabs>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	ec51 0b10 	vmov	r0, r1, d0
 800a446:	bb53      	cbnz	r3, 800a49e <__ieee754_pow+0x1d6>
 800a448:	4b44      	ldr	r3, [pc, #272]	@ (800a55c <__ieee754_pow+0x294>)
 800a44a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a44e:	429a      	cmp	r2, r3
 800a450:	d002      	beq.n	800a458 <__ieee754_pow+0x190>
 800a452:	f1b8 0f00 	cmp.w	r8, #0
 800a456:	d122      	bne.n	800a49e <__ieee754_pow+0x1d6>
 800a458:	f1b9 0f00 	cmp.w	r9, #0
 800a45c:	da05      	bge.n	800a46a <__ieee754_pow+0x1a2>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	2000      	movs	r0, #0
 800a464:	493d      	ldr	r1, [pc, #244]	@ (800a55c <__ieee754_pow+0x294>)
 800a466:	f7f6 f9bd 	bl	80007e4 <__aeabi_ddiv>
 800a46a:	2d00      	cmp	r5, #0
 800a46c:	f6bf af49 	bge.w	800a302 <__ieee754_pow+0x3a>
 800a470:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a474:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a478:	ea58 0804 	orrs.w	r8, r8, r4
 800a47c:	d108      	bne.n	800a490 <__ieee754_pow+0x1c8>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4610      	mov	r0, r2
 800a484:	4619      	mov	r1, r3
 800a486:	f7f5 fecb 	bl	8000220 <__aeabi_dsub>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	e794      	b.n	800a3ba <__ieee754_pow+0xf2>
 800a490:	2c01      	cmp	r4, #1
 800a492:	f47f af36 	bne.w	800a302 <__ieee754_pow+0x3a>
 800a496:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a49a:	4619      	mov	r1, r3
 800a49c:	e731      	b.n	800a302 <__ieee754_pow+0x3a>
 800a49e:	0feb      	lsrs	r3, r5, #31
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	ea53 0204 	orrs.w	r2, r3, r4
 800a4a6:	d102      	bne.n	800a4ae <__ieee754_pow+0x1e6>
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	e7e9      	b.n	800a482 <__ieee754_pow+0x1ba>
 800a4ae:	3c01      	subs	r4, #1
 800a4b0:	431c      	orrs	r4, r3
 800a4b2:	d016      	beq.n	800a4e2 <__ieee754_pow+0x21a>
 800a4b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a540 <__ieee754_pow+0x278>
 800a4b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a4bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4c0:	f240 8112 	bls.w	800a6e8 <__ieee754_pow+0x420>
 800a4c4:	4b28      	ldr	r3, [pc, #160]	@ (800a568 <__ieee754_pow+0x2a0>)
 800a4c6:	459a      	cmp	sl, r3
 800a4c8:	4b25      	ldr	r3, [pc, #148]	@ (800a560 <__ieee754_pow+0x298>)
 800a4ca:	d916      	bls.n	800a4fa <__ieee754_pow+0x232>
 800a4cc:	4598      	cmp	r8, r3
 800a4ce:	d80b      	bhi.n	800a4e8 <__ieee754_pow+0x220>
 800a4d0:	f1b9 0f00 	cmp.w	r9, #0
 800a4d4:	da0b      	bge.n	800a4ee <__ieee754_pow+0x226>
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	b011      	add	sp, #68	@ 0x44
 800a4da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4de:	f000 bcf3 	b.w	800aec8 <__math_oflow>
 800a4e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a548 <__ieee754_pow+0x280>
 800a4e6:	e7e7      	b.n	800a4b8 <__ieee754_pow+0x1f0>
 800a4e8:	f1b9 0f00 	cmp.w	r9, #0
 800a4ec:	dcf3      	bgt.n	800a4d6 <__ieee754_pow+0x20e>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	b011      	add	sp, #68	@ 0x44
 800a4f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	f000 bcdf 	b.w	800aeb8 <__math_uflow>
 800a4fa:	4598      	cmp	r8, r3
 800a4fc:	d20c      	bcs.n	800a518 <__ieee754_pow+0x250>
 800a4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a502:	2200      	movs	r2, #0
 800a504:	2300      	movs	r3, #0
 800a506:	f7f6 fab5 	bl	8000a74 <__aeabi_dcmplt>
 800a50a:	3800      	subs	r0, #0
 800a50c:	bf18      	it	ne
 800a50e:	2001      	movne	r0, #1
 800a510:	f1b9 0f00 	cmp.w	r9, #0
 800a514:	daec      	bge.n	800a4f0 <__ieee754_pow+0x228>
 800a516:	e7df      	b.n	800a4d8 <__ieee754_pow+0x210>
 800a518:	4b10      	ldr	r3, [pc, #64]	@ (800a55c <__ieee754_pow+0x294>)
 800a51a:	4598      	cmp	r8, r3
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	d924      	bls.n	800a56c <__ieee754_pow+0x2a4>
 800a522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a526:	2300      	movs	r3, #0
 800a528:	f7f6 faa4 	bl	8000a74 <__aeabi_dcmplt>
 800a52c:	3800      	subs	r0, #0
 800a52e:	bf18      	it	ne
 800a530:	2001      	movne	r0, #1
 800a532:	f1b9 0f00 	cmp.w	r9, #0
 800a536:	dccf      	bgt.n	800a4d8 <__ieee754_pow+0x210>
 800a538:	e7da      	b.n	800a4f0 <__ieee754_pow+0x228>
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w
 800a540:	00000000 	.word	0x00000000
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	00000000 	.word	0x00000000
 800a54c:	bff00000 	.word	0xbff00000
 800a550:	fff00000 	.word	0xfff00000
 800a554:	7ff00000 	.word	0x7ff00000
 800a558:	433fffff 	.word	0x433fffff
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	3fefffff 	.word	0x3fefffff
 800a564:	3fe00000 	.word	0x3fe00000
 800a568:	43f00000 	.word	0x43f00000
 800a56c:	4b5a      	ldr	r3, [pc, #360]	@ (800a6d8 <__ieee754_pow+0x410>)
 800a56e:	f7f5 fe57 	bl	8000220 <__aeabi_dsub>
 800a572:	a351      	add	r3, pc, #324	@ (adr r3, 800a6b8 <__ieee754_pow+0x3f0>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	f7f6 f808 	bl	8000590 <__aeabi_dmul>
 800a580:	a34f      	add	r3, pc, #316	@ (adr r3, 800a6c0 <__ieee754_pow+0x3f8>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	4620      	mov	r0, r4
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7f5 ffff 	bl	8000590 <__aeabi_dmul>
 800a592:	4b52      	ldr	r3, [pc, #328]	@ (800a6dc <__ieee754_pow+0x414>)
 800a594:	4682      	mov	sl, r0
 800a596:	468b      	mov	fp, r1
 800a598:	2200      	movs	r2, #0
 800a59a:	4620      	mov	r0, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	f7f5 fff7 	bl	8000590 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	a148      	add	r1, pc, #288	@ (adr r1, 800a6c8 <__ieee754_pow+0x400>)
 800a5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ac:	f7f5 fe38 	bl	8000220 <__aeabi_dsub>
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	462b      	mov	r3, r5
 800a5b4:	f7f5 ffec 	bl	8000590 <__aeabi_dmul>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	2000      	movs	r0, #0
 800a5be:	4948      	ldr	r1, [pc, #288]	@ (800a6e0 <__ieee754_pow+0x418>)
 800a5c0:	f7f5 fe2e 	bl	8000220 <__aeabi_dsub>
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4689      	mov	r9, r1
 800a5ca:	462b      	mov	r3, r5
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f7f5 ffde 	bl	8000590 <__aeabi_dmul>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f7f5 ffd8 	bl	8000590 <__aeabi_dmul>
 800a5e0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a6d0 <__ieee754_pow+0x408>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 ffd3 	bl	8000590 <__aeabi_dmul>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	4659      	mov	r1, fp
 800a5f2:	f7f5 fe15 	bl	8000220 <__aeabi_dsub>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4680      	mov	r8, r0
 800a5fc:	4689      	mov	r9, r1
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7f5 fe0f 	bl	8000224 <__adddf3>
 800a606:	2400      	movs	r4, #0
 800a608:	4632      	mov	r2, r6
 800a60a:	463b      	mov	r3, r7
 800a60c:	4620      	mov	r0, r4
 800a60e:	460d      	mov	r5, r1
 800a610:	f7f5 fe06 	bl	8000220 <__aeabi_dsub>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7f5 fe00 	bl	8000220 <__aeabi_dsub>
 800a620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a624:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a628:	2300      	movs	r3, #0
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a630:	4606      	mov	r6, r0
 800a632:	460f      	mov	r7, r1
 800a634:	4652      	mov	r2, sl
 800a636:	465b      	mov	r3, fp
 800a638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a63c:	f7f5 fdf0 	bl	8000220 <__aeabi_dsub>
 800a640:	4622      	mov	r2, r4
 800a642:	462b      	mov	r3, r5
 800a644:	f7f5 ffa4 	bl	8000590 <__aeabi_dmul>
 800a648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a64c:	4680      	mov	r8, r0
 800a64e:	4689      	mov	r9, r1
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f5 ff9c 	bl	8000590 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4640      	mov	r0, r8
 800a65e:	4649      	mov	r1, r9
 800a660:	f7f5 fde0 	bl	8000224 <__adddf3>
 800a664:	4652      	mov	r2, sl
 800a666:	465b      	mov	r3, fp
 800a668:	4606      	mov	r6, r0
 800a66a:	460f      	mov	r7, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 ff8e 	bl	8000590 <__aeabi_dmul>
 800a674:	460b      	mov	r3, r1
 800a676:	4602      	mov	r2, r0
 800a678:	4680      	mov	r8, r0
 800a67a:	4689      	mov	r9, r1
 800a67c:	4630      	mov	r0, r6
 800a67e:	4639      	mov	r1, r7
 800a680:	f7f5 fdd0 	bl	8000224 <__adddf3>
 800a684:	4b17      	ldr	r3, [pc, #92]	@ (800a6e4 <__ieee754_pow+0x41c>)
 800a686:	4299      	cmp	r1, r3
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	468a      	mov	sl, r1
 800a68e:	468b      	mov	fp, r1
 800a690:	f340 82ef 	ble.w	800ac72 <__ieee754_pow+0x9aa>
 800a694:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a698:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a69c:	4303      	orrs	r3, r0
 800a69e:	f000 81e8 	beq.w	800aa72 <__ieee754_pow+0x7aa>
 800a6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f7f6 f9e3 	bl	8000a74 <__aeabi_dcmplt>
 800a6ae:	3800      	subs	r0, #0
 800a6b0:	bf18      	it	ne
 800a6b2:	2001      	movne	r0, #1
 800a6b4:	e710      	b.n	800a4d8 <__ieee754_pow+0x210>
 800a6b6:	bf00      	nop
 800a6b8:	60000000 	.word	0x60000000
 800a6bc:	3ff71547 	.word	0x3ff71547
 800a6c0:	f85ddf44 	.word	0xf85ddf44
 800a6c4:	3e54ae0b 	.word	0x3e54ae0b
 800a6c8:	55555555 	.word	0x55555555
 800a6cc:	3fd55555 	.word	0x3fd55555
 800a6d0:	652b82fe 	.word	0x652b82fe
 800a6d4:	3ff71547 	.word	0x3ff71547
 800a6d8:	3ff00000 	.word	0x3ff00000
 800a6dc:	3fd00000 	.word	0x3fd00000
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	408fffff 	.word	0x408fffff
 800a6e8:	4bd5      	ldr	r3, [pc, #852]	@ (800aa40 <__ieee754_pow+0x778>)
 800a6ea:	402b      	ands	r3, r5
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	b92b      	cbnz	r3, 800a6fc <__ieee754_pow+0x434>
 800a6f0:	4bd4      	ldr	r3, [pc, #848]	@ (800aa44 <__ieee754_pow+0x77c>)
 800a6f2:	f7f5 ff4d 	bl	8000590 <__aeabi_dmul>
 800a6f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a6fa:	468b      	mov	fp, r1
 800a6fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a700:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a704:	4413      	add	r3, r2
 800a706:	930a      	str	r3, [sp, #40]	@ 0x28
 800a708:	4bcf      	ldr	r3, [pc, #828]	@ (800aa48 <__ieee754_pow+0x780>)
 800a70a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a70e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a712:	459b      	cmp	fp, r3
 800a714:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a718:	dd08      	ble.n	800a72c <__ieee754_pow+0x464>
 800a71a:	4bcc      	ldr	r3, [pc, #816]	@ (800aa4c <__ieee754_pow+0x784>)
 800a71c:	459b      	cmp	fp, r3
 800a71e:	f340 81a5 	ble.w	800aa6c <__ieee754_pow+0x7a4>
 800a722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a724:	3301      	adds	r3, #1
 800a726:	930a      	str	r3, [sp, #40]	@ 0x28
 800a728:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a72c:	f04f 0a00 	mov.w	sl, #0
 800a730:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a734:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a736:	4bc6      	ldr	r3, [pc, #792]	@ (800aa50 <__ieee754_pow+0x788>)
 800a738:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a73c:	ed93 7b00 	vldr	d7, [r3]
 800a740:	4629      	mov	r1, r5
 800a742:	ec53 2b17 	vmov	r2, r3, d7
 800a746:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a74a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a74e:	f7f5 fd67 	bl	8000220 <__aeabi_dsub>
 800a752:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a756:	4606      	mov	r6, r0
 800a758:	460f      	mov	r7, r1
 800a75a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a75e:	f7f5 fd61 	bl	8000224 <__adddf3>
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	2000      	movs	r0, #0
 800a768:	49ba      	ldr	r1, [pc, #744]	@ (800aa54 <__ieee754_pow+0x78c>)
 800a76a:	f7f6 f83b 	bl	80007e4 <__aeabi_ddiv>
 800a76e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4630      	mov	r0, r6
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f5 ff09 	bl	8000590 <__aeabi_dmul>
 800a77e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a782:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a786:	106d      	asrs	r5, r5, #1
 800a788:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a78c:	f04f 0b00 	mov.w	fp, #0
 800a790:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a794:	4661      	mov	r1, ip
 800a796:	2200      	movs	r2, #0
 800a798:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a79c:	4658      	mov	r0, fp
 800a79e:	46e1      	mov	r9, ip
 800a7a0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	f7f5 fef2 	bl	8000590 <__aeabi_dmul>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	f7f5 fd34 	bl	8000220 <__aeabi_dsub>
 800a7b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7bc:	4606      	mov	r6, r0
 800a7be:	460f      	mov	r7, r1
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	f7f5 fd2c 	bl	8000220 <__aeabi_dsub>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7d0:	f7f5 fd26 	bl	8000220 <__aeabi_dsub>
 800a7d4:	465a      	mov	r2, fp
 800a7d6:	464b      	mov	r3, r9
 800a7d8:	f7f5 feda 	bl	8000590 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f5 fd1c 	bl	8000220 <__aeabi_dsub>
 800a7e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a7ec:	f7f5 fed0 	bl	8000590 <__aeabi_dmul>
 800a7f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f7f5 fec8 	bl	8000590 <__aeabi_dmul>
 800a800:	a37d      	add	r3, pc, #500	@ (adr r3, 800a9f8 <__ieee754_pow+0x730>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	4604      	mov	r4, r0
 800a808:	460d      	mov	r5, r1
 800a80a:	f7f5 fec1 	bl	8000590 <__aeabi_dmul>
 800a80e:	a37c      	add	r3, pc, #496	@ (adr r3, 800aa00 <__ieee754_pow+0x738>)
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	f7f5 fd06 	bl	8000224 <__adddf3>
 800a818:	4622      	mov	r2, r4
 800a81a:	462b      	mov	r3, r5
 800a81c:	f7f5 feb8 	bl	8000590 <__aeabi_dmul>
 800a820:	a379      	add	r3, pc, #484	@ (adr r3, 800aa08 <__ieee754_pow+0x740>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7f5 fcfd 	bl	8000224 <__adddf3>
 800a82a:	4622      	mov	r2, r4
 800a82c:	462b      	mov	r3, r5
 800a82e:	f7f5 feaf 	bl	8000590 <__aeabi_dmul>
 800a832:	a377      	add	r3, pc, #476	@ (adr r3, 800aa10 <__ieee754_pow+0x748>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	f7f5 fcf4 	bl	8000224 <__adddf3>
 800a83c:	4622      	mov	r2, r4
 800a83e:	462b      	mov	r3, r5
 800a840:	f7f5 fea6 	bl	8000590 <__aeabi_dmul>
 800a844:	a374      	add	r3, pc, #464	@ (adr r3, 800aa18 <__ieee754_pow+0x750>)
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 fceb 	bl	8000224 <__adddf3>
 800a84e:	4622      	mov	r2, r4
 800a850:	462b      	mov	r3, r5
 800a852:	f7f5 fe9d 	bl	8000590 <__aeabi_dmul>
 800a856:	a372      	add	r3, pc, #456	@ (adr r3, 800aa20 <__ieee754_pow+0x758>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fce2 	bl	8000224 <__adddf3>
 800a860:	4622      	mov	r2, r4
 800a862:	4606      	mov	r6, r0
 800a864:	460f      	mov	r7, r1
 800a866:	462b      	mov	r3, r5
 800a868:	4620      	mov	r0, r4
 800a86a:	4629      	mov	r1, r5
 800a86c:	f7f5 fe90 	bl	8000590 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 fe8a 	bl	8000590 <__aeabi_dmul>
 800a87c:	465a      	mov	r2, fp
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	464b      	mov	r3, r9
 800a884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a888:	f7f5 fccc 	bl	8000224 <__adddf3>
 800a88c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a890:	f7f5 fe7e 	bl	8000590 <__aeabi_dmul>
 800a894:	4622      	mov	r2, r4
 800a896:	462b      	mov	r3, r5
 800a898:	f7f5 fcc4 	bl	8000224 <__adddf3>
 800a89c:	465a      	mov	r2, fp
 800a89e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	f7f5 fe72 	bl	8000590 <__aeabi_dmul>
 800a8ac:	4b6a      	ldr	r3, [pc, #424]	@ (800aa58 <__ieee754_pow+0x790>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	460f      	mov	r7, r1
 800a8b4:	f7f5 fcb6 	bl	8000224 <__adddf3>
 800a8b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8bc:	f7f5 fcb2 	bl	8000224 <__adddf3>
 800a8c0:	46d8      	mov	r8, fp
 800a8c2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	465a      	mov	r2, fp
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a8d4:	f7f5 fe5c 	bl	8000590 <__aeabi_dmul>
 800a8d8:	465c      	mov	r4, fp
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4689      	mov	r9, r1
 800a8de:	4b5e      	ldr	r3, [pc, #376]	@ (800aa58 <__ieee754_pow+0x790>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	f7f5 fc9b 	bl	8000220 <__aeabi_dsub>
 800a8ea:	4632      	mov	r2, r6
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	f7f5 fc97 	bl	8000220 <__aeabi_dsub>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a8fa:	f7f5 fc91 	bl	8000220 <__aeabi_dsub>
 800a8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a902:	f7f5 fe45 	bl	8000590 <__aeabi_dmul>
 800a906:	4622      	mov	r2, r4
 800a908:	4606      	mov	r6, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	462b      	mov	r3, r5
 800a90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a912:	f7f5 fe3d 	bl	8000590 <__aeabi_dmul>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	f7f5 fc81 	bl	8000224 <__adddf3>
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4640      	mov	r0, r8
 800a92c:	4649      	mov	r1, r9
 800a92e:	f7f5 fc79 	bl	8000224 <__adddf3>
 800a932:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a936:	a33c      	add	r3, pc, #240	@ (adr r3, 800aa28 <__ieee754_pow+0x760>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	4658      	mov	r0, fp
 800a93e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a942:	460d      	mov	r5, r1
 800a944:	f7f5 fe24 	bl	8000590 <__aeabi_dmul>
 800a948:	465c      	mov	r4, fp
 800a94a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a94e:	4642      	mov	r2, r8
 800a950:	464b      	mov	r3, r9
 800a952:	4620      	mov	r0, r4
 800a954:	4629      	mov	r1, r5
 800a956:	f7f5 fc63 	bl	8000220 <__aeabi_dsub>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f5 fc5d 	bl	8000220 <__aeabi_dsub>
 800a966:	a332      	add	r3, pc, #200	@ (adr r3, 800aa30 <__ieee754_pow+0x768>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fe10 	bl	8000590 <__aeabi_dmul>
 800a970:	a331      	add	r3, pc, #196	@ (adr r3, 800aa38 <__ieee754_pow+0x770>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	4606      	mov	r6, r0
 800a978:	460f      	mov	r7, r1
 800a97a:	4620      	mov	r0, r4
 800a97c:	4629      	mov	r1, r5
 800a97e:	f7f5 fe07 	bl	8000590 <__aeabi_dmul>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f5 fc4b 	bl	8000224 <__adddf3>
 800a98e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a990:	4b32      	ldr	r3, [pc, #200]	@ (800aa5c <__ieee754_pow+0x794>)
 800a992:	4413      	add	r3, r2
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fc44 	bl	8000224 <__adddf3>
 800a99c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9a2:	f7f5 fd8b 	bl	80004bc <__aeabi_i2d>
 800a9a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a9a8:	4b2d      	ldr	r3, [pc, #180]	@ (800aa60 <__ieee754_pow+0x798>)
 800a9aa:	4413      	add	r3, r2
 800a9ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9bc:	f7f5 fc32 	bl	8000224 <__adddf3>
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	f7f5 fc2e 	bl	8000224 <__adddf3>
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	f7f5 fc2a 	bl	8000224 <__adddf3>
 800a9d0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	4658      	mov	r0, fp
 800a9da:	460d      	mov	r5, r1
 800a9dc:	f7f5 fc20 	bl	8000220 <__aeabi_dsub>
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	f7f5 fc1c 	bl	8000220 <__aeabi_dsub>
 800a9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ec:	f7f5 fc18 	bl	8000220 <__aeabi_dsub>
 800a9f0:	465c      	mov	r4, fp
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	e036      	b.n	800aa64 <__ieee754_pow+0x79c>
 800a9f6:	bf00      	nop
 800a9f8:	4a454eef 	.word	0x4a454eef
 800a9fc:	3fca7e28 	.word	0x3fca7e28
 800aa00:	93c9db65 	.word	0x93c9db65
 800aa04:	3fcd864a 	.word	0x3fcd864a
 800aa08:	a91d4101 	.word	0xa91d4101
 800aa0c:	3fd17460 	.word	0x3fd17460
 800aa10:	518f264d 	.word	0x518f264d
 800aa14:	3fd55555 	.word	0x3fd55555
 800aa18:	db6fabff 	.word	0xdb6fabff
 800aa1c:	3fdb6db6 	.word	0x3fdb6db6
 800aa20:	33333303 	.word	0x33333303
 800aa24:	3fe33333 	.word	0x3fe33333
 800aa28:	e0000000 	.word	0xe0000000
 800aa2c:	3feec709 	.word	0x3feec709
 800aa30:	dc3a03fd 	.word	0xdc3a03fd
 800aa34:	3feec709 	.word	0x3feec709
 800aa38:	145b01f5 	.word	0x145b01f5
 800aa3c:	be3e2fe0 	.word	0xbe3e2fe0
 800aa40:	7ff00000 	.word	0x7ff00000
 800aa44:	43400000 	.word	0x43400000
 800aa48:	0003988e 	.word	0x0003988e
 800aa4c:	000bb679 	.word	0x000bb679
 800aa50:	0800af50 	.word	0x0800af50
 800aa54:	3ff00000 	.word	0x3ff00000
 800aa58:	40080000 	.word	0x40080000
 800aa5c:	0800af30 	.word	0x0800af30
 800aa60:	0800af40 	.word	0x0800af40
 800aa64:	460b      	mov	r3, r1
 800aa66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa6a:	e5d7      	b.n	800a61c <__ieee754_pow+0x354>
 800aa6c:	f04f 0a01 	mov.w	sl, #1
 800aa70:	e65e      	b.n	800a730 <__ieee754_pow+0x468>
 800aa72:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ad44 <__ieee754_pow+0xa7c>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	4630      	mov	r0, r6
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	f7f5 fbd2 	bl	8000224 <__adddf3>
 800aa80:	4642      	mov	r2, r8
 800aa82:	e9cd 0100 	strd	r0, r1, [sp]
 800aa86:	464b      	mov	r3, r9
 800aa88:	4620      	mov	r0, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	f7f5 fbc8 	bl	8000220 <__aeabi_dsub>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa98:	f7f6 f80a 	bl	8000ab0 <__aeabi_dcmpgt>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	f47f ae00 	bne.w	800a6a2 <__ieee754_pow+0x3da>
 800aaa2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800aaa6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aaaa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800aaae:	fa43 fa0a 	asr.w	sl, r3, sl
 800aab2:	44da      	add	sl, fp
 800aab4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800aab8:	489d      	ldr	r0, [pc, #628]	@ (800ad30 <__ieee754_pow+0xa68>)
 800aaba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800aabe:	4108      	asrs	r0, r1
 800aac0:	ea00 030a 	and.w	r3, r0, sl
 800aac4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800aac8:	f1c1 0114 	rsb	r1, r1, #20
 800aacc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800aad0:	fa4a fa01 	asr.w	sl, sl, r1
 800aad4:	f1bb 0f00 	cmp.w	fp, #0
 800aad8:	4640      	mov	r0, r8
 800aada:	4649      	mov	r1, r9
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	bfb8      	it	lt
 800aae2:	f1ca 0a00 	rsblt	sl, sl, #0
 800aae6:	f7f5 fb9b 	bl	8000220 <__aeabi_dsub>
 800aaea:	4680      	mov	r8, r0
 800aaec:	4689      	mov	r9, r1
 800aaee:	4632      	mov	r2, r6
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	f7f5 fb95 	bl	8000224 <__adddf3>
 800aafa:	2400      	movs	r4, #0
 800aafc:	a37c      	add	r3, pc, #496	@ (adr r3, 800acf0 <__ieee754_pow+0xa28>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	4620      	mov	r0, r4
 800ab04:	460d      	mov	r5, r1
 800ab06:	f7f5 fd43 	bl	8000590 <__aeabi_dmul>
 800ab0a:	4642      	mov	r2, r8
 800ab0c:	e9cd 0100 	strd	r0, r1, [sp]
 800ab10:	464b      	mov	r3, r9
 800ab12:	4620      	mov	r0, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7f5 fb83 	bl	8000220 <__aeabi_dsub>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4630      	mov	r0, r6
 800ab20:	4639      	mov	r1, r7
 800ab22:	f7f5 fb7d 	bl	8000220 <__aeabi_dsub>
 800ab26:	a374      	add	r3, pc, #464	@ (adr r3, 800acf8 <__ieee754_pow+0xa30>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 fd30 	bl	8000590 <__aeabi_dmul>
 800ab30:	a373      	add	r3, pc, #460	@ (adr r3, 800ad00 <__ieee754_pow+0xa38>)
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	4680      	mov	r8, r0
 800ab38:	4689      	mov	r9, r1
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7f5 fd27 	bl	8000590 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	f7f5 fb6b 	bl	8000224 <__adddf3>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab5a:	f7f5 fb63 	bl	8000224 <__adddf3>
 800ab5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab62:	4680      	mov	r8, r0
 800ab64:	4689      	mov	r9, r1
 800ab66:	f7f5 fb5b 	bl	8000220 <__aeabi_dsub>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 fb55 	bl	8000220 <__aeabi_dsub>
 800ab76:	4642      	mov	r2, r8
 800ab78:	4606      	mov	r6, r0
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	4640      	mov	r0, r8
 800ab80:	4649      	mov	r1, r9
 800ab82:	f7f5 fd05 	bl	8000590 <__aeabi_dmul>
 800ab86:	a360      	add	r3, pc, #384	@ (adr r3, 800ad08 <__ieee754_pow+0xa40>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	f7f5 fcfe 	bl	8000590 <__aeabi_dmul>
 800ab94:	a35e      	add	r3, pc, #376	@ (adr r3, 800ad10 <__ieee754_pow+0xa48>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f7f5 fb41 	bl	8000220 <__aeabi_dsub>
 800ab9e:	4622      	mov	r2, r4
 800aba0:	462b      	mov	r3, r5
 800aba2:	f7f5 fcf5 	bl	8000590 <__aeabi_dmul>
 800aba6:	a35c      	add	r3, pc, #368	@ (adr r3, 800ad18 <__ieee754_pow+0xa50>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f7f5 fb3a 	bl	8000224 <__adddf3>
 800abb0:	4622      	mov	r2, r4
 800abb2:	462b      	mov	r3, r5
 800abb4:	f7f5 fcec 	bl	8000590 <__aeabi_dmul>
 800abb8:	a359      	add	r3, pc, #356	@ (adr r3, 800ad20 <__ieee754_pow+0xa58>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fb2f 	bl	8000220 <__aeabi_dsub>
 800abc2:	4622      	mov	r2, r4
 800abc4:	462b      	mov	r3, r5
 800abc6:	f7f5 fce3 	bl	8000590 <__aeabi_dmul>
 800abca:	a357      	add	r3, pc, #348	@ (adr r3, 800ad28 <__ieee754_pow+0xa60>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fb28 	bl	8000224 <__adddf3>
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 fcda 	bl	8000590 <__aeabi_dmul>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 fb1c 	bl	8000220 <__aeabi_dsub>
 800abe8:	4604      	mov	r4, r0
 800abea:	460d      	mov	r5, r1
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 fccc 	bl	8000590 <__aeabi_dmul>
 800abf8:	2200      	movs	r2, #0
 800abfa:	e9cd 0100 	strd	r0, r1, [sp]
 800abfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac02:	4620      	mov	r0, r4
 800ac04:	4629      	mov	r1, r5
 800ac06:	f7f5 fb0b 	bl	8000220 <__aeabi_dsub>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac12:	f7f5 fde7 	bl	80007e4 <__aeabi_ddiv>
 800ac16:	4632      	mov	r2, r6
 800ac18:	4604      	mov	r4, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	463b      	mov	r3, r7
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 fcb5 	bl	8000590 <__aeabi_dmul>
 800ac26:	4632      	mov	r2, r6
 800ac28:	463b      	mov	r3, r7
 800ac2a:	f7f5 fafb 	bl	8000224 <__adddf3>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4620      	mov	r0, r4
 800ac34:	4629      	mov	r1, r5
 800ac36:	f7f5 faf3 	bl	8000220 <__aeabi_dsub>
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	f7f5 faef 	bl	8000220 <__aeabi_dsub>
 800ac42:	460b      	mov	r3, r1
 800ac44:	4602      	mov	r2, r0
 800ac46:	493b      	ldr	r1, [pc, #236]	@ (800ad34 <__ieee754_pow+0xa6c>)
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f7f5 fae9 	bl	8000220 <__aeabi_dsub>
 800ac4e:	ec41 0b10 	vmov	d0, r0, r1
 800ac52:	ee10 3a90 	vmov	r3, s1
 800ac56:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ac5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac5e:	da30      	bge.n	800acc2 <__ieee754_pow+0x9fa>
 800ac60:	4650      	mov	r0, sl
 800ac62:	f000 f87d 	bl	800ad60 <scalbn>
 800ac66:	ec51 0b10 	vmov	r0, r1, d0
 800ac6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac6e:	f7ff bbd2 	b.w	800a416 <__ieee754_pow+0x14e>
 800ac72:	4c31      	ldr	r4, [pc, #196]	@ (800ad38 <__ieee754_pow+0xa70>)
 800ac74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d91a      	bls.n	800acb2 <__ieee754_pow+0x9ea>
 800ac7c:	4b2f      	ldr	r3, [pc, #188]	@ (800ad3c <__ieee754_pow+0xa74>)
 800ac7e:	440b      	add	r3, r1
 800ac80:	4303      	orrs	r3, r0
 800ac82:	d009      	beq.n	800ac98 <__ieee754_pow+0x9d0>
 800ac84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f7f5 fef2 	bl	8000a74 <__aeabi_dcmplt>
 800ac90:	3800      	subs	r0, #0
 800ac92:	bf18      	it	ne
 800ac94:	2001      	movne	r0, #1
 800ac96:	e42b      	b.n	800a4f0 <__ieee754_pow+0x228>
 800ac98:	4642      	mov	r2, r8
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	f7f5 fac0 	bl	8000220 <__aeabi_dsub>
 800aca0:	4632      	mov	r2, r6
 800aca2:	463b      	mov	r3, r7
 800aca4:	f7f5 fefa 	bl	8000a9c <__aeabi_dcmpge>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1eb      	bne.n	800ac84 <__ieee754_pow+0x9bc>
 800acac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ad4c <__ieee754_pow+0xa84>
 800acb0:	e6f7      	b.n	800aaa2 <__ieee754_pow+0x7da>
 800acb2:	469a      	mov	sl, r3
 800acb4:	4b22      	ldr	r3, [pc, #136]	@ (800ad40 <__ieee754_pow+0xa78>)
 800acb6:	459a      	cmp	sl, r3
 800acb8:	f63f aef3 	bhi.w	800aaa2 <__ieee754_pow+0x7da>
 800acbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800acc0:	e715      	b.n	800aaee <__ieee754_pow+0x826>
 800acc2:	ec51 0b10 	vmov	r0, r1, d0
 800acc6:	4619      	mov	r1, r3
 800acc8:	e7cf      	b.n	800ac6a <__ieee754_pow+0x9a2>
 800acca:	491a      	ldr	r1, [pc, #104]	@ (800ad34 <__ieee754_pow+0xa6c>)
 800accc:	2000      	movs	r0, #0
 800acce:	f7ff bb18 	b.w	800a302 <__ieee754_pow+0x3a>
 800acd2:	2000      	movs	r0, #0
 800acd4:	2100      	movs	r1, #0
 800acd6:	f7ff bb14 	b.w	800a302 <__ieee754_pow+0x3a>
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	f7ff bb10 	b.w	800a302 <__ieee754_pow+0x3a>
 800ace2:	460c      	mov	r4, r1
 800ace4:	f7ff bb5e 	b.w	800a3a4 <__ieee754_pow+0xdc>
 800ace8:	2400      	movs	r4, #0
 800acea:	f7ff bb49 	b.w	800a380 <__ieee754_pow+0xb8>
 800acee:	bf00      	nop
 800acf0:	00000000 	.word	0x00000000
 800acf4:	3fe62e43 	.word	0x3fe62e43
 800acf8:	fefa39ef 	.word	0xfefa39ef
 800acfc:	3fe62e42 	.word	0x3fe62e42
 800ad00:	0ca86c39 	.word	0x0ca86c39
 800ad04:	be205c61 	.word	0xbe205c61
 800ad08:	72bea4d0 	.word	0x72bea4d0
 800ad0c:	3e663769 	.word	0x3e663769
 800ad10:	c5d26bf1 	.word	0xc5d26bf1
 800ad14:	3ebbbd41 	.word	0x3ebbbd41
 800ad18:	af25de2c 	.word	0xaf25de2c
 800ad1c:	3f11566a 	.word	0x3f11566a
 800ad20:	16bebd93 	.word	0x16bebd93
 800ad24:	3f66c16c 	.word	0x3f66c16c
 800ad28:	5555553e 	.word	0x5555553e
 800ad2c:	3fc55555 	.word	0x3fc55555
 800ad30:	fff00000 	.word	0xfff00000
 800ad34:	3ff00000 	.word	0x3ff00000
 800ad38:	4090cbff 	.word	0x4090cbff
 800ad3c:	3f6f3400 	.word	0x3f6f3400
 800ad40:	3fe00000 	.word	0x3fe00000
 800ad44:	652b82fe 	.word	0x652b82fe
 800ad48:	3c971547 	.word	0x3c971547
 800ad4c:	4090cc00 	.word	0x4090cc00

0800ad50 <fabs>:
 800ad50:	ec51 0b10 	vmov	r0, r1, d0
 800ad54:	4602      	mov	r2, r0
 800ad56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad5a:	ec43 2b10 	vmov	d0, r2, r3
 800ad5e:	4770      	bx	lr

0800ad60 <scalbn>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	ec55 4b10 	vmov	r4, r5, d0
 800ad66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	b991      	cbnz	r1, 800ad96 <scalbn+0x36>
 800ad70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ad74:	4323      	orrs	r3, r4
 800ad76:	d03d      	beq.n	800adf4 <scalbn+0x94>
 800ad78:	4b35      	ldr	r3, [pc, #212]	@ (800ae50 <scalbn+0xf0>)
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f7f5 fc06 	bl	8000590 <__aeabi_dmul>
 800ad84:	4b33      	ldr	r3, [pc, #204]	@ (800ae54 <scalbn+0xf4>)
 800ad86:	429e      	cmp	r6, r3
 800ad88:	4604      	mov	r4, r0
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	da0f      	bge.n	800adae <scalbn+0x4e>
 800ad8e:	a328      	add	r3, pc, #160	@ (adr r3, 800ae30 <scalbn+0xd0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	e01e      	b.n	800add4 <scalbn+0x74>
 800ad96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ad9a:	4291      	cmp	r1, r2
 800ad9c:	d10b      	bne.n	800adb6 <scalbn+0x56>
 800ad9e:	4622      	mov	r2, r4
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fa3e 	bl	8000224 <__adddf3>
 800ada8:	4604      	mov	r4, r0
 800adaa:	460d      	mov	r5, r1
 800adac:	e022      	b.n	800adf4 <scalbn+0x94>
 800adae:	460b      	mov	r3, r1
 800adb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800adb4:	3936      	subs	r1, #54	@ 0x36
 800adb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800adba:	4296      	cmp	r6, r2
 800adbc:	dd0d      	ble.n	800adda <scalbn+0x7a>
 800adbe:	2d00      	cmp	r5, #0
 800adc0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ae38 <scalbn+0xd8>)
 800adc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc6:	da02      	bge.n	800adce <scalbn+0x6e>
 800adc8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ae40 <scalbn+0xe0>)
 800adca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adce:	a31a      	add	r3, pc, #104	@ (adr r3, 800ae38 <scalbn+0xd8>)
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	f7f5 fbdc 	bl	8000590 <__aeabi_dmul>
 800add8:	e7e6      	b.n	800ada8 <scalbn+0x48>
 800adda:	1872      	adds	r2, r6, r1
 800addc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ade0:	428a      	cmp	r2, r1
 800ade2:	dcec      	bgt.n	800adbe <scalbn+0x5e>
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	dd08      	ble.n	800adfa <scalbn+0x9a>
 800ade8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800adec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800adf0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800adf4:	ec45 4b10 	vmov	d0, r4, r5
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
 800adfa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800adfe:	da08      	bge.n	800ae12 <scalbn+0xb2>
 800ae00:	2d00      	cmp	r5, #0
 800ae02:	a10b      	add	r1, pc, #44	@ (adr r1, 800ae30 <scalbn+0xd0>)
 800ae04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae08:	dac1      	bge.n	800ad8e <scalbn+0x2e>
 800ae0a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ae48 <scalbn+0xe8>)
 800ae0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae10:	e7bd      	b.n	800ad8e <scalbn+0x2e>
 800ae12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae16:	3236      	adds	r2, #54	@ 0x36
 800ae18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae20:	4620      	mov	r0, r4
 800ae22:	4b0d      	ldr	r3, [pc, #52]	@ (800ae58 <scalbn+0xf8>)
 800ae24:	4629      	mov	r1, r5
 800ae26:	2200      	movs	r2, #0
 800ae28:	e7d4      	b.n	800add4 <scalbn+0x74>
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w
 800ae30:	c2f8f359 	.word	0xc2f8f359
 800ae34:	01a56e1f 	.word	0x01a56e1f
 800ae38:	8800759c 	.word	0x8800759c
 800ae3c:	7e37e43c 	.word	0x7e37e43c
 800ae40:	8800759c 	.word	0x8800759c
 800ae44:	fe37e43c 	.word	0xfe37e43c
 800ae48:	c2f8f359 	.word	0xc2f8f359
 800ae4c:	81a56e1f 	.word	0x81a56e1f
 800ae50:	43500000 	.word	0x43500000
 800ae54:	ffff3cb0 	.word	0xffff3cb0
 800ae58:	3c900000 	.word	0x3c900000

0800ae5c <with_errno>:
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	ed2d 8b02 	vpush	{d8}
 800ae62:	eeb0 8a40 	vmov.f32	s16, s0
 800ae66:	eef0 8a60 	vmov.f32	s17, s1
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	f7ff f870 	bl	8009f50 <__errno>
 800ae70:	eeb0 0a48 	vmov.f32	s0, s16
 800ae74:	eef0 0a68 	vmov.f32	s1, s17
 800ae78:	ecbd 8b02 	vpop	{d8}
 800ae7c:	6004      	str	r4, [r0, #0]
 800ae7e:	bd10      	pop	{r4, pc}

0800ae80 <xflow>:
 800ae80:	4603      	mov	r3, r0
 800ae82:	b507      	push	{r0, r1, r2, lr}
 800ae84:	ec51 0b10 	vmov	r0, r1, d0
 800ae88:	b183      	cbz	r3, 800aeac <xflow+0x2c>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae90:	e9cd 2300 	strd	r2, r3, [sp]
 800ae94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae98:	f7f5 fb7a 	bl	8000590 <__aeabi_dmul>
 800ae9c:	ec41 0b10 	vmov	d0, r0, r1
 800aea0:	2022      	movs	r0, #34	@ 0x22
 800aea2:	b003      	add	sp, #12
 800aea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea8:	f7ff bfd8 	b.w	800ae5c <with_errno>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	e7ee      	b.n	800ae90 <xflow+0x10>
 800aeb2:	0000      	movs	r0, r0
 800aeb4:	0000      	movs	r0, r0
	...

0800aeb8 <__math_uflow>:
 800aeb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aec0 <__math_uflow+0x8>
 800aebc:	f7ff bfe0 	b.w	800ae80 <xflow>
 800aec0:	00000000 	.word	0x00000000
 800aec4:	10000000 	.word	0x10000000

0800aec8 <__math_oflow>:
 800aec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aed0 <__math_oflow+0x8>
 800aecc:	f7ff bfd8 	b.w	800ae80 <xflow>
 800aed0:	00000000 	.word	0x00000000
 800aed4:	70000000 	.word	0x70000000

0800aed8 <_init>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	bf00      	nop
 800aedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aede:	bc08      	pop	{r3}
 800aee0:	469e      	mov	lr, r3
 800aee2:	4770      	bx	lr

0800aee4 <_fini>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	bf00      	nop
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr
